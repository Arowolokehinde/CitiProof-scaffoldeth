{
  "address": "0x593C0cbA6a0e377d7BcB118AEeb691955db82078",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "initialOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_projectRegistry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_citizenRegistry",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_initialBudget",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousTotal",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTotal",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "updatedBy",
          "type": "address"
        }
      ],
      "name": "BudgetUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "contributionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "donor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        }
      ],
      "name": "DonationReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "authorizedBy",
          "type": "address"
        }
      ],
      "name": "EmergencyWithdrawal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "allocationId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum TreasuryFundTracking.FundSource",
          "name": "source",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "authorizedBy",
          "type": "address"
        }
      ],
      "name": "FundsAllocated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum TreasuryFundTracking.TransactionType",
          "name": "transactionType",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "TransactionRecorded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "verifiedBy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "verificationTimestamp",
          "type": "uint256"
        }
      ],
      "name": "TransactionVerified",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "treasurer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "authorized",
          "type": "bool"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "authorizedBy",
          "type": "address"
        }
      ],
      "name": "TreasurerAuthorized",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "enum TreasuryFundTracking.FundSource",
          "name": "_source",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "_ipfsDescriptionHash",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_documentHash",
          "type": "string"
        }
      ],
      "name": "allocateFundsToProject",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allocations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "allocationId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "enum TreasuryFundTracking.FundSource",
          "name": "source",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "authorizedBy",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "ipfsDescriptionHash",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "documentHash",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasurer",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_authorized",
          "type": "bool"
        }
      ],
      "name": "authorizeTreasurer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "authorizedTreasurers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "citizenRegistry",
      "outputs": [
        {
          "internalType": "contract CitizenIdentityRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "contributions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "contributionId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "donor",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "ipfsMessageHash",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "isAnonymous",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isRefunded",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "donorContributions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_reason",
          "type": "string"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBudgetOverview",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalBudget",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "allocatedBudget",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "spentBudget",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "availableBudget",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "utilizationPercentage",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContractBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_donor",
          "type": "address"
        }
      ],
      "name": "getDonorContributions",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        }
      ],
      "name": "getProjectAllocations",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        }
      ],
      "name": "getProjectFinancials",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "allocatedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "spentAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "availableAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "transactionCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "utilizationPercentage",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        }
      ],
      "name": "getProjectTransactions",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalContributions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUnverifiedTransactions",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "projectAllocations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "projectRegistry",
      "outputs": [
        {
          "internalType": "contract GovernmentProjectRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "projectTransactions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_ipfsMessageHash",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "_isAnonymous",
          "type": "bool"
        }
      ],
      "name": "receiveDonation",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "enum TreasuryFundTracking.TransactionType",
          "name": "_transactionType",
          "type": "uint8"
        },
        {
          "internalType": "enum TreasuryFundTracking.FundSource",
          "name": "_source",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_ipfsDescriptionHash",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_receiptHash",
          "type": "string"
        }
      ],
      "name": "recordTransaction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_contributionId",
          "type": "uint256"
        }
      ],
      "name": "refundDonation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "transactions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "enum TreasuryFundTracking.TransactionType",
          "name": "transactionType",
          "type": "uint8"
        },
        {
          "internalType": "enum TreasuryFundTracking.FundSource",
          "name": "source",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "authorizedBy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "ipfsDescriptionHash",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "receiptHash",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "isVerified",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "verifiedBy",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "verificationTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fromProjectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_toProjectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_reason",
          "type": "string"
        }
      ],
      "name": "transferFundsBetweenProjects",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newTotalBudget",
          "type": "uint256"
        }
      ],
      "name": "updateBudget",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_transactionId",
          "type": "uint256"
        }
      ],
      "name": "verifyTransaction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x472852585093237adb6dd140d558c2f3fc18be670f200d485974cf6888545300",
  "receipt": {
    "to": null,
    "from": "0x847118E06a68716b385a86a50250C598D33Ca68C",
    "contractAddress": "0x593C0cbA6a0e377d7BcB118AEeb691955db82078",
    "transactionIndex": 156,
    "gasUsed": "3224218",
    "logsBloom": "0x
    "blockHash": "0x5407913e8620a420ace3686b1127e95bc8249a88557fa32cb940e915b6429ef1",
    "transactionHash": "0x472852585093237adb6dd140d558c2f3fc18be670f200d485974cf6888545300",
    "logs": [
      {
        "transactionIndex": 156,
        "blockNumber": 9142957,
        "transactionHash": "0x472852585093237adb6dd140d558c2f3fc18be670f200d485974cf6888545300",
        "address": "0x593C0cbA6a0e377d7BcB118AEeb691955db82078",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000847118e06a68716b385a86a50250c598d33ca68c"
        ],
        "data": "0x",
        "logIndex": 169,
        "blockHash": "0x5407913e8620a420ace3686b1127e95bc8249a88557fa32cb940e915b6429ef1"
      }
    ],
    "blockNumber": 9142957,
    "cumulativeGasUsed": "17892746",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x847118E06a68716b385a86a50250C598D33Ca68C",
    "0xA2B1623a4AdE119f510Bd33493D70A246737bcD8",
    "0x9F4Bc4cb48e60871768b4cFB9CF9C53381063652",
    "1000000000000000000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "2510a4953b833be54b78475d9a98dd2b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_projectRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_citizenRegistry\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_initialBudget\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousTotal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotal\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"updatedBy\",\"type\":\"address\"}],\"name\":\"BudgetUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"contributionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"donor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"}],\"name\":\"DonationReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"authorizedBy\",\"type\":\"address\"}],\"name\":\"EmergencyWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"allocationId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum TreasuryFundTracking.FundSource\",\"name\":\"source\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"authorizedBy\",\"type\":\"address\"}],\"name\":\"FundsAllocated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum TreasuryFundTracking.TransactionType\",\"name\":\"transactionType\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"TransactionRecorded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"verifiedBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"verificationTimestamp\",\"type\":\"uint256\"}],\"name\":\"TransactionVerified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"treasurer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"authorized\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"authorizedBy\",\"type\":\"address\"}],\"name\":\"TreasurerAuthorized\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"enum TreasuryFundTracking.FundSource\",\"name\":\"_source\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_ipfsDescriptionHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_documentHash\",\"type\":\"string\"}],\"name\":\"allocateFundsToProject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allocations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"allocationId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"enum TreasuryFundTracking.FundSource\",\"name\":\"source\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"authorizedBy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"ipfsDescriptionHash\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"documentHash\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasurer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_authorized\",\"type\":\"bool\"}],\"name\":\"authorizeTreasurer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedTreasurers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"citizenRegistry\",\"outputs\":[{\"internalType\":\"contract CitizenIdentityRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contributions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"contributionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"donor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"ipfsMessageHash\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isAnonymous\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isRefunded\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"donorContributions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_reason\",\"type\":\"string\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBudgetOverview\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalBudget\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allocatedBudget\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spentBudget\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableBudget\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"utilizationPercentage\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_donor\",\"type\":\"address\"}],\"name\":\"getDonorContributions\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"getProjectAllocations\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"getProjectFinancials\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"allocatedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transactionCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"utilizationPercentage\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"getProjectTransactions\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalContributions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnverifiedTransactions\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"projectAllocations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projectRegistry\",\"outputs\":[{\"internalType\":\"contract GovernmentProjectRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"projectTransactions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_ipfsMessageHash\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_isAnonymous\",\"type\":\"bool\"}],\"name\":\"receiveDonation\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"enum TreasuryFundTracking.TransactionType\",\"name\":\"_transactionType\",\"type\":\"uint8\"},{\"internalType\":\"enum TreasuryFundTracking.FundSource\",\"name\":\"_source\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_ipfsDescriptionHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_receiptHash\",\"type\":\"string\"}],\"name\":\"recordTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_contributionId\",\"type\":\"uint256\"}],\"name\":\"refundDonation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transactions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"enum TreasuryFundTracking.TransactionType\",\"name\":\"transactionType\",\"type\":\"uint8\"},{\"internalType\":\"enum TreasuryFundTracking.FundSource\",\"name\":\"source\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"authorizedBy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"ipfsDescriptionHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"receiptHash\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isVerified\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"verifiedBy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"verificationTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fromProjectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_toProjectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_reason\",\"type\":\"string\"}],\"name\":\"transferFundsBetweenProjects\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newTotalBudget\",\"type\":\"uint256\"}],\"name\":\"updateBudget\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_transactionId\",\"type\":\"uint256\"}],\"name\":\"verifyTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"CitiProof Team\",\"details\":\"Handles all financial transparency and fund allocation tracking\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{\"allocateFundsToProject(uint256,uint256,uint8,string,string)\":{\"details\":\"Allocate funds to a specific project\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"receiveDonation(uint256,string,bool)\":{\"details\":\"Receive donor contribution\"},\"recordTransaction(uint256,uint256,uint8,uint8,address,string,string)\":{\"details\":\"Record a financial transaction (expenditure)\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferFundsBetweenProjects(uint256,uint256,uint256,string)\":{\"details\":\"Transfer funds between projects\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"verifyTransaction(uint256)\":{\"details\":\"Verify a transaction (by authorized verifiers)\"}},\"title\":\"TreasuryFundTracking\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TreasuryFundTracking.sol\":\"TreasuryFundTracking\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/CitizenIdentityRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n/**\\n * @title CitizenIdentityRegistry\\n * @dev Manages verified citizen identities and their verification levels\\n * @author CitiProof Team\\n */\\ncontract CitizenIdentityRegistry is Ownable, ReentrancyGuard {\\n    // Counter for citizen IDs (using simple uint256 instead of Counters)\\n    uint256 private _citizenIdCounter;\\n\\n    // Verification levels\\n    enum VerificationLevel {\\n        UNVERIFIED,    // Default state\\n        BASIC,         // Basic wallet connection + EFP\\n        VERIFIED,      // Enhanced verification (50+ EFP followers)\\n        PREMIUM        // Government-verified or high reputation\\n    }\\n\\n    // Citizen profile structure\\n    struct CitizenProfile {\\n        uint256 citizenId;\\n        address walletAddress;\\n        string ensName;              // ENS name if available\\n        string efpTokenId;           // EFP list token ID\\n        uint256 efpFollowers;        // EFP follower count\\n        uint256 efpFollowing;        // EFP following count\\n        VerificationLevel verificationLevel;\\n        uint256 registrationTimestamp;\\n        uint256 lastUpdateTimestamp;\\n        bool isActive;\\n        uint256 reputationScore;     // Link to reputation contract\\n        string ipfsMetadata;         // Additional profile data on IPFS\\n    }\\n\\n    // Storage mappings\\n    mapping(address => uint256) public walletToCitizenId;\\n    mapping(uint256 => CitizenProfile) public citizens;\\n    mapping(string => uint256) public ensNameToCitizenId;\\n    mapping(string => bool) public registeredEnsNames;\\n\\n    // Events\\n    event CitizenRegistered(\\n        uint256 indexed citizenId,\\n        address indexed walletAddress,\\n        string ensName,\\n        VerificationLevel verificationLevel\\n    );\\n\\n    event CitizenVerificationUpdated(\\n        uint256 indexed citizenId,\\n        address indexed walletAddress,\\n        VerificationLevel oldLevel,\\n        VerificationLevel newLevel\\n    );\\n\\n    event CitizenProfileUpdated(\\n        uint256 indexed citizenId,\\n        address indexed walletAddress,\\n        string ensName,\\n        string efpTokenId\\n    );\\n\\n    event CitizenDeactivated(\\n        uint256 indexed citizenId,\\n        address indexed walletAddress,\\n        address indexed deactivatedBy\\n    );\\n\\n    // Modifiers\\n    modifier onlyRegisteredCitizen() {\\n        require(walletToCitizenId[msg.sender] != 0, \\\"CitizenRegistry: Caller is not a registered citizen\\\");\\n        require(citizens[walletToCitizenId[msg.sender]].isActive, \\\"CitizenRegistry: Citizen account is not active\\\");\\n        _;\\n    }\\n\\n    modifier validCitizenId(uint256 _citizenId) {\\n        require(_citizenId > 0 && _citizenId <= _citizenIdCounter, \\\"CitizenRegistry: Invalid citizen ID\\\");\\n        _;\\n    }\\n\\n    modifier onlyActiveCitizen(uint256 _citizenId) {\\n        require(citizens[_citizenId].isActive, \\\"CitizenRegistry: Citizen is not active\\\");\\n        _;\\n    }\\n\\n    constructor(address initialOwner) Ownable(initialOwner) {}\\n\\n    /**\\n     * @dev Register a new citizen with flexible requirements\\n     * @param _ensName ENS name (can be empty string for wallet-only registration)\\n     * @param _efpTokenId EFP list token ID (can be empty string)\\n     * @param _efpFollowers Number of EFP followers (0 allowed for new users)\\n     * @param _efpFollowing Number of EFP following (0 allowed for new users)\\n     * @param _ipfsMetadata IPFS hash for additional profile data\\n     */\\n    function registerCitizen(\\n        string memory _ensName,\\n        string memory _efpTokenId,\\n        uint256 _efpFollowers,\\n        uint256 _efpFollowing,\\n        string memory _ipfsMetadata\\n    ) external nonReentrant {\\n        require(walletToCitizenId[msg.sender] == 0, \\\"CitizenRegistry: Wallet already registered\\\");\\n        \\n        // Check if ENS name is already taken (if provided)\\n        if (bytes(_ensName).length > 0) {\\n            require(!registeredEnsNames[_ensName], \\\"CitizenRegistry: ENS name already registered\\\");\\n        }\\n\\n        // Increment citizen ID counter\\n        _citizenIdCounter++;\\n        uint256 newCitizenId = _citizenIdCounter;\\n\\n        // Determine verification level based on EFP data\\n        VerificationLevel verificationLevel = _determineVerificationLevel(_efpFollowers, _efpFollowing);\\n\\n        // Create citizen profile\\n        citizens[newCitizenId] = CitizenProfile({\\n            citizenId: newCitizenId,\\n            walletAddress: msg.sender,\\n            ensName: _ensName,\\n            efpTokenId: _efpTokenId,\\n            efpFollowers: _efpFollowers,\\n            efpFollowing: _efpFollowing,\\n            verificationLevel: verificationLevel,\\n            registrationTimestamp: block.timestamp,\\n            lastUpdateTimestamp: block.timestamp,\\n            isActive: true,\\n            reputationScore: 0, // Will be updated by reputation contract\\n            ipfsMetadata: _ipfsMetadata\\n        });\\n\\n        // Update mappings\\n        walletToCitizenId[msg.sender] = newCitizenId;\\n        if (bytes(_ensName).length > 0) {\\n            ensNameToCitizenId[_ensName] = newCitizenId;\\n            registeredEnsNames[_ensName] = true;\\n        }\\n\\n        emit CitizenRegistered(newCitizenId, msg.sender, _ensName, verificationLevel);\\n    }\\n\\n    /**\\n     * @dev Simplified registration for wallet-only users (hackathon-friendly)\\n     * Automatically generates ENS subdomain and placeholder EFP data\\n     */\\n    function registerCitizenSimple() external nonReentrant {\\n        require(walletToCitizenId[msg.sender] == 0, \\\"CitizenRegistry: Wallet already registered\\\");\\n\\n        // Generate automatic ENS subdomain using last 6 chars of address\\n        string memory addressSuffix = Strings.toHexString(uint160(msg.sender) & 0xFFFFFF, 3);\\n        string memory autoEnsName = string(abi.encodePacked(\\\"citizen\\\", addressSuffix, \\\".citiproof.eth\\\"));\\n        \\n        // Ensure generated name is unique (highly unlikely to collide)\\n        require(!registeredEnsNames[autoEnsName], \\\"CitizenRegistry: Generated ENS name collision\\\");\\n\\n        // Create with minimal verification data (can be updated later)\\n        _citizenIdCounter++;\\n        uint256 newCitizenId = _citizenIdCounter;\\n\\n        citizens[newCitizenId] = CitizenProfile({\\n            citizenId: newCitizenId,\\n            walletAddress: msg.sender,\\n            ensName: autoEnsName,\\n            efpTokenId: \\\"\\\", // Can be added later\\n            efpFollowers: 0,\\n            efpFollowing: 0,\\n            verificationLevel: VerificationLevel.UNVERIFIED,\\n            registrationTimestamp: block.timestamp,\\n            lastUpdateTimestamp: block.timestamp,\\n            isActive: true,\\n            reputationScore: 0,\\n            ipfsMetadata: \\\"\\\"\\n        });\\n\\n        // Update mappings\\n        walletToCitizenId[msg.sender] = newCitizenId;\\n        ensNameToCitizenId[autoEnsName] = newCitizenId;\\n        registeredEnsNames[autoEnsName] = true;\\n\\n        emit CitizenRegistered(newCitizenId, msg.sender, autoEnsName, VerificationLevel.UNVERIFIED);\\n    }\\n\\n    /**\\n     * @dev Update citizen's EFP verification data\\n     * @param _efpTokenId New EFP token ID\\n     * @param _efpFollowers Updated follower count\\n     * @param _efpFollowing Updated following count\\n     */\\n    function updateEFPVerification(\\n        string memory _efpTokenId,\\n        uint256 _efpFollowers,\\n        uint256 _efpFollowing\\n    ) external onlyRegisteredCitizen {\\n        uint256 citizenId = walletToCitizenId[msg.sender];\\n        CitizenProfile storage citizen = citizens[citizenId];\\n\\n        VerificationLevel oldLevel = citizen.verificationLevel;\\n        VerificationLevel newLevel = _determineVerificationLevel(_efpFollowers, _efpFollowing);\\n\\n        // Update EFP data\\n        citizen.efpTokenId = _efpTokenId;\\n        citizen.efpFollowers = _efpFollowers;\\n        citizen.efpFollowing = _efpFollowing;\\n        citizen.verificationLevel = newLevel;\\n        citizen.lastUpdateTimestamp = block.timestamp;\\n\\n        if (oldLevel != newLevel) {\\n            emit CitizenVerificationUpdated(citizenId, msg.sender, oldLevel, newLevel);\\n        }\\n\\n        emit CitizenProfileUpdated(citizenId, msg.sender, citizen.ensName, _efpTokenId);\\n    }\\n\\n    /**\\n     * @dev Update citizen's ENS name\\n     * @param _ensName New ENS name\\n     */\\n    function updateENSName(string memory _ensName) external onlyRegisteredCitizen {\\n        require(bytes(_ensName).length > 0, \\\"CitizenRegistry: ENS name cannot be empty\\\");\\n        require(!registeredEnsNames[_ensName], \\\"CitizenRegistry: ENS name already registered\\\");\\n\\n        uint256 citizenId = walletToCitizenId[msg.sender];\\n        CitizenProfile storage citizen = citizens[citizenId];\\n\\n        // Remove old ENS name from registry\\n        if (bytes(citizen.ensName).length > 0) {\\n            registeredEnsNames[citizen.ensName] = false;\\n            delete ensNameToCitizenId[citizen.ensName];\\n        }\\n\\n        // Set new ENS name\\n        citizen.ensName = _ensName;\\n        citizen.lastUpdateTimestamp = block.timestamp;\\n        ensNameToCitizenId[_ensName] = citizenId;\\n        registeredEnsNames[_ensName] = true;\\n\\n        emit CitizenProfileUpdated(citizenId, msg.sender, _ensName, citizen.efpTokenId);\\n    }\\n\\n    /**\\n     * @dev Update reputation score (only called by reputation contract)\\n     * @param _citizenId Citizen ID\\n     * @param _reputationScore New reputation score\\n     */\\n    function updateReputationScore(\\n        uint256 _citizenId,\\n        uint256 _reputationScore\\n    ) external validCitizenId(_citizenId) {\\n        // TODO: Add access control for reputation contract\\n        // require(msg.sender == reputationContract, \\\"CitizenRegistry: Only reputation contract can update scores\\\");\\n        \\n        citizens[_citizenId].reputationScore = _reputationScore;\\n        citizens[_citizenId].lastUpdateTimestamp = block.timestamp;\\n\\n        // Check if reputation score qualifies for premium verification\\n        if (_reputationScore >= 1000 && citizens[_citizenId].verificationLevel != VerificationLevel.PREMIUM) {\\n            VerificationLevel oldLevel = citizens[_citizenId].verificationLevel;\\n            citizens[_citizenId].verificationLevel = VerificationLevel.PREMIUM;\\n            emit CitizenVerificationUpdated(\\n                _citizenId, \\n                citizens[_citizenId].walletAddress, \\n                oldLevel, \\n                VerificationLevel.PREMIUM\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Deactivate a citizen account (admin function)\\n     * @param _citizenId Citizen ID to deactivate\\n     */\\n    function deactivateCitizen(uint256 _citizenId) external onlyOwner validCitizenId(_citizenId) {\\n        citizens[_citizenId].isActive = false;\\n        citizens[_citizenId].lastUpdateTimestamp = block.timestamp;\\n\\n        emit CitizenDeactivated(\\n            _citizenId,\\n            citizens[_citizenId].walletAddress,\\n            msg.sender\\n        );\\n    }\\n\\n    /**\\n     * @dev Reactivate a citizen account (admin function)\\n     * @param _citizenId Citizen ID to reactivate\\n     */\\n    function reactivateCitizen(uint256 _citizenId) external onlyOwner validCitizenId(_citizenId) {\\n        citizens[_citizenId].isActive = true;\\n        citizens[_citizenId].lastUpdateTimestamp = block.timestamp;\\n    }\\n\\n    // View functions\\n    function getCitizen(uint256 _citizenId) external view validCitizenId(_citizenId) returns (CitizenProfile memory) {\\n        return citizens[_citizenId];\\n    }\\n\\n    function getCitizenByWallet(address _wallet) external view returns (CitizenProfile memory) {\\n        uint256 citizenId = walletToCitizenId[_wallet];\\n        require(citizenId != 0, \\\"CitizenRegistry: Wallet not registered\\\");\\n        return citizens[citizenId];\\n    }\\n\\n    function getCitizenByENS(string memory _ensName) external view returns (CitizenProfile memory) {\\n        uint256 citizenId = ensNameToCitizenId[_ensName];\\n        require(citizenId != 0, \\\"CitizenRegistry: ENS name not registered\\\");\\n        return citizens[citizenId];\\n    }\\n\\n    function isCitizenRegistered(address _wallet) external view returns (bool) {\\n        return walletToCitizenId[_wallet] != 0 && citizens[walletToCitizenId[_wallet]].isActive;\\n    }\\n\\n    function getTotalCitizens() external view returns (uint256) {\\n        return _citizenIdCounter;\\n    }\\n\\n    function getVerificationLevel(address _wallet) external view returns (VerificationLevel) {\\n        uint256 citizenId = walletToCitizenId[_wallet];\\n        require(citizenId != 0, \\\"CitizenRegistry: Wallet not registered\\\");\\n        return citizens[citizenId].verificationLevel;\\n    }\\n\\n    function isENSNameAvailable(string memory _ensName) external view returns (bool) {\\n        return !registeredEnsNames[_ensName];\\n    }\\n\\n    // Internal functions\\n    function _determineVerificationLevel(uint256 _followers, uint256 _following) internal pure returns (VerificationLevel) {\\n        if (_followers == 0 && _following == 0) {\\n            return VerificationLevel.UNVERIFIED;\\n        } else if (_followers < 50) {\\n            return VerificationLevel.BASIC;\\n        } else {\\n            return VerificationLevel.VERIFIED;\\n        }\\n    }\\n\\n    // Batch operations for efficiency\\n    function getCitizensBatch(uint256[] memory _citizenIds) \\n        external \\n        view \\n        returns (CitizenProfile[] memory) \\n    {\\n        CitizenProfile[] memory profiles = new CitizenProfile[](_citizenIds.length);\\n        for (uint256 i = 0; i < _citizenIds.length; i++) {\\n            if (_citizenIds[i] > 0 && _citizenIds[i] <= _citizenIdCounter) {\\n                profiles[i] = citizens[_citizenIds[i]];\\n            }\\n        }\\n        return profiles;\\n    }\\n\\n    function getActiveCitizensCount() external view returns (uint256) {\\n        uint256 activeCount = 0;\\n        for (uint256 i = 1; i <= _citizenIdCounter; i++) {\\n            if (citizens[i].isActive) {\\n                activeCount++;\\n            }\\n        }\\n        return activeCount;\\n    }\\n}\",\"keccak256\":\"0x558f50048caa6b475ee31972fae16eee3985777f19dbd9882a6d86277223d533\",\"license\":\"MIT\"},\"contracts/GovernmentProjectRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"./CitizenIdentityRegistry.sol\\\";\\n\\n/**\\n * @title GovernmentProjectRegistry\\n * @dev Manages all government projects and their lifecycle\\n * @author CitiProof Team\\n */\\ncontract GovernmentProjectRegistry is Ownable, ReentrancyGuard {\\n    \\n    CitizenIdentityRegistry public immutable citizenRegistry;\\n    \\n    // Project status enumeration\\n    enum ProjectStatus {\\n        PROPOSED,      // Project proposed but not approved\\n        APPROVED,      // Project approved and funded\\n        IN_PROGRESS,   // Project execution started\\n        COMPLETED,     // Project completed successfully\\n        CANCELLED,     // Project cancelled\\n        UNDER_REVIEW   // Project under audit/review\\n    }\\n    \\n    // Project category enumeration\\n    enum ProjectCategory {\\n        INFRASTRUCTURE,\\n        HEALTHCARE,\\n        EDUCATION,\\n        ENVIRONMENT,\\n        SOCIAL_SERVICES,\\n        TECHNOLOGY,\\n        SECURITY,\\n        ECONOMIC_DEVELOPMENT,\\n        OTHER\\n    }\\n    \\n    // Project milestone structure\\n    struct ProjectMilestone {\\n        uint256 milestoneId;\\n        string title;\\n        string description;\\n        uint256 targetDate;\\n        uint256 completionDate;\\n        uint256 budgetAllocated;\\n        uint256 budgetSpent;\\n        bool isCompleted;\\n        string evidenceHash; // IPFS hash of completion evidence\\n    }\\n    \\n    // Main project structure\\n    struct Project {\\n        uint256 projectId;\\n        string title;\\n        string description;\\n        ProjectCategory category;\\n        ProjectStatus status;\\n        address governmentEntity; // Government wallet that created the project\\n        uint256 totalBudget;\\n        uint256 budgetSpent;\\n        uint256 startDate;\\n        uint256 estimatedEndDate;\\n        uint256 actualEndDate;\\n        string documentationHash; // IPFS hash for project documents\\n        uint256 citizenSupportScore; // Based on citizen votes/feedback\\n        bool isPublic; // Whether project details are public\\n        uint256 creationTimestamp;\\n        uint256 lastUpdateTimestamp;\\n    }\\n    \\n    // Storage\\n    uint256 private _projectIdCounter;\\n    mapping(uint256 => Project) public projects;\\n    mapping(uint256 => ProjectMilestone[]) public projectMilestones;\\n    mapping(uint256 => mapping(uint256 => bool)) public milestoneCompleted; // projectId => milestoneId => completed\\n    mapping(address => bool) public authorizedGovernmentEntities;\\n    mapping(uint256 => uint256[]) public categoryProjects; // category => projectIds\\n    mapping(address => uint256[]) public governmentEntityProjects; // entity => projectIds\\n    \\n    // Events\\n    event ProjectCreated(\\n        uint256 indexed projectId,\\n        string title,\\n        ProjectCategory category,\\n        address indexed governmentEntity,\\n        uint256 totalBudget\\n    );\\n    \\n    event ProjectStatusUpdated(\\n        uint256 indexed projectId,\\n        ProjectStatus oldStatus,\\n        ProjectStatus newStatus,\\n        address indexed updatedBy\\n    );\\n    \\n    event ProjectMilestoneAdded(\\n        uint256 indexed projectId,\\n        uint256 milestoneId,\\n        string title,\\n        uint256 targetDate,\\n        uint256 budgetAllocated\\n    );\\n    \\n    event ProjectMilestoneCompleted(\\n        uint256 indexed projectId,\\n        uint256 milestoneId,\\n        uint256 completionDate,\\n        uint256 actualBudgetSpent,\\n        string evidenceHash\\n    );\\n    \\n    event ProjectBudgetUpdated(\\n        uint256 indexed projectId,\\n        uint256 previousBudget,\\n        uint256 newBudget,\\n        address indexed updatedBy\\n    );\\n    \\n    event GovernmentEntityAuthorized(\\n        address indexed entity,\\n        bool authorized,\\n        address indexed authorizedBy\\n    );\\n    \\n    // Modifiers\\n    modifier onlyAuthorizedGovernment() {\\n        require(authorizedGovernmentEntities[msg.sender], \\\"ProjectRegistry: Not authorized government entity\\\");\\n        _;\\n    }\\n    \\n    modifier validProjectId(uint256 _projectId) {\\n        require(_projectId > 0 && _projectId <= _projectIdCounter, \\\"ProjectRegistry: Invalid project ID\\\");\\n        _;\\n    }\\n    \\n    modifier onlyProjectOwner(uint256 _projectId) {\\n        require(projects[_projectId].governmentEntity == msg.sender, \\\"ProjectRegistry: Not project owner\\\");\\n        _;\\n    }\\n    \\n    constructor(\\n        address initialOwner,\\n        address _citizenRegistry\\n    ) Ownable(initialOwner) {\\n        require(_citizenRegistry != address(0), \\\"ProjectRegistry: Invalid citizen registry\\\");\\n        citizenRegistry = CitizenIdentityRegistry(_citizenRegistry);\\n    }\\n    \\n    /**\\n     * @dev Create a new government project\\n     */\\n    function createProject(\\n        string memory _title,\\n        string memory _description,\\n        ProjectCategory _category,\\n        uint256 _totalBudget,\\n        uint256 _estimatedEndDate,\\n        string memory _documentationHash,\\n        bool _isPublic\\n    ) external onlyAuthorizedGovernment nonReentrant {\\n        require(bytes(_title).length > 0, \\\"ProjectRegistry: Title cannot be empty\\\");\\n        require(_totalBudget > 0, \\\"ProjectRegistry: Budget must be greater than 0\\\");\\n        require(_estimatedEndDate > block.timestamp, \\\"ProjectRegistry: End date must be in future\\\");\\n        \\n        _projectIdCounter++;\\n        uint256 newProjectId = _projectIdCounter;\\n        \\n        projects[newProjectId] = Project({\\n            projectId: newProjectId,\\n            title: _title,\\n            description: _description,\\n            category: _category,\\n            status: ProjectStatus.PROPOSED,\\n            governmentEntity: msg.sender,\\n            totalBudget: _totalBudget,\\n            budgetSpent: 0,\\n            startDate: 0, // Will be set when approved\\n            estimatedEndDate: _estimatedEndDate,\\n            actualEndDate: 0,\\n            documentationHash: _documentationHash,\\n            citizenSupportScore: 0,\\n            isPublic: _isPublic,\\n            creationTimestamp: block.timestamp,\\n            lastUpdateTimestamp: block.timestamp\\n        });\\n        \\n        // Add to category and entity mappings\\n        categoryProjects[uint256(_category)].push(newProjectId);\\n        governmentEntityProjects[msg.sender].push(newProjectId);\\n        \\n        emit ProjectCreated(newProjectId, _title, _category, msg.sender, _totalBudget);\\n    }\\n    \\n    /**\\n     * @dev Update project status\\n     */\\n    function updateProjectStatus(\\n        uint256 _projectId,\\n        ProjectStatus _newStatus\\n    ) external validProjectId(_projectId) onlyProjectOwner(_projectId) {\\n        Project storage project = projects[_projectId];\\n        ProjectStatus oldStatus = project.status;\\n        \\n        require(oldStatus != _newStatus, \\\"ProjectRegistry: Status unchanged\\\");\\n        require(_isValidStatusTransition(oldStatus, _newStatus), \\\"ProjectRegistry: Invalid status transition\\\");\\n        \\n        project.status = _newStatus;\\n        project.lastUpdateTimestamp = block.timestamp;\\n        \\n        // Set start date when approved\\n        if (_newStatus == ProjectStatus.APPROVED && project.startDate == 0) {\\n            project.startDate = block.timestamp;\\n        }\\n        \\n        // Set completion date when completed\\n        if (_newStatus == ProjectStatus.COMPLETED && project.actualEndDate == 0) {\\n            project.actualEndDate = block.timestamp;\\n        }\\n        \\n        emit ProjectStatusUpdated(_projectId, oldStatus, _newStatus, msg.sender);\\n    }\\n    \\n    /**\\n     * @dev Add milestone to project\\n     */\\n    function addProjectMilestone(\\n        uint256 _projectId,\\n        string memory _title,\\n        string memory _description,\\n        uint256 _targetDate,\\n        uint256 _budgetAllocated\\n    ) external validProjectId(_projectId) onlyProjectOwner(_projectId) {\\n        require(bytes(_title).length > 0, \\\"ProjectRegistry: Milestone title cannot be empty\\\");\\n        require(_targetDate > block.timestamp, \\\"ProjectRegistry: Target date must be in future\\\");\\n        require(_budgetAllocated > 0, \\\"ProjectRegistry: Budget must be greater than 0\\\");\\n        \\n        Project storage project = projects[_projectId];\\n        require(project.status == ProjectStatus.APPROVED || project.status == ProjectStatus.IN_PROGRESS, \\n                \\\"ProjectRegistry: Project must be approved or in progress\\\");\\n        \\n        uint256 milestoneId = projectMilestones[_projectId].length + 1;\\n        \\n        ProjectMilestone memory newMilestone = ProjectMilestone({\\n            milestoneId: milestoneId,\\n            title: _title,\\n            description: _description,\\n            targetDate: _targetDate,\\n            completionDate: 0,\\n            budgetAllocated: _budgetAllocated,\\n            budgetSpent: 0,\\n            isCompleted: false,\\n            evidenceHash: \\\"\\\"\\n        });\\n        \\n        projectMilestones[_projectId].push(newMilestone);\\n        \\n        emit ProjectMilestoneAdded(_projectId, milestoneId, _title, _targetDate, _budgetAllocated);\\n    }\\n    \\n    /**\\n     * @dev Complete project milestone\\n     */\\n    function completeProjectMilestone(\\n        uint256 _projectId,\\n        uint256 _milestoneId,\\n        uint256 _actualBudgetSpent,\\n        string memory _evidenceHash\\n    ) external validProjectId(_projectId) onlyProjectOwner(_projectId) {\\n        require(_milestoneId > 0 && _milestoneId <= projectMilestones[_projectId].length, \\n                \\\"ProjectRegistry: Invalid milestone ID\\\");\\n        require(!milestoneCompleted[_projectId][_milestoneId], \\\"ProjectRegistry: Milestone already completed\\\");\\n        require(bytes(_evidenceHash).length > 0, \\\"ProjectRegistry: Evidence hash required\\\");\\n        \\n        ProjectMilestone storage milestone = projectMilestones[_projectId][_milestoneId - 1];\\n        Project storage project = projects[_projectId];\\n        \\n        require(_actualBudgetSpent <= milestone.budgetAllocated, \\\"ProjectRegistry: Spent exceeds allocated budget\\\");\\n        require(project.budgetSpent + _actualBudgetSpent <= project.totalBudget, \\n                \\\"ProjectRegistry: Total spent would exceed project budget\\\");\\n        \\n        // Update milestone\\n        milestone.isCompleted = true;\\n        milestone.completionDate = block.timestamp;\\n        milestone.budgetSpent = _actualBudgetSpent;\\n        milestone.evidenceHash = _evidenceHash;\\n        milestoneCompleted[_projectId][_milestoneId] = true;\\n        \\n        // Update project budget\\n        project.budgetSpent += _actualBudgetSpent;\\n        project.lastUpdateTimestamp = block.timestamp;\\n        \\n        // Update project status to in progress if not already\\n        if (project.status == ProjectStatus.APPROVED) {\\n            project.status = ProjectStatus.IN_PROGRESS;\\n            emit ProjectStatusUpdated(_projectId, ProjectStatus.APPROVED, ProjectStatus.IN_PROGRESS, msg.sender);\\n        }\\n        \\n        emit ProjectMilestoneCompleted(_projectId, _milestoneId, block.timestamp, _actualBudgetSpent, _evidenceHash);\\n    }\\n    \\n    /**\\n     * @dev Update project budget (owner or admin only)\\n     */\\n    function updateProjectBudget(\\n        uint256 _projectId,\\n        uint256 _newBudget\\n    ) external validProjectId(_projectId) {\\n        require(\\n            msg.sender == projects[_projectId].governmentEntity || msg.sender == owner(),\\n            \\\"ProjectRegistry: Not authorized to update budget\\\"\\n        );\\n        require(_newBudget > 0, \\\"ProjectRegistry: Budget must be greater than 0\\\");\\n        \\n        Project storage project = projects[_projectId];\\n        require(_newBudget >= project.budgetSpent, \\\"ProjectRegistry: New budget less than already spent\\\");\\n        \\n        uint256 previousBudget = project.totalBudget;\\n        project.totalBudget = _newBudget;\\n        project.lastUpdateTimestamp = block.timestamp;\\n        \\n        emit ProjectBudgetUpdated(_projectId, previousBudget, _newBudget, msg.sender);\\n    }\\n    \\n    /**\\n     * @dev Update citizen support score (called by voting contract)\\n     */\\n    function updateCitizenSupportScore(\\n        uint256 _projectId,\\n        uint256 _supportScore\\n    ) external validProjectId(_projectId) {\\n        // TODO: Add access control for voting contract\\n        // require(msg.sender == votingContract, \\\"ProjectRegistry: Only voting contract can update support\\\");\\n        \\n        projects[_projectId].citizenSupportScore = _supportScore;\\n        projects[_projectId].lastUpdateTimestamp = block.timestamp;\\n    }\\n    \\n    // View functions\\n    function getProject(uint256 _projectId) external view validProjectId(_projectId) returns (Project memory) {\\n        Project memory project = projects[_projectId];\\n        require(project.isPublic || msg.sender == project.governmentEntity || msg.sender == owner(), \\n                \\\"ProjectRegistry: Project is not public\\\");\\n        return project;\\n    }\\n    \\n    function getProjectMilestones(uint256 _projectId) external view validProjectId(_projectId) returns (ProjectMilestone[] memory) {\\n        Project memory project = projects[_projectId];\\n        require(project.isPublic || msg.sender == project.governmentEntity || msg.sender == owner(), \\n                \\\"ProjectRegistry: Project is not public\\\");\\n        return projectMilestones[_projectId];\\n    }\\n    \\n    function getProjectsByCategory(ProjectCategory _category) external view returns (uint256[] memory) {\\n        return categoryProjects[uint256(_category)];\\n    }\\n    \\n    function getProjectsByGovernmentEntity(address _entity) external view returns (uint256[] memory) {\\n        return governmentEntityProjects[_entity];\\n    }\\n    \\n    function getProjectsByStatus(ProjectStatus _status) external view returns (uint256[] memory) {\\n        uint256[] memory result = new uint256[](_projectIdCounter);\\n        uint256 count = 0;\\n        \\n        for (uint256 i = 1; i <= _projectIdCounter; i++) {\\n            if (projects[i].status == _status && (projects[i].isPublic || msg.sender == owner())) {\\n                result[count] = i;\\n                count++;\\n            }\\n        }\\n        \\n        // Resize array to actual count\\n        uint256[] memory finalResult = new uint256[](count);\\n        for (uint256 i = 0; i < count; i++) {\\n            finalResult[i] = result[i];\\n        }\\n        \\n        return finalResult;\\n    }\\n    \\n    function getProjectStats() external view returns (\\n        uint256 totalProjects,\\n        uint256 approvedProjects,\\n        uint256 inProgressProjects,\\n        uint256 completedProjects,\\n        uint256 totalBudgetAllocated,\\n        uint256 totalBudgetSpent\\n    ) {\\n        uint256 approved = 0;\\n        uint256 inProgress = 0;\\n        uint256 completed = 0;\\n        uint256 totalAllocated = 0;\\n        uint256 totalSpent = 0;\\n        \\n        for (uint256 i = 1; i <= _projectIdCounter; i++) {\\n            Project storage project = projects[i];\\n            \\n            if (project.status == ProjectStatus.APPROVED) approved++;\\n            else if (project.status == ProjectStatus.IN_PROGRESS) inProgress++;\\n            else if (project.status == ProjectStatus.COMPLETED) completed++;\\n            \\n            totalAllocated += project.totalBudget;\\n            totalSpent += project.budgetSpent;\\n        }\\n        \\n        return (_projectIdCounter, approved, inProgress, completed, totalAllocated, totalSpent);\\n    }\\n    \\n    function getTotalProjects() external view returns (uint256) {\\n        return _projectIdCounter;\\n    }\\n    \\n    function getProjectProgress(uint256 _projectId) external view validProjectId(_projectId) returns (\\n        uint256 totalMilestones,\\n        uint256 completedMilestones,\\n        uint256 budgetUtilization // percentage in basis points (10000 = 100%)\\n    ) {\\n        Project memory project = projects[_projectId];\\n        require(project.isPublic || msg.sender == project.governmentEntity || msg.sender == owner(), \\n                \\\"ProjectRegistry: Project is not public\\\");\\n        \\n        ProjectMilestone[] memory milestones = projectMilestones[_projectId];\\n        uint256 completed = 0;\\n        \\n        for (uint256 i = 0; i < milestones.length; i++) {\\n            if (milestones[i].isCompleted) {\\n                completed++;\\n            }\\n        }\\n        \\n        uint256 utilization = project.totalBudget > 0 ? \\n                             (project.budgetSpent * 10000) / project.totalBudget : 0;\\n        \\n        return (milestones.length, completed, utilization);\\n    }\\n    \\n    // Internal functions\\n    function _isValidStatusTransition(ProjectStatus _from, ProjectStatus _to) internal pure returns (bool) {\\n        if (_from == ProjectStatus.PROPOSED) {\\n            return _to == ProjectStatus.APPROVED || _to == ProjectStatus.CANCELLED;\\n        } else if (_from == ProjectStatus.APPROVED) {\\n            return _to == ProjectStatus.IN_PROGRESS || _to == ProjectStatus.CANCELLED;\\n        } else if (_from == ProjectStatus.IN_PROGRESS) {\\n            return _to == ProjectStatus.COMPLETED || _to == ProjectStatus.UNDER_REVIEW || _to == ProjectStatus.CANCELLED;\\n        } else if (_from == ProjectStatus.UNDER_REVIEW) {\\n            return _to == ProjectStatus.COMPLETED || _to == ProjectStatus.IN_PROGRESS;\\n        }\\n        return false; // COMPLETED and CANCELLED are final states\\n    }\\n    \\n    // Admin functions\\n    function authorizeGovernmentEntity(address _entity, bool _authorized) external onlyOwner {\\n        require(_entity != address(0), \\\"ProjectRegistry: Invalid entity address\\\");\\n        authorizedGovernmentEntities[_entity] = _authorized;\\n        emit GovernmentEntityAuthorized(_entity, _authorized, msg.sender);\\n    }\\n    \\n    function emergencyUpdateProject(\\n        uint256 _projectId,\\n        ProjectStatus _status,\\n        uint256 _newBudget\\n    ) external onlyOwner validProjectId(_projectId) {\\n        Project storage project = projects[_projectId];\\n        ProjectStatus oldStatus = project.status;\\n        \\n        if (_status != oldStatus) {\\n            project.status = _status;\\n            emit ProjectStatusUpdated(_projectId, oldStatus, _status, msg.sender);\\n        }\\n        \\n        if (_newBudget != project.totalBudget && _newBudget >= project.budgetSpent) {\\n            uint256 previousBudget = project.totalBudget;\\n            project.totalBudget = _newBudget;\\n            emit ProjectBudgetUpdated(_projectId, previousBudget, _newBudget, msg.sender);\\n        }\\n        \\n        project.lastUpdateTimestamp = block.timestamp;\\n    }\\n    \\n    function setProjectPublic(uint256 _projectId, bool _isPublic) external onlyOwner validProjectId(_projectId) {\\n        projects[_projectId].isPublic = _isPublic;\\n        projects[_projectId].lastUpdateTimestamp = block.timestamp;\\n    }\\n}\",\"keccak256\":\"0x82263b72f0b4d03e19ff3e708c65bc90b901705625b820770a74107879ef7ce2\",\"license\":\"MIT\"},\"contracts/TreasuryFundTracking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"./GovernmentProjectRegistry.sol\\\";\\nimport \\\"./CitizenIdentityRegistry.sol\\\";\\n\\n/**\\n * @title TreasuryFundTracking\\n * @dev Handles all financial transparency and fund allocation tracking\\n * @author CitiProof Team\\n */\\ncontract TreasuryFundTracking is Ownable, ReentrancyGuard {\\n    \\n    GovernmentProjectRegistry public immutable projectRegistry;\\n    CitizenIdentityRegistry public immutable citizenRegistry;\\n    \\n    // Fund source enumeration\\n    enum FundSource {\\n        GOVERNMENT_BUDGET,\\n        DONOR_CONTRIBUTION,\\n        GRANTS,\\n        FUNDRAISING,\\n        OTHER\\n    }\\n    \\n    // Transaction type enumeration\\n    enum TransactionType {\\n        ALLOCATION,    // Funds allocated to project\\n        EXPENDITURE,   // Actual spending\\n        REFUND,        // Funds returned\\n        TRANSFER,      // Inter-project transfer\\n        DONATION_IN,   // Donation received\\n        WITHDRAWAL     // Emergency withdrawal\\n    }\\n    \\n    // Fund allocation structure\\n    struct FundAllocation {\\n        uint256 allocationId;\\n        uint256 projectId;\\n        uint256 amount;\\n        FundSource source;\\n        address authorizedBy;\\n        uint256 timestamp;\\n        string ipfsDescriptionHash; // IPFS hash for detailed description\\n        bool isActive;\\n        string documentHash; // IPFS hash for supporting documents\\n    }\\n    \\n    // Financial transaction structure\\n    struct FinancialTransaction {\\n        uint256 transactionId;\\n        uint256 projectId;\\n        uint256 amount;\\n        TransactionType transactionType;\\n        FundSource source;\\n        address authorizedBy;\\n        address recipient; // Can be contractor, vendor, etc.\\n        uint256 timestamp;\\n        string ipfsDescriptionHash; // IPFS hash for detailed description\\n        string receiptHash; // IPFS hash for receipt/proof\\n        bool isVerified;\\n        address verifiedBy;\\n        uint256 verificationTimestamp;\\n    }\\n    \\n    // Donor contribution structure\\n    struct DonorContribution {\\n        uint256 contributionId;\\n        address donor;\\n        uint256 amount;\\n        uint256 projectId; // 0 for general fund\\n        uint256 timestamp;\\n        string ipfsMessageHash; // IPFS hash for donation message\\n        bool isAnonymous;\\n        bool isRefunded;\\n    }\\n    \\n    // Budget allocation structure\\n    struct BudgetAllocation {\\n        uint256 totalBudget;\\n        uint256 allocatedBudget;\\n        uint256 spentBudget;\\n        uint256 availableBudget;\\n        mapping(uint256 => uint256) projectAllocations; // projectId => allocated amount\\n        mapping(uint256 => uint256) projectSpending;    // projectId => spent amount\\n    }\\n    \\n    // Storage\\n    uint256 private _allocationIdCounter;\\n    uint256 private _transactionIdCounter;\\n    uint256 private _contributionIdCounter;\\n    \\n    BudgetAllocation private budget;\\n    mapping(uint256 => FundAllocation) public allocations;\\n    mapping(uint256 => FinancialTransaction) public transactions;\\n    mapping(uint256 => DonorContribution) public contributions;\\n    mapping(uint256 => uint256[]) public projectAllocations; // projectId => allocationIds\\n    mapping(uint256 => uint256[]) public projectTransactions; // projectId => transactionIds\\n    mapping(address => uint256[]) public donorContributions; // donor => contributionIds\\n    mapping(address => bool) public authorizedTreasurers;\\n    \\n    // Events\\n    event FundsAllocated(\\n        uint256 indexed allocationId,\\n        uint256 indexed projectId,\\n        uint256 amount,\\n        FundSource source,\\n        address indexed authorizedBy\\n    );\\n    \\n    event TransactionRecorded(\\n        uint256 indexed transactionId,\\n        uint256 indexed projectId,\\n        uint256 amount,\\n        TransactionType transactionType,\\n        address indexed recipient\\n    );\\n    \\n    event DonationReceived(\\n        uint256 indexed contributionId,\\n        address indexed donor,\\n        uint256 amount,\\n        uint256 indexed projectId\\n    );\\n    \\n    event TransactionVerified(\\n        uint256 indexed transactionId,\\n        address indexed verifiedBy,\\n        uint256 verificationTimestamp\\n    );\\n    \\n    event BudgetUpdated(\\n        uint256 previousTotal,\\n        uint256 newTotal,\\n        address indexed updatedBy\\n    );\\n    \\n    event TreasurerAuthorized(\\n        address indexed treasurer,\\n        bool authorized,\\n        address indexed authorizedBy\\n    );\\n    \\n    event EmergencyWithdrawal(\\n        uint256 amount,\\n        address indexed recipient,\\n        string reason,\\n        address indexed authorizedBy\\n    );\\n    \\n    // Modifiers\\n    modifier onlyAuthorizedTreasurer() {\\n        require(authorizedTreasurers[msg.sender] || msg.sender == owner(), \\n                \\\"Treasury: Not authorized treasurer\\\");\\n        _;\\n    }\\n    \\n    modifier validProjectId(uint256 _projectId) {\\n        require(_projectId > 0 && _projectId <= projectRegistry.getTotalProjects(), \\n                \\\"Treasury: Invalid project ID\\\");\\n        _;\\n    }\\n    \\n    modifier validAllocationId(uint256 _allocationId) {\\n        require(_allocationId > 0 && _allocationId <= _allocationIdCounter, \\n                \\\"Treasury: Invalid allocation ID\\\");\\n        _;\\n    }\\n    \\n    modifier validTransactionId(uint256 _transactionId) {\\n        require(_transactionId > 0 && _transactionId <= _transactionIdCounter, \\n                \\\"Treasury: Invalid transaction ID\\\");\\n        _;\\n    }\\n    \\n    constructor(\\n        address initialOwner,\\n        address _projectRegistry,\\n        address _citizenRegistry,\\n        uint256 _initialBudget\\n    ) Ownable(initialOwner) {\\n        require(_projectRegistry != address(0), \\\"Treasury: Invalid project registry\\\");\\n        require(_citizenRegistry != address(0), \\\"Treasury: Invalid citizen registry\\\");\\n        \\n        projectRegistry = GovernmentProjectRegistry(_projectRegistry);\\n        citizenRegistry = CitizenIdentityRegistry(_citizenRegistry);\\n        \\n        budget.totalBudget = _initialBudget;\\n        budget.availableBudget = _initialBudget;\\n    }\\n    \\n    /**\\n     * @dev Allocate funds to a specific project\\n     */\\n    function allocateFundsToProject(\\n        uint256 _projectId,\\n        uint256 _amount,\\n        FundSource _source,\\n        string memory _ipfsDescriptionHash,\\n        string memory _documentHash\\n    ) external onlyAuthorizedTreasurer validProjectId(_projectId) nonReentrant {\\n        require(_amount > 0, \\\"Treasury: Amount must be greater than 0\\\");\\n        require(budget.availableBudget >= _amount, \\\"Treasury: Insufficient available budget\\\");\\n        require(bytes(_ipfsDescriptionHash).length > 0, \\\"Treasury: IPFS description hash required\\\");\\n        \\n        _allocationIdCounter++;\\n        uint256 newAllocationId = _allocationIdCounter;\\n        \\n        // Create allocation record\\n        allocations[newAllocationId] = FundAllocation({\\n            allocationId: newAllocationId,\\n            projectId: _projectId,\\n            amount: _amount,\\n            source: _source,\\n            authorizedBy: msg.sender,\\n            timestamp: block.timestamp,\\n            ipfsDescriptionHash: _ipfsDescriptionHash,\\n            isActive: true,\\n            documentHash: _documentHash\\n        });\\n        \\n        // Update budget tracking\\n        budget.allocatedBudget += _amount;\\n        budget.availableBudget -= _amount;\\n        budget.projectAllocations[_projectId] += _amount;\\n        \\n        // Add to project allocations\\n        projectAllocations[_projectId].push(newAllocationId);\\n        \\n        emit FundsAllocated(newAllocationId, _projectId, _amount, _source, msg.sender);\\n    }\\n    \\n    /**\\n     * @dev Record a financial transaction (expenditure)\\n     */\\n    function recordTransaction(\\n        uint256 _projectId,\\n        uint256 _amount,\\n        TransactionType _transactionType,\\n        FundSource _source,\\n        address _recipient,\\n        string memory _ipfsDescriptionHash,\\n        string memory _receiptHash\\n    ) external onlyAuthorizedTreasurer validProjectId(_projectId) nonReentrant {\\n        require(_amount > 0, \\\"Treasury: Amount must be greater than 0\\\");\\n        require(_recipient != address(0), \\\"Treasury: Invalid recipient address\\\");\\n        require(bytes(_ipfsDescriptionHash).length > 0, \\\"Treasury: IPFS description hash required\\\");\\n        \\n        // Validate sufficient allocation for expenditures\\n        if (_transactionType == TransactionType.EXPENDITURE) {\\n            uint256 availableForProject = budget.projectAllocations[_projectId] - budget.projectSpending[_projectId];\\n            require(availableForProject >= _amount, \\\"Treasury: Insufficient project allocation\\\");\\n            \\n            // Update spending tracking\\n            budget.spentBudget += _amount;\\n            budget.projectSpending[_projectId] += _amount;\\n        }\\n        \\n        _transactionIdCounter++;\\n        uint256 newTransactionId = _transactionIdCounter;\\n        \\n        // Create transaction record\\n        transactions[newTransactionId] = FinancialTransaction({\\n            transactionId: newTransactionId,\\n            projectId: _projectId,\\n            amount: _amount,\\n            transactionType: _transactionType,\\n            source: _source,\\n            authorizedBy: msg.sender,\\n            recipient: _recipient,\\n            timestamp: block.timestamp,\\n            ipfsDescriptionHash: _ipfsDescriptionHash,\\n            receiptHash: _receiptHash,\\n            isVerified: false,\\n            verifiedBy: address(0),\\n            verificationTimestamp: 0\\n        });\\n        \\n        // Add to project transactions\\n        projectTransactions[_projectId].push(newTransactionId);\\n        \\n        emit TransactionRecorded(newTransactionId, _projectId, _amount, _transactionType, _recipient);\\n    }\\n    \\n    /**\\n     * @dev Receive donor contribution\\n     */\\n    function receiveDonation(\\n        uint256 _projectId,\\n        string memory _ipfsMessageHash,\\n        bool _isAnonymous\\n    ) external payable nonReentrant {\\n        require(msg.value > 0, \\\"Treasury: Donation amount must be greater than 0\\\");\\n        \\n        // If project ID is provided, validate it\\n        if (_projectId > 0) {\\n            require(_projectId <= projectRegistry.getTotalProjects(), \\\"Treasury: Invalid project ID\\\");\\n        }\\n        \\n        _contributionIdCounter++;\\n        uint256 newContributionId = _contributionIdCounter;\\n        \\n        // Create contribution record\\n        contributions[newContributionId] = DonorContribution({\\n            contributionId: newContributionId,\\n            donor: msg.sender,\\n            amount: msg.value,\\n            projectId: _projectId,\\n            timestamp: block.timestamp,\\n            ipfsMessageHash: _ipfsMessageHash,\\n            isAnonymous: _isAnonymous,\\n            isRefunded: false\\n        });\\n        \\n        // Update budget\\n        budget.totalBudget += msg.value;\\n        budget.availableBudget += msg.value;\\n        \\n        // Add to donor contributions\\n        donorContributions[msg.sender].push(newContributionId);\\n        \\n        emit DonationReceived(newContributionId, msg.sender, msg.value, _projectId);\\n    }\\n    \\n    /**\\n     * @dev Verify a transaction (by authorized verifiers)\\n     */\\n    function verifyTransaction(uint256 _transactionId) external validTransactionId(_transactionId) {\\n        // Check if caller is authorized (government entity, treasurer, or admin)\\n        require(\\n            authorizedTreasurers[msg.sender] || \\n            msg.sender == owner() ||\\n            _isAuthorizedVerifier(msg.sender),\\n            \\\"Treasury: Not authorized to verify transactions\\\"\\n        );\\n        \\n        FinancialTransaction storage transaction = transactions[_transactionId];\\n        require(!transaction.isVerified, \\\"Treasury: Transaction already verified\\\");\\n        require(transaction.authorizedBy != msg.sender, \\\"Treasury: Cannot verify own transaction\\\");\\n        \\n        transaction.isVerified = true;\\n        transaction.verifiedBy = msg.sender;\\n        transaction.verificationTimestamp = block.timestamp;\\n        \\n        emit TransactionVerified(_transactionId, msg.sender, block.timestamp);\\n    }\\n    \\n    /**\\n     * @dev Transfer funds between projects\\n     */\\n    function transferFundsBetweenProjects(\\n        uint256 _fromProjectId,\\n        uint256 _toProjectId,\\n        uint256 _amount,\\n        string memory _reason\\n    ) external onlyAuthorizedTreasurer nonReentrant {\\n        require(_fromProjectId != _toProjectId, \\\"Treasury: Cannot transfer to same project\\\");\\n        require(_amount > 0, \\\"Treasury: Amount must be greater than 0\\\");\\n        require(bytes(_reason).length > 0, \\\"Treasury: Reason required\\\");\\n        \\n        // Validate projects exist\\n        require(_fromProjectId <= projectRegistry.getTotalProjects(), \\\"Treasury: Invalid from project\\\");\\n        require(_toProjectId <= projectRegistry.getTotalProjects(), \\\"Treasury: Invalid to project\\\");\\n        \\n        // Check available funds in source project\\n        uint256 availableInSource = budget.projectAllocations[_fromProjectId] - budget.projectSpending[_fromProjectId];\\n        require(availableInSource >= _amount, \\\"Treasury: Insufficient funds in source project\\\");\\n        \\n        // Update allocations\\n        budget.projectAllocations[_fromProjectId] -= _amount;\\n        budget.projectAllocations[_toProjectId] += _amount;\\n        \\n        // Record transfer transactions\\n        _transactionIdCounter++;\\n        uint256 transferOutId = _transactionIdCounter;\\n        \\n        transactions[transferOutId] = FinancialTransaction({\\n            transactionId: transferOutId,\\n            projectId: _fromProjectId,\\n            amount: _amount,\\n            transactionType: TransactionType.TRANSFER,\\n            source: FundSource.GOVERNMENT_BUDGET,\\n            authorizedBy: msg.sender,\\n            recipient: address(this),\\n            timestamp: block.timestamp,\\n            ipfsDescriptionHash: \\\"\\\", // Simple transfer descriptions don't need IPFS\\n            receiptHash: \\\"\\\",\\n            isVerified: true, // Auto-verified for internal transfers\\n            verifiedBy: msg.sender,\\n            verificationTimestamp: block.timestamp\\n        });\\n        \\n        projectTransactions[_fromProjectId].push(transferOutId);\\n        \\n        _transactionIdCounter++;\\n        uint256 transferInId = _transactionIdCounter;\\n        \\n        transactions[transferInId] = FinancialTransaction({\\n            transactionId: transferInId,\\n            projectId: _toProjectId,\\n            amount: _amount,\\n            transactionType: TransactionType.ALLOCATION,\\n            source: FundSource.GOVERNMENT_BUDGET,\\n            authorizedBy: msg.sender,\\n            recipient: address(this),\\n            timestamp: block.timestamp,\\n            ipfsDescriptionHash: \\\"\\\", // Simple transfer descriptions don't need IPFS\\n            receiptHash: \\\"\\\",\\n            isVerified: true, // Auto-verified for internal transfers\\n            verifiedBy: msg.sender,\\n            verificationTimestamp: block.timestamp\\n        });\\n        \\n        projectTransactions[_toProjectId].push(transferInId);\\n        \\n        emit TransactionRecorded(transferOutId, _fromProjectId, _amount, TransactionType.TRANSFER, address(this));\\n        emit TransactionRecorded(transferInId, _toProjectId, _amount, TransactionType.ALLOCATION, address(this));\\n    }\\n    \\n    // View functions\\n    function getBudgetOverview() external view returns (\\n        uint256 totalBudget,\\n        uint256 allocatedBudget,\\n        uint256 spentBudget,\\n        uint256 availableBudget,\\n        uint256 utilizationPercentage\\n    ) {\\n        uint256 utilization = budget.totalBudget > 0 ? (budget.spentBudget * 10000) / budget.totalBudget : 0;\\n        \\n        return (\\n            budget.totalBudget,\\n            budget.allocatedBudget,\\n            budget.spentBudget,\\n            budget.availableBudget,\\n            utilization\\n        );\\n    }\\n    \\n    function getProjectFinancials(uint256 _projectId) external view validProjectId(_projectId) returns (\\n        uint256 allocatedAmount,\\n        uint256 spentAmount,\\n        uint256 availableAmount,\\n        uint256 transactionCount,\\n        uint256 utilizationPercentage\\n    ) {\\n        uint256 allocated = budget.projectAllocations[_projectId];\\n        uint256 spent = budget.projectSpending[_projectId];\\n        uint256 available = allocated > spent ? allocated - spent : 0;\\n        uint256 utilization = allocated > 0 ? (spent * 10000) / allocated : 0;\\n        \\n        return (\\n            allocated,\\n            spent,\\n            available,\\n            projectTransactions[_projectId].length,\\n            utilization\\n        );\\n    }\\n    \\n    function getProjectTransactions(uint256 _projectId) external view validProjectId(_projectId) returns (uint256[] memory) {\\n        return projectTransactions[_projectId];\\n    }\\n    \\n    function getProjectAllocations(uint256 _projectId) external view validProjectId(_projectId) returns (uint256[] memory) {\\n        return projectAllocations[_projectId];\\n    }\\n    \\n    function getDonorContributions(address _donor) external view returns (uint256[] memory) {\\n        return donorContributions[_donor];\\n    }\\n    \\n    function getTotalContributions() external view returns (uint256 totalAmount, uint256 totalCount) {\\n        uint256 total = 0;\\n        for (uint256 i = 1; i <= _contributionIdCounter; i++) {\\n            if (!contributions[i].isRefunded) {\\n                total += contributions[i].amount;\\n            }\\n        }\\n        return (total, _contributionIdCounter);\\n    }\\n    \\n    function getUnverifiedTransactions() external view returns (uint256[] memory) {\\n        uint256 count = 0;\\n        \\n        // Count unverified transactions\\n        for (uint256 i = 1; i <= _transactionIdCounter; i++) {\\n            if (!transactions[i].isVerified) {\\n                count++;\\n            }\\n        }\\n        \\n        // Create result array\\n        uint256[] memory unverifiedIds = new uint256[](count);\\n        uint256 index = 0;\\n        \\n        for (uint256 i = 1; i <= _transactionIdCounter; i++) {\\n            if (!transactions[i].isVerified) {\\n                unverifiedIds[index] = i;\\n                index++;\\n            }\\n        }\\n        \\n        return unverifiedIds;\\n    }\\n    \\n    function getContractBalance() external view returns (uint256) {\\n        return address(this).balance;\\n    }\\n    \\n    // Internal functions\\n    function _isAuthorizedVerifier(address _verifier) internal view returns (bool) {\\n        // Check if verifier is a registered citizen with sufficient reputation\\n        try citizenRegistry.isCitizenRegistered(_verifier) returns (bool isRegistered) {\\n            if (!isRegistered) return false;\\n            \\n            // Add reputation threshold check when reputation system is integrated\\n            // For now, any registered citizen can verify\\n            return true;\\n        } catch {\\n            return false;\\n        }\\n    }\\n    \\n    // Admin functions\\n    function updateBudget(uint256 _newTotalBudget) external onlyOwner {\\n        require(_newTotalBudget >= budget.spentBudget, \\\"Treasury: New budget less than already spent\\\");\\n        \\n        uint256 previousBudget = budget.totalBudget;\\n        \\n        if (_newTotalBudget > budget.totalBudget) {\\n            // Budget increase\\n            budget.availableBudget += (_newTotalBudget - budget.totalBudget);\\n        } else if (_newTotalBudget < budget.totalBudget) {\\n            // Budget decrease\\n            uint256 decrease = budget.totalBudget - _newTotalBudget;\\n            budget.availableBudget = budget.availableBudget > decrease ? budget.availableBudget - decrease : 0;\\n        }\\n        \\n        budget.totalBudget = _newTotalBudget;\\n        \\n        emit BudgetUpdated(previousBudget, _newTotalBudget, msg.sender);\\n    }\\n    \\n    function authorizeTreasurer(address _treasurer, bool _authorized) external onlyOwner {\\n        require(_treasurer != address(0), \\\"Treasury: Invalid treasurer address\\\");\\n        authorizedTreasurers[_treasurer] = _authorized;\\n        emit TreasurerAuthorized(_treasurer, _authorized, msg.sender);\\n    }\\n    \\n    function emergencyWithdraw(uint256 _amount, address payable _recipient, string memory _reason) external onlyOwner {\\n        require(_amount > 0, \\\"Treasury: Amount must be greater than 0\\\");\\n        require(_recipient != address(0), \\\"Treasury: Invalid recipient\\\");\\n        require(address(this).balance >= _amount, \\\"Treasury: Insufficient contract balance\\\");\\n        require(bytes(_reason).length > 0, \\\"Treasury: Reason required\\\");\\n        \\n        _recipient.transfer(_amount);\\n        \\n        emit EmergencyWithdrawal(_amount, _recipient, _reason, msg.sender);\\n    }\\n    \\n    function refundDonation(uint256 _contributionId) external onlyOwner {\\n        require(_contributionId > 0 && _contributionId <= _contributionIdCounter, \\\"Treasury: Invalid contribution ID\\\");\\n        \\n        DonorContribution storage contribution = contributions[_contributionId];\\n        require(!contribution.isRefunded, \\\"Treasury: Already refunded\\\");\\n        require(address(this).balance >= contribution.amount, \\\"Treasury: Insufficient balance for refund\\\");\\n        \\n        contribution.isRefunded = true;\\n        budget.totalBudget -= contribution.amount;\\n        budget.availableBudget = budget.availableBudget > contribution.amount ? \\n                                budget.availableBudget - contribution.amount : 0;\\n        \\n        payable(contribution.donor).transfer(contribution.amount);\\n    }\\n    \\n    // Allow contract to receive donations\\n    receive() external payable {\\n        // Donations received without explicit project assignment go to general fund\\n        _contributionIdCounter++;\\n        uint256 newContributionId = _contributionIdCounter;\\n        \\n        contributions[newContributionId] = DonorContribution({\\n            contributionId: newContributionId,\\n            donor: msg.sender,\\n            amount: msg.value,\\n            projectId: 0, // General fund\\n            timestamp: block.timestamp,\\n            ipfsMessageHash: \\\"\\\", // Simple direct donation message\\n            isAnonymous: false,\\n            isRefunded: false\\n        });\\n        \\n        budget.totalBudget += msg.value;\\n        budget.availableBudget += msg.value;\\n        \\n        donorContributions[msg.sender].push(newContributionId);\\n        \\n        emit DonationReceived(newContributionId, msg.sender, msg.value, 0);\\n    }\\n}\",\"keccak256\":\"0x6d84c160605b6af7ba5e46e062ff3dbba4611e60c34975d31a26dca14bef609e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436101561028b575b361561001957600080fd5b61002460045461359d565b80600455604051610034816131cc565b818152602080820192338452604083013481526060840190600094858352608081014281526040519061006682613204565b87825260a0830191825260c0830188815260e08401898152878a52600d895260408a20945185559951600180860180546001600160a01b0319166001600160a01b0393909316929092179091559451600285015594516003840155516004830155518051979260058301916001600160401b038a11610277576100e98354613192565b601f8111610231575b508790601f8b116001146101c4579980806101439694600696948d9e61015a9c9d9e946101b9575b50501b916000199060031b1c19161790555b0192511515839060ff801983541691151516179055565b51815461ff00191690151560081b61ff0016179055565b610166346005546135b8565b600555610175346008546135b8565b6008553383526010825261018c81604085206135d2565b7f3dbea1b4ce5f95137fdcac9b1d685825c3d70ace830df1ca5a181d3887add410604051923484523393a4005b01519250388061011a565b838a52888a209a9190601f1983168b5b81811061021c57509b61014396949284926006979561015a9c9d9e9f10610203575b505050811b01905561012c565b015160001960f88460031b161c191690553880806101f6565b838301518e559c85019c928b01928b016101d4565b838a52888a20601f8c0160051c8101918a8d1061026d575b601f0160051c019083905b8281106102625750506100f2565b8b8155018390610254565b9091508190610249565b634e487b7160e01b89526041600452602489fd5b60003560e01c80630a2642bf146130d25780631cee070014613032578063332b888d14612df0578063386ca89d14612dab5780633d17b92114612cca57806351e072d614612bb55780635a33d8dc14612b705780636f9fb98a14612b54578063709cacc214612997578063715018a61461293e5780637cd22238146127c75780638d6072d0146127885780638da5cb5b1461275f5780638df9b6b8146126e75780639ace38c2146125e7578063a65de2b5146124e5578063a696596214611f4a578063a9753d0214611bd0578063be7d6e7414611b86578063c0c55b1714611a78578063c57506f114610f50578063cd5dc3c614610dfe578063ddf556d014610d85578063ec0d585914610c74578063f299f7c714610be7578063f2fde38b14610b5e578063f62cf60114610b2d578063fc1ce66c14610aee5763ff5d0ba60361000e5734610ac15760e0366003190112610ac15760066044351015610ac15760056064351015610ac1576084356001600160a01b0381168103610ac15760a4356001600160401b038111610ac157610428903690600401613349565b9060c4356001600160401b038111610ac157610448903690600401613349565b9133600052601160205260ff604060002054168015610ada575b61046b90613441565b600435151580610a3b575b61047f90613498565b61048761360c565b61049460243515156134e4565b6001600160a01b038216156109ea576104af81511515613540565b600160443514610930575b6104c560035461359d565b9283600355604051916104d7836131e8565b848352600435602084015260243560408401526044356060840152610501606435608085016135ac565b3360a084015260018060a01b03841660c08401524260e084015261010083015261012082015260006101408201526000610160820152600061018082015282600052600c6020526040600020908051825560208101516001830155604081015160028301556060810151600681101561091a576003830154608083015190600582101561091a5761ff009060ff62010000600160b01b0360a087015160101b1694169069ffffffffffffffffffff60b01b16179160081b16171760038301556004820160018060a01b0360c0830151166001600160601b0360a01b82541617905560e081015160058301556101008101518051906001600160401b0382116108345781906106126006860154613192565b601f81116108c7575b50602090601f83116001146108555760009261084a575b50508160011b916000199060031b1c19161760068301555b6101208101518051906001600160401b0382116108345761066e6007850154613192565b601f81116107ed575b50602090601f8311600114610777579180600994926101809460009261076c575b50508160011b916000199060031b1c19161760078501555b6106fc600885016106d46101408401511515829060ff801983541691151516179055565b6101608301518154610100600160a81b03191660089190911b610100600160a81b0316179055565b0151910155600435600052600f60205261071a8260406000206135d2565b604051906024358252610732602083016044356133da565b6001600160a01b031691600435917ff0d5f39a069c9c5d4c97601866cd53721f8fa719ab48e0fe32cd135d3241a29e90604090a460018055005b015190503880610698565b906007850160005260206000209160005b601f19851681106107d5575092600994926001926101809583601f198116106107bc575b505050811b0160078501556106b0565b015160001960f88460031b161c191690553880806107ac565b91926020600181928685015181550194019201610788565b600785016000526020600020601f840160051c81016020851061082d575b601f830160051c82018110610821575050610677565b6000815560010161080b565b508061080b565b634e487b7160e01b600052604160045260246000fd5b015190503880610632565b9250600685016000526020600020906000935b601f19841685106108ac576001945083601f19811610610893575b505050811b01600683015561064a565b015160001960f88460031b161c19169055388080610883565b81810151835560209485019460019093019290910190610868565b909150600685016000526020600020601f840160051c810160208510610913575b90849392915b601f830160051c8201811061090457505061061b565b600081558594506001016108ee565b50806108e8565b634e487b7160e01b600052602160045260246000fd5b6004356000526009602052604060002054600a60205261095960243591604060002054906135c5565b106109935761096c6024356007546135b8565b600755600435600052600a602052604060002061098c60243582546135b8565b90556104ba565b60405162461bcd60e51b815260206004820152602960248201527f54726561737572793a20496e73756666696369656e742070726f6a6563742061604482015268363637b1b0ba34b7b760b91b6064820152608490fd5b60405162461bcd60e51b815260206004820152602360248201527f54726561737572793a20496e76616c696420726563697069656e74206164647260448201526265737360e81b6064820152608490fd5b506040516340939cd160e11b81526020816004817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa8015610ace57600090610a95575b60043511159050610476565b506020813d602011610ac6575b81610aaf6020938361321f565b81010312610ac15761047f9051610a89565b600080fd5b3d9150610aa2565b6040513d6000823e3d90fd5b506000546001600160a01b03163314610462565b34610ac157610afc366133ff565b90600052600f60205260406000208054821015610ac157602091610b1f916133e7565b90546040519160031b1c8152f35b34610ac157610b3b366133ff565b90600052600e60205260406000208054821015610ac157602091610b1f916133e7565b34610ac1576020366003190112610ac157610b77613333565b610b7f613415565b6001600160a01b03908116908115610bce57600054826001600160601b0360a01b821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3005b604051631e4fbdf760e01b815260006004820152602490fd5b34610ac1576000366003190112610ac1576005548015610c6c5760075461271090818102918183041490151715610c565781610c229161367b565b905b600654600754600854604080519485526020850193909352918301526060820152608081019190915260a090f35b0390f35b634e487b7160e01b600052601160045260246000fd5b600090610c24565b34610ac1576000366003190112610ac15760006001600354905b81811115610d475750610ca08261369b565b91610cae604051938461321f565b808352610cbd601f199161369b565b016020903682850137600060015b83811115610ce15760405180610c52878261339f565b80600052600c835260ff6008604060002001541615610d09575b610d049061359d565b610ccb565b908451811015610d3157610d29818385610d049460051b8901015261359d565b919050610cfb565b634e487b7160e01b600052603260045260246000fd5b80600052600c60205260ff6008604060002001541615610d70575b610d6b9061359d565b610c8e565b91610d7d610d6b9161359d565b929050610d62565b34610ac1576000366003190112610ac157600454600060015b82811115610db6575060409182519182526020820152f35b80600052600d602052604060002060ff600682015460081c1615610de4575b50610ddf9061359d565b610d9e565b610ddf91926002610df7920154906135b8565b9190610dd5565b34610ac157602080600319360112610ac1576004359081151580610eca575b610e2690613498565b816000526009815260406000205490600a815260406000205492838311600014610ec357610e5484846135c5565b8315610eb557612710808602908682041486151715610c5657610c5293610e7d86600f9361367b565b935b6000525260406000205490604051958695869192608093969594919660a084019784526020840152604083015260608201520152565b600f610c5293600093610e7f565b6000610e54565b506040516340939cd160e11b815281816004817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa8015610ace57600090610f21575b8311159050610e1d565b508181813d8311610f49575b610f37818361321f565b81010312610ac157610e269051610f17565b503d610f2d565b34610ac1576080366003190112610ac1576064356001600160401b038111610ac157610f80903690600401613349565b33600052601160205260ff604060002054168015611a64575b610fa290613441565b610faa61360c565b60243560043514611a0d57610fce90610fc660443515156134e4565b51151561362f565b6040516340939cd160e11b8082527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031691602081600481865afa908115610ace576000916119db575b50600435116119965760209060046040518094819382525afa908115610ace57600091611964575b506024351161191f576004356000526009602052604060002054600a60205261107960443591604060002054906135c5565b106118c3576004356000526009602052604060002061109b60443582546135c5565b9055602435600052600960205260406000206110ba60443582546135b8565b90556110c760035461359d565b80600355604051906110d8826131e8565b8082526004356020830152604435604083015260036060830152600060808301523360a08301523060c08301524260e083015260405161111781613204565b6000815261010083015260405161112d81613204565b600081526101208301526001610140830152336101608301524261018083015280600052600c60205260406000208251815560208301516001820155604083015160028201556060830151600681101561091a576003820154608085015190600582101561091a5761ff009060ff60a088015162010000600160b01b039060101b1694169069ffffffffffffffffffff60b01b16179160081b161717600382015560018060a01b0360c0840151166001600160601b0360a01b60048301541617600482015560e083015160058201556101008301519283516001600160401b038111610834576112206006840154613192565b601f811161187c575b506020601f821160011461180d578192939495600092611802575b50508160011b916000199060031b1c19161760068301555b6101208101518051906001600160401b038211610834576112806007850154613192565b601f81116117bb575b50602090601f8311600114611745579180600994926101809460009261173a575b50508160011b916000199060031b1c19161760078501555b6112e6600885016106d46101408401511515829060ff801983541691151516179055565b0151910155600435600052600f6020526113048160406000206135d2565b61130f60035461359d565b8060035560405161131f816131e8565b8181526024356020820152604435604082015260006060820152600060808201523360a08201523060c08201524260e082015260405161135e81613204565b6000815261010082015260405161137481613204565b600081526101208201526001610140820152336101608201524261018082015281600052600c6020526040600020908051825560208101516001830155604081015160028301556060810151600681101561091a576003830154608083015190600582101561091a5761ff009060ff62010000600160b01b0360a087015160101b1694169069ffffffffffffffffffff60b01b16179160081b16171760038301556004820160018060a01b0360c0830151166001600160601b0360a01b82541617905560e081015160058301556101008101518051906001600160401b0382116108345781906114676006860154613192565b601f81116116e7575b50602090601f83116001146116755760009261166a575b50508160011b916000199060031b1c19161760068301555b6101208101518051906001600160401b038211610834576114c36007850154613192565b601f8111611623575b50602090601f83116001146115ad57918060099492610180946000926115a2575b50508160011b916000199060031b1c19161760078501555b611529600885016106d46101408401511515829060ff801983541691151516179055565b0151910155602435600052600f6020526115478160406000206135d2565b604051916044358352600360208401527ff0d5f39a069c9c5d4c97601866cd53721f8fa719ab48e0fe32cd135d3241a29e92309184604060043593a4604051906044358252600060208301523092604060243593a460018055005b0151905088806114ed565b906007850160005260206000209160005b601f198516811061160b575092600994926001926101809583601f198116106115f2575b505050811b016007850155611505565b015160001960f88460031b161c191690558880806115e2565b919260206001819286850151815501940192016115be565b600785016000526020600020601f840160051c810160208510611663575b601f830160051c820181106116575750506114cc565b60008155600101611641565b5080611641565b015190508680611487565b9250600685016000526020600020906000935b601f19841685106116cc576001945083601f198116106116b3575b505050811b01600683015561149f565b015160001960f88460031b161c191690558680806116a3565b81810151835560209485019460019093019290910190611688565b909150600685016000526020600020601f840160051c810160208510611733575b90849392915b601f830160051c82018110611724575050611470565b6000815585945060010161170e565b5080611708565b0151905087806112aa565b906007850160005260206000209160005b601f19851681106117a3575092600994926001926101809583601f1981161061178a575b505050811b0160078501556112c2565b015160001960f88460031b161c1916905587808061177a565b91926020600181928685015181550194019201611756565b600785016000526020600020601f840160051c8101602085106117fb575b601f830160051c820181106117ef575050611289565b600081556001016117d9565b50806117d9565b015190508580611244565b6006840160005260206000209060005b601f1984168110611864575060019394959683601f1981161061184b575b505050811b01600683015561125c565b015160001960f88460031b161c1916905585808061183b565b9091602060018192858b01518155019301910161181d565b600684016000526020600020601f830160051c8101602084106118bc575b601f830160051c820181106118b0575050611229565b6000815560010161189a565b508061189a565b60405162461bcd60e51b815260206004820152602e60248201527f54726561737572793a20496e73756666696369656e742066756e647320696e2060448201526d1cdbdd5c98d9481c1c9bda9958dd60921b6064820152608490fd5b60405162461bcd60e51b815260206004820152601c60248201527f54726561737572793a20496e76616c696420746f2070726f6a656374000000006044820152606490fd5b90506020813d60201161198e575b8161197f6020938361321f565b81010312610ac1575181611047565b3d9150611972565b60405162461bcd60e51b815260206004820152601e60248201527f54726561737572793a20496e76616c69642066726f6d2070726f6a65637400006044820152606490fd5b90506020813d602011611a05575b816119f66020938361321f565b81010312610ac157518361101f565b3d91506119e9565b60405162461bcd60e51b815260206004820152602960248201527f54726561737572793a2043616e6e6f74207472616e7366657220746f2073616d60448201526819481c1c9bda9958dd60ba1b6064820152608490fd5b506000546001600160a01b03163314610f99565b34610ac157602080600319360112610ac15760043580151580611b00575b611a9f90613498565b600052600f8152604060002090604051908181845491828152019360005281600020916000905b828210611ae957610c5285611add8189038261321f565b6040519182918261339f565b835486529485019460019384019390910190611ac6565b506040516340939cd160e11b815282816004817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa8015610ace57600090611b57575b8211159050611a96565b508281813d8311611b7f575b611b6d818361321f565b81010312610ac157611a9f9051611b4d565b503d611b63565b34610ac1576040366003190112610ac157611b9f613333565b6001600160a01b0316600090815260106020526040902080546024359190821015610ac157602091610b1f916133e7565b6060366003190112610ac1576001600160401b03600435602435828111610ac157611bff903690600401613349565b91604435801515809103610ac157611c1561360c565b3415611eec5782611e5a575b611c2c60045461359d565b908160045560405192611c3e846131cc565b82845260209384810196338852604082019234845260608301888152608084019042825260a0850193845260c0850196875260e08501956000875288600052600d8a5260406000209551865560019b8c87019060018060a01b039051166001600160601b0360a01b825416179055516002860155516003850155516004840155600583019151805191821161083457611cd78354613192565b601f8111611e11575b508790601f8311600114611d9e579282600693611d309897969361014396600092611d93575b5050600019600383901b1c1916908c1b1790550192511515839060ff801983541691151516179055565b611d3c346005546135b8565b600555611d4b346008546135b8565b6008553360005260108252611d648160406000206135d2565b7f3dbea1b4ce5f95137fdcac9b1d685825c3d70ace830df1ca5a181d3887add410604051923484523393a48055005b015190508d80611d06565b8a9291601f19831691856000528a6000209260005b8c828210611dfb57505092600695928592611d309b9a9996610143999610611de257505050811b01905561012c565b015160001960f88460031b161c191690558d80806101f6565b8385015186558f97909501949384019301611db3565b8360005288600020601f840160051c8101918a8510611e50575b601f0160051c01908b905b828110611e44575050611ce0565b60008155018b90611e36565b9091508190611e2b565b6040516340939cd160e11b81526020816004817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa8015610ace57600090611eb9575b611eb49150841115613498565b611c21565b506020813d8211611ee4575b81611ed26020938361321f565b81010312610ac157611eb49051611ea7565b3d9150611ec5565b60405162461bcd60e51b815260206004820152603060248201527f54726561737572793a20446f6e6174696f6e20616d6f756e74206d757374206260448201526f0652067726561746572207468616e20360841b6064820152608490fd5b34610ac15760a0366003190112610ac15760056044351015610ac1576064356001600160401b038111610ac157611f85903690600401613349565b6084356001600160401b038111610ac157611fa4903690600401613349565b33600052601160205260ff6040600020541680156124d1575b611fc690613441565b600435151580612443575b611fda90613498565b611fe261360c565b611fef60243515156134e4565b602435600854106123ee5761200682511515613540565b61201160025461359d565b90816002556040519261012084018481106001600160401b038211176108345760405282845260043560208501526024356040850152612056604435606086016135ac565b3360808501524260a085015260c0840152600160e084015261010083015280600052600b602052604060002082518155602083015160018201556040830151600282015560038101606084015190600582101561091a5780546080860151610100600160a81b0360089190911b1660ff939093166001600160a81b03199091161791909117905560a0830151600482015560c08301519283516001600160401b0381116108345761210a6005840154613192565b601f81116123a7575b506020601f8211600114612333578190610100949596600092612328575b50508160011b916000199060031b1c19161760058401555b61216860e08201511515600685019060ff801983541691151516179055565b01518051906001600160401b038211610834576121886007840154613192565b601f81116122dd575b50602090601f831160011461226f576007929160009183612264575b50508160011b916000199060031b1c1916179101555b6121d16024356006546135b8565b6006556121e26024356008546135c5565b6008556004356000526009602052604060002061220260243582546135b8565b9055600435600052600e60205261221d8160406000206135d2565b6040516024358152612234602082016044356132e6565b33917f520f2e3a2019a45992f7bddea657b0eb1b288c520b36c43e13855d6a45da300c604060043593a460018055005b0151905085806121ad565b90601f198316916007850160005260206000209260005b8181106122c5575091600193918560079694106122ac575b505050811b019101556121c3565b015160001960f88460031b161c1916905585808061229e565b92936020600181928786015181550195019301612286565b600784016000526020600020601f840160051c8101916020851061231e575b601f0160051c01905b8181106123125750612191565b60008155600101612305565b90915081906122fc565b015190508680612131565b6005840160005260206000209560005b601f198416811061238f5750958291610100959697600194601f19811610612376575b505050811b016005840155612149565b015160001960f88460031b161c19169055868080612366565b82820151885560019097019660209283019201612343565b600584016000526020600020601f830160051c8101602084106123e7575b601f830160051c820181106123db575050612113565b600081556001016123c5565b50806123c5565b60405162461bcd60e51b815260206004820152602760248201527f54726561737572793a20496e73756666696369656e7420617661696c61626c6560448201526608189d5919d95d60ca1b6064820152608490fd5b506040516340939cd160e11b81526020816004817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa8015610ace5760009061249d575b60043511159050611fd1565b506020813d6020116124c9575b816124b76020938361321f565b81010312610ac157611fda9051612491565b3d91506124aa565b506000546001600160a01b03163314611fbd565b34610ac157602080600319360112610ac15760043580151580612561575b61250c90613498565b600052600e8152604060002090604051908181845491828152019360005281600020916000905b82821061254a57610c5285611add8189038261321f565b835486529485019460019384019390910190612533565b506040516340939cd160e11b815282816004817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa8015610ace576000906125b8575b8211159050612503565b508281813d83116125e0575b6125ce818361321f565b81010312610ac15761250c90516125ae565b503d6125c4565b34610ac1576020366003190112610ac157600435600052600c60205260206040600020805490600181015460028201546126c66003840154916126b760018060a01b0393846004880154166005880154908661264560068b01613240565b9361265260078c01613240565b96600960088d01549c01549a6040519e8f9e8f908152015260408d015261267f60608d0160ff83166133da565b61269260808d0160ff8360081c166132e6565b60101c1660a08b015260c08a015260e08901526101a0806101008a01528801906132f3565b908682036101208801526132f3565b9260ff8116151561014086015260081c166101608401526101808301520390f35b34610ac157602080600319360112610ac1576001600160a01b03612709613333565b1660005260108152604060002090604051908181845491828152019360005281600020916000905b82821061274857610c5285611add8189038261321f565b835486529485019460019384019390910190612731565b34610ac1576000366003190112610ac1576000546040516001600160a01b039091168152602090f35b34610ac1576020366003190112610ac1576001600160a01b036127a9613333565b166000526011602052602060ff604060002054166040519015158152f35b34610ac1576060366003190112610ac1576004356024356001600160a01b03811690819003610ac1576044356001600160401b038111610ac15761280f903690600401613349565b91612818613415565b801561282481156134e4565b82156128f9578147106128a45761283d8451151561362f565b818360009261289a575b600092839283928392f115610ace577ff0ddfd7b832d05a4890925ba2bd44503a487bb111b0f3d82e8332c14d8b2802e906040519081526040602082015280612895339560408301906132f3565b0390a3005b6108fc9250612847565b60405162461bcd60e51b815260206004820152602760248201527f54726561737572793a20496e73756666696369656e7420636f6e74726163742060448201526662616c616e636560c81b6064820152608490fd5b60405162461bcd60e51b815260206004820152601b60248201527f54726561737572793a20496e76616c696420726563697069656e7400000000006044820152606490fd5b34610ac1576000366003190112610ac157612957613415565b600080546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b34610ac1576020366003190112610ac1576004356129b3613415565b80151580612b48575b15612af957600052600d60205260406000206006810180549060ff8260081c16612ab4574790600284018054809310612a5d5760008080809388612a0f88886101008c61ff0019161790556005546135c5565b60055560085482548082118514612a5557612a29916135c5565b600855600101549054906001600160a01b0316828215612a4c575bf115610ace57005b506108fc612a44565b505082612a29565b60405162461bcd60e51b815260206004820152602960248201527f54726561737572793a20496e73756666696369656e742062616c616e636520666044820152681bdc881c99599d5b9960ba1b6064820152608490fd5b60405162461bcd60e51b815260206004820152601a60248201527f54726561737572793a20416c726561647920726566756e6465640000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152602160248201527f54726561737572793a20496e76616c696420636f6e747269627574696f6e20496044820152601160fa1b6064820152608490fd5b506004548111156129bc565b34610ac1576000366003190112610ac157602047604051908152f35b34610ac1576000366003190112610ac1576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b34610ac1576020366003190112610ac157600435612bd1613415565b6007548110612c70576005549081811115612c3857612bfd612bf5600554836135c5565b6008546135b8565b6008555b8060055560405191825260208201527f212dccf34156d3de433f9b9bbecc243f3d49aeea186f9ff9efcaec09b4cde80d60403392a2005b81811015612c0157612c4a81836135c5565b6008549080821115612c6757612c5f916135c5565b600855612c01565b50506000612c5f565b60405162461bcd60e51b815260206004820152602c60248201527f54726561737572793a204e657720627564676574206c657373207468616e206160448201526b1b1c9958591e481cdc195b9d60a21b6064820152608490fd5b34610ac1576040366003190112610ac157612ce3613333565b60243580151591828203610ac157612cf9613415565b6001600160a01b0316908115612d5a57612d2c9082600052601160205260406000209060ff801983541691151516179055565b6040519182527fd2a1abc2b849192f59897f554a9eecb25eeb36c9f6f7dbfba8256f36d292b77c60203393a3005b60405162461bcd60e51b815260206004820152602360248201527f54726561737572793a20496e76616c696420747265617375726572206164647260448201526265737360e81b6064820152608490fd5b34610ac1576000366003190112610ac1576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b34610ac157602080600319360112610ac15760043580151580613026575b15612fe357336000526011825260ff604060002054168015612fcf575b8015612fc0575b15612f635780600052600c8252604060002060088101805460ff8116612f0f57600383015460101c6001600160a01b03163314612eba576001600160a81b0319163360081b610100600160a81b03161760011790556009429101557f508a19633777b38bc72d067d7052193c930b8ff14ec1567dd9d69453ecab169a604051924284523393a3005b60405162461bcd60e51b815260048101869052602760248201527f54726561737572793a2043616e6e6f7420766572696679206f776e207472616e60448201526639b0b1ba34b7b760c91b6064820152608490fd5b60405162461bcd60e51b815260048101869052602660248201527f54726561737572793a205472616e73616374696f6e20616c72656164792076656044820152651c9a599a595960d21b6064820152608490fd5b60405162461bcd60e51b815260048101839052602f60248201527f54726561737572793a204e6f7420617574686f72697a656420746f207665726960448201526e6679207472616e73616374696f6e7360881b6064820152608490fd5b50612fca336136b2565b612e32565b506000546001600160a01b03163314612e2b565b6064826040519062461bcd60e51b825280600483015260248201527f54726561737572793a20496e76616c6964207472616e73616374696f6e2049446044820152fd5b50600354811115612e0e565b34610ac1576020366003190112610ac157600435600052600d6020526040600020805460018060a01b036001830154169160ff6130b86002830154926003810154600482015490600661308760058501613240565b93015495604051988998895260208901526040880152606087015260808601526101008060a08701528501906132f3565b91818116151560c085015260081c16151560e08301520390f35b34610ac1576020366003190112610ac157600435600052600b60205260406000208054610c52600183015492600281015461317c6003830154600484015461311c60058601613240565b91613131600760ff6006890154169701613240565b94604051998a998a5260208a015260408901526131546060890160ff83166132e6565b60081c6001600160a01b0316608088015260a087015261012060c087018190528601906132f3565b91151560e08501528382036101008501526132f3565b90600182811c921680156131c2575b60208310146131ac57565b634e487b7160e01b600052602260045260246000fd5b91607f16916131a1565b61010081019081106001600160401b0382111761083457604052565b6101a081019081106001600160401b0382111761083457604052565b602081019081106001600160401b0382111761083457604052565b90601f801991011681019081106001600160401b0382111761083457604052565b906040519182600082549261325484613192565b9081845260019485811690816000146132c35750600114613280575b505061327e9250038361321f565b565b9093915060005260209081600020936000915b8183106132ab57505061327e93508201013880613270565b85548884018501529485019487945091830191613293565b91505061327e94506020925060ff191682840152151560051b8201013880613270565b90600582101561091a5752565b919082519283825260005b84811061331f575050826000602080949584010152601f8019910116010190565b6020818301810151848301820152016132fe565b600435906001600160a01b0382168203610ac157565b81601f82011215610ac1578035906001600160401b038211610834576040519261337d601f8401601f19166020018561321f565b82845260208383010111610ac157816000926020809301838601378301015290565b6020908160408183019282815285518094520193019160005b8281106133c6575050505090565b8351855293810193928101926001016133b8565b90600682101561091a5752565b8054821015610d315760005260206000200190600090565b6040906003190112610ac1576004359060243590565b6000546001600160a01b0316330361342957565b60405163118cdaa760e01b8152336004820152602490fd5b1561344857565b60405162461bcd60e51b815260206004820152602260248201527f54726561737572793a204e6f7420617574686f72697a6564207472656173757260448201526132b960f11b6064820152608490fd5b1561349f57565b60405162461bcd60e51b815260206004820152601c60248201527f54726561737572793a20496e76616c69642070726f6a656374204944000000006044820152606490fd5b156134eb57565b60405162461bcd60e51b815260206004820152602760248201527f54726561737572793a20416d6f756e74206d75737420626520677265617465726044820152660207468616e20360cc1b6064820152608490fd5b1561354757565b60405162461bcd60e51b815260206004820152602860248201527f54726561737572793a2049504653206465736372697074696f6e2068617368206044820152671c995c5d5a5c995960c21b6064820152608490fd5b6000198114610c565760010190565b600582101561091a5752565b91908201809211610c5657565b91908203918211610c5657565b805468010000000000000000811015610834576135f4916001820181556133e7565b819291549060031b91821b91600019901b1916179055565b60026001541461361d576002600155565b604051633ee5aeb560e01b8152600490fd5b1561363657565b60405162461bcd60e51b815260206004820152601960248201527f54726561737572793a20526561736f6e207265717569726564000000000000006044820152606490fd5b8115613685570490565b634e487b7160e01b600052601260045260246000fd5b6001600160401b0381116108345760051b60200190565b6040516305c7664d60e31b81526001600160a01b03918216600482015290602090829060249082907f0000000000000000000000000000000000000000000000000000000000000000165afa8091600091613723575b50906137145750600090565b1561371e57600190565b600090565b6020813d821161375c575b8161373b6020938361321f565b810103126137585751908115158203613755575038613708565b80fd5b5080fd5b3d915061372e56fea26469706673582212203fb6b0fd197ca53038582544fa40c492521059426d306c88526e002084f2636c64736f6c63430008140033",
  "devdoc": {
    "author": "CitiProof Team",
    "details": "Handles all financial transparency and fund allocation tracking",
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "allocateFundsToProject(uint256,uint256,uint8,string,string)": {
        "details": "Allocate funds to a specific project"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "receiveDonation(uint256,string,bool)": {
        "details": "Receive donor contribution"
      },
      "recordTransaction(uint256,uint256,uint8,uint8,address,string,string)": {
        "details": "Record a financial transaction (expenditure)"
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferFundsBetweenProjects(uint256,uint256,uint256,string)": {
        "details": "Transfer funds between projects"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "verifyTransaction(uint256)": {
        "details": "Verify a transaction (by authorized verifiers)"
      }
    },
    "title": "TreasuryFundTracking",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/TreasuryFundTracking.sol:TreasuryFundTracking",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 188,
        "contract": "contracts/TreasuryFundTracking.sol:TreasuryFundTracking",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 7173,
        "contract": "contracts/TreasuryFundTracking.sol:TreasuryFundTracking",
        "label": "_allocationIdCounter",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 7175,
        "contract": "contracts/TreasuryFundTracking.sol:TreasuryFundTracking",
        "label": "_transactionIdCounter",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 7177,
        "contract": "contracts/TreasuryFundTracking.sol:TreasuryFundTracking",
        "label": "_contributionIdCounter",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 7180,
        "contract": "contracts/TreasuryFundTracking.sol:TreasuryFundTracking",
        "label": "budget",
        "offset": 0,
        "slot": "5",
        "type": "t_struct(BudgetAllocation)7171_storage"
      },
      {
        "astId": 7185,
        "contract": "contracts/TreasuryFundTracking.sol:TreasuryFundTracking",
        "label": "allocations",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_struct(FundAllocation)7108_storage)"
      },
      {
        "astId": 7190,
        "contract": "contracts/TreasuryFundTracking.sol:TreasuryFundTracking",
        "label": "transactions",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_struct(FinancialTransaction)7137_storage)"
      },
      {
        "astId": 7195,
        "contract": "contracts/TreasuryFundTracking.sol:TreasuryFundTracking",
        "label": "contributions",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_struct(DonorContribution)7154_storage)"
      },
      {
        "astId": 7200,
        "contract": "contracts/TreasuryFundTracking.sol:TreasuryFundTracking",
        "label": "projectAllocations",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 7205,
        "contract": "contracts/TreasuryFundTracking.sol:TreasuryFundTracking",
        "label": "projectTransactions",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 7210,
        "contract": "contracts/TreasuryFundTracking.sol:TreasuryFundTracking",
        "label": "donorContributions",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 7214,
        "contract": "contracts/TreasuryFundTracking.sol:TreasuryFundTracking",
        "label": "authorizedTreasurers",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(FundSource)7081": {
        "encoding": "inplace",
        "label": "enum TreasuryFundTracking.FundSource",
        "numberOfBytes": "1"
      },
      "t_enum(TransactionType)7088": {
        "encoding": "inplace",
        "label": "enum TreasuryFundTracking.TransactionType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_struct(DonorContribution)7154_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct TreasuryFundTracking.DonorContribution)",
        "numberOfBytes": "32",
        "value": "t_struct(DonorContribution)7154_storage"
      },
      "t_mapping(t_uint256,t_struct(FinancialTransaction)7137_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct TreasuryFundTracking.FinancialTransaction)",
        "numberOfBytes": "32",
        "value": "t_struct(FinancialTransaction)7137_storage"
      },
      "t_mapping(t_uint256,t_struct(FundAllocation)7108_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct TreasuryFundTracking.FundAllocation)",
        "numberOfBytes": "32",
        "value": "t_struct(FundAllocation)7108_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(BudgetAllocation)7171_storage": {
        "encoding": "inplace",
        "label": "struct TreasuryFundTracking.BudgetAllocation",
        "members": [
          {
            "astId": 7156,
            "contract": "contracts/TreasuryFundTracking.sol:TreasuryFundTracking",
            "label": "totalBudget",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7158,
            "contract": "contracts/TreasuryFundTracking.sol:TreasuryFundTracking",
            "label": "allocatedBudget",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7160,
            "contract": "contracts/TreasuryFundTracking.sol:TreasuryFundTracking",
            "label": "spentBudget",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 7162,
            "contract": "contracts/TreasuryFundTracking.sol:TreasuryFundTracking",
            "label": "availableBudget",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 7166,
            "contract": "contracts/TreasuryFundTracking.sol:TreasuryFundTracking",
            "label": "projectAllocations",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 7170,
            "contract": "contracts/TreasuryFundTracking.sol:TreasuryFundTracking",
            "label": "projectSpending",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_uint256,t_uint256)"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(DonorContribution)7154_storage": {
        "encoding": "inplace",
        "label": "struct TreasuryFundTracking.DonorContribution",
        "members": [
          {
            "astId": 7139,
            "contract": "contracts/TreasuryFundTracking.sol:TreasuryFundTracking",
            "label": "contributionId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7141,
            "contract": "contracts/TreasuryFundTracking.sol:TreasuryFundTracking",
            "label": "donor",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 7143,
            "contract": "contracts/TreasuryFundTracking.sol:TreasuryFundTracking",
            "label": "amount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 7145,
            "contract": "contracts/TreasuryFundTracking.sol:TreasuryFundTracking",
            "label": "projectId",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 7147,
            "contract": "contracts/TreasuryFundTracking.sol:TreasuryFundTracking",
            "label": "timestamp",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 7149,
            "contract": "contracts/TreasuryFundTracking.sol:TreasuryFundTracking",
            "label": "ipfsMessageHash",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 7151,
            "contract": "contracts/TreasuryFundTracking.sol:TreasuryFundTracking",
            "label": "isAnonymous",
            "offset": 0,
            "slot": "6",
            "type": "t_bool"
          },
          {
            "astId": 7153,
            "contract": "contracts/TreasuryFundTracking.sol:TreasuryFundTracking",
            "label": "isRefunded",
            "offset": 1,
            "slot": "6",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(FinancialTransaction)7137_storage": {
        "encoding": "inplace",
        "label": "struct TreasuryFundTracking.FinancialTransaction",
        "members": [
          {
            "astId": 7110,
            "contract": "contracts/TreasuryFundTracking.sol:TreasuryFundTracking",
            "label": "transactionId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7112,
            "contract": "contracts/TreasuryFundTracking.sol:TreasuryFundTracking",
            "label": "projectId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7114,
            "contract": "contracts/TreasuryFundTracking.sol:TreasuryFundTracking",
            "label": "amount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 7117,
            "contract": "contracts/TreasuryFundTracking.sol:TreasuryFundTracking",
            "label": "transactionType",
            "offset": 0,
            "slot": "3",
            "type": "t_enum(TransactionType)7088"
          },
          {
            "astId": 7120,
            "contract": "contracts/TreasuryFundTracking.sol:TreasuryFundTracking",
            "label": "source",
            "offset": 1,
            "slot": "3",
            "type": "t_enum(FundSource)7081"
          },
          {
            "astId": 7122,
            "contract": "contracts/TreasuryFundTracking.sol:TreasuryFundTracking",
            "label": "authorizedBy",
            "offset": 2,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 7124,
            "contract": "contracts/TreasuryFundTracking.sol:TreasuryFundTracking",
            "label": "recipient",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 7126,
            "contract": "contracts/TreasuryFundTracking.sol:TreasuryFundTracking",
            "label": "timestamp",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 7128,
            "contract": "contracts/TreasuryFundTracking.sol:TreasuryFundTracking",
            "label": "ipfsDescriptionHash",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          },
          {
            "astId": 7130,
            "contract": "contracts/TreasuryFundTracking.sol:TreasuryFundTracking",
            "label": "receiptHash",
            "offset": 0,
            "slot": "7",
            "type": "t_string_storage"
          },
          {
            "astId": 7132,
            "contract": "contracts/TreasuryFundTracking.sol:TreasuryFundTracking",
            "label": "isVerified",
            "offset": 0,
            "slot": "8",
            "type": "t_bool"
          },
          {
            "astId": 7134,
            "contract": "contracts/TreasuryFundTracking.sol:TreasuryFundTracking",
            "label": "verifiedBy",
            "offset": 1,
            "slot": "8",
            "type": "t_address"
          },
          {
            "astId": 7136,
            "contract": "contracts/TreasuryFundTracking.sol:TreasuryFundTracking",
            "label": "verificationTimestamp",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(FundAllocation)7108_storage": {
        "encoding": "inplace",
        "label": "struct TreasuryFundTracking.FundAllocation",
        "members": [
          {
            "astId": 7090,
            "contract": "contracts/TreasuryFundTracking.sol:TreasuryFundTracking",
            "label": "allocationId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7092,
            "contract": "contracts/TreasuryFundTracking.sol:TreasuryFundTracking",
            "label": "projectId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7094,
            "contract": "contracts/TreasuryFundTracking.sol:TreasuryFundTracking",
            "label": "amount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 7097,
            "contract": "contracts/TreasuryFundTracking.sol:TreasuryFundTracking",
            "label": "source",
            "offset": 0,
            "slot": "3",
            "type": "t_enum(FundSource)7081"
          },
          {
            "astId": 7099,
            "contract": "contracts/TreasuryFundTracking.sol:TreasuryFundTracking",
            "label": "authorizedBy",
            "offset": 1,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 7101,
            "contract": "contracts/TreasuryFundTracking.sol:TreasuryFundTracking",
            "label": "timestamp",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 7103,
            "contract": "contracts/TreasuryFundTracking.sol:TreasuryFundTracking",
            "label": "ipfsDescriptionHash",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 7105,
            "contract": "contracts/TreasuryFundTracking.sol:TreasuryFundTracking",
            "label": "isActive",
            "offset": 0,
            "slot": "6",
            "type": "t_bool"
          },
          {
            "astId": 7107,
            "contract": "contracts/TreasuryFundTracking.sol:TreasuryFundTracking",
            "label": "documentHash",
            "offset": 0,
            "slot": "7",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}