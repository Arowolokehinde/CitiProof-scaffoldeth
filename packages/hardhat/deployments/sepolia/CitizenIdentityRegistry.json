{
  "address": "0x9F4Bc4cb48e60871768b4cFB9CF9C53381063652",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "initialOwner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        }
      ],
      "name": "StringsInsufficientHexLength",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "citizenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "walletAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "deactivatedBy",
          "type": "address"
        }
      ],
      "name": "CitizenDeactivated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "citizenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "walletAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "ensName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "efpTokenId",
          "type": "string"
        }
      ],
      "name": "CitizenProfileUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "citizenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "walletAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "ensName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "enum CitizenIdentityRegistry.VerificationLevel",
          "name": "verificationLevel",
          "type": "uint8"
        }
      ],
      "name": "CitizenRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "citizenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "walletAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum CitizenIdentityRegistry.VerificationLevel",
          "name": "oldLevel",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "enum CitizenIdentityRegistry.VerificationLevel",
          "name": "newLevel",
          "type": "uint8"
        }
      ],
      "name": "CitizenVerificationUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "citizens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "citizenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "walletAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "ensName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "efpTokenId",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "efpFollowers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "efpFollowing",
          "type": "uint256"
        },
        {
          "internalType": "enum CitizenIdentityRegistry.VerificationLevel",
          "name": "verificationLevel",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "registrationTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastUpdateTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "reputationScore",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "ipfsMetadata",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_citizenId",
          "type": "uint256"
        }
      ],
      "name": "deactivateCitizen",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "ensNameToCitizenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getActiveCitizensCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_citizenId",
          "type": "uint256"
        }
      ],
      "name": "getCitizen",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "citizenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "walletAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "ensName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "efpTokenId",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "efpFollowers",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "efpFollowing",
              "type": "uint256"
            },
            {
              "internalType": "enum CitizenIdentityRegistry.VerificationLevel",
              "name": "verificationLevel",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "registrationTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastUpdateTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "reputationScore",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "ipfsMetadata",
              "type": "string"
            }
          ],
          "internalType": "struct CitizenIdentityRegistry.CitizenProfile",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_ensName",
          "type": "string"
        }
      ],
      "name": "getCitizenByENS",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "citizenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "walletAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "ensName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "efpTokenId",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "efpFollowers",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "efpFollowing",
              "type": "uint256"
            },
            {
              "internalType": "enum CitizenIdentityRegistry.VerificationLevel",
              "name": "verificationLevel",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "registrationTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastUpdateTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "reputationScore",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "ipfsMetadata",
              "type": "string"
            }
          ],
          "internalType": "struct CitizenIdentityRegistry.CitizenProfile",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wallet",
          "type": "address"
        }
      ],
      "name": "getCitizenByWallet",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "citizenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "walletAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "ensName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "efpTokenId",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "efpFollowers",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "efpFollowing",
              "type": "uint256"
            },
            {
              "internalType": "enum CitizenIdentityRegistry.VerificationLevel",
              "name": "verificationLevel",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "registrationTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastUpdateTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "reputationScore",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "ipfsMetadata",
              "type": "string"
            }
          ],
          "internalType": "struct CitizenIdentityRegistry.CitizenProfile",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_citizenIds",
          "type": "uint256[]"
        }
      ],
      "name": "getCitizensBatch",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "citizenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "walletAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "ensName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "efpTokenId",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "efpFollowers",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "efpFollowing",
              "type": "uint256"
            },
            {
              "internalType": "enum CitizenIdentityRegistry.VerificationLevel",
              "name": "verificationLevel",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "registrationTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastUpdateTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "reputationScore",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "ipfsMetadata",
              "type": "string"
            }
          ],
          "internalType": "struct CitizenIdentityRegistry.CitizenProfile[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalCitizens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wallet",
          "type": "address"
        }
      ],
      "name": "getVerificationLevel",
      "outputs": [
        {
          "internalType": "enum CitizenIdentityRegistry.VerificationLevel",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wallet",
          "type": "address"
        }
      ],
      "name": "isCitizenRegistered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_ensName",
          "type": "string"
        }
      ],
      "name": "isENSNameAvailable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_citizenId",
          "type": "uint256"
        }
      ],
      "name": "reactivateCitizen",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_ensName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_efpTokenId",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_efpFollowers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_efpFollowing",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_ipfsMetadata",
          "type": "string"
        }
      ],
      "name": "registerCitizen",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registerCitizenSimple",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "registeredEnsNames",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_efpTokenId",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_efpFollowers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_efpFollowing",
          "type": "uint256"
        }
      ],
      "name": "updateEFPVerification",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_ensName",
          "type": "string"
        }
      ],
      "name": "updateENSName",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_citizenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_reputationScore",
          "type": "uint256"
        }
      ],
      "name": "updateReputationScore",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "walletToCitizenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x42a659bb4d553fa15b0ffde8b19c6b7b9c6d97641b64144c4e21a6a4204d25bc",
  "receipt": {
    "to": null,
    "from": "0x847118E06a68716b385a86a50250C598D33Ca68C",
    "contractAddress": "0x9F4Bc4cb48e60871768b4cFB9CF9C53381063652",
    "transactionIndex": 154,
    "gasUsed": "2317058",
    "logsBloom": "0x
    "blockHash": "0xcb83818e81326b1ad56fbd96e9457b294fd2fcf306d70fd3164dff453dcacc96",
    "transactionHash": "0x42a659bb4d553fa15b0ffde8b19c6b7b9c6d97641b64144c4e21a6a4204d25bc",
    "logs": [
      {
        "transactionIndex": 154,
        "blockNumber": 9142952,
        "transactionHash": "0x42a659bb4d553fa15b0ffde8b19c6b7b9c6d97641b64144c4e21a6a4204d25bc",
        "address": "0x9F4Bc4cb48e60871768b4cFB9CF9C53381063652",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000847118e06a68716b385a86a50250c598d33ca68c"
        ],
        "data": "0x",
        "logIndex": 218,
        "blockHash": "0xcb83818e81326b1ad56fbd96e9457b294fd2fcf306d70fd3164dff453dcacc96"
      }
    ],
    "blockNumber": 9142952,
    "cumulativeGasUsed": "19397951",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x847118E06a68716b385a86a50250C598D33Ca68C"
  ],
  "numDeployments": 1,
  "solcInputHash": "604c9b416adca51f3a9c4c2681d47f73",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"StringsInsufficientHexLength\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"citizenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"deactivatedBy\",\"type\":\"address\"}],\"name\":\"CitizenDeactivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"citizenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"ensName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"efpTokenId\",\"type\":\"string\"}],\"name\":\"CitizenProfileUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"citizenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"ensName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"enum CitizenIdentityRegistry.VerificationLevel\",\"name\":\"verificationLevel\",\"type\":\"uint8\"}],\"name\":\"CitizenRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"citizenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum CitizenIdentityRegistry.VerificationLevel\",\"name\":\"oldLevel\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum CitizenIdentityRegistry.VerificationLevel\",\"name\":\"newLevel\",\"type\":\"uint8\"}],\"name\":\"CitizenVerificationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"citizens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"citizenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"ensName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"efpTokenId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"efpFollowers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"efpFollowing\",\"type\":\"uint256\"},{\"internalType\":\"enum CitizenIdentityRegistry.VerificationLevel\",\"name\":\"verificationLevel\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"registrationTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"reputationScore\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"ipfsMetadata\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_citizenId\",\"type\":\"uint256\"}],\"name\":\"deactivateCitizen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"ensNameToCitizenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActiveCitizensCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_citizenId\",\"type\":\"uint256\"}],\"name\":\"getCitizen\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"citizenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"ensName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"efpTokenId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"efpFollowers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"efpFollowing\",\"type\":\"uint256\"},{\"internalType\":\"enum CitizenIdentityRegistry.VerificationLevel\",\"name\":\"verificationLevel\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"registrationTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"reputationScore\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"ipfsMetadata\",\"type\":\"string\"}],\"internalType\":\"struct CitizenIdentityRegistry.CitizenProfile\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_ensName\",\"type\":\"string\"}],\"name\":\"getCitizenByENS\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"citizenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"ensName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"efpTokenId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"efpFollowers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"efpFollowing\",\"type\":\"uint256\"},{\"internalType\":\"enum CitizenIdentityRegistry.VerificationLevel\",\"name\":\"verificationLevel\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"registrationTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"reputationScore\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"ipfsMetadata\",\"type\":\"string\"}],\"internalType\":\"struct CitizenIdentityRegistry.CitizenProfile\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getCitizenByWallet\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"citizenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"ensName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"efpTokenId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"efpFollowers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"efpFollowing\",\"type\":\"uint256\"},{\"internalType\":\"enum CitizenIdentityRegistry.VerificationLevel\",\"name\":\"verificationLevel\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"registrationTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"reputationScore\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"ipfsMetadata\",\"type\":\"string\"}],\"internalType\":\"struct CitizenIdentityRegistry.CitizenProfile\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_citizenIds\",\"type\":\"uint256[]\"}],\"name\":\"getCitizensBatch\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"citizenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"ensName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"efpTokenId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"efpFollowers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"efpFollowing\",\"type\":\"uint256\"},{\"internalType\":\"enum CitizenIdentityRegistry.VerificationLevel\",\"name\":\"verificationLevel\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"registrationTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"reputationScore\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"ipfsMetadata\",\"type\":\"string\"}],\"internalType\":\"struct CitizenIdentityRegistry.CitizenProfile[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalCitizens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getVerificationLevel\",\"outputs\":[{\"internalType\":\"enum CitizenIdentityRegistry.VerificationLevel\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"isCitizenRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_ensName\",\"type\":\"string\"}],\"name\":\"isENSNameAvailable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_citizenId\",\"type\":\"uint256\"}],\"name\":\"reactivateCitizen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_ensName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_efpTokenId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_efpFollowers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_efpFollowing\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_ipfsMetadata\",\"type\":\"string\"}],\"name\":\"registerCitizen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registerCitizenSimple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"registeredEnsNames\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_efpTokenId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_efpFollowers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_efpFollowing\",\"type\":\"uint256\"}],\"name\":\"updateEFPVerification\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_ensName\",\"type\":\"string\"}],\"name\":\"updateENSName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_citizenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reputationScore\",\"type\":\"uint256\"}],\"name\":\"updateReputationScore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletToCitizenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"CitiProof Team\",\"details\":\"Manages verified citizen identities and their verification levels\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"StringsInsufficientHexLength(uint256,uint256)\":[{\"details\":\"The `value` string doesn't fit in the specified `length`.\"}]},\"kind\":\"dev\",\"methods\":{\"deactivateCitizen(uint256)\":{\"details\":\"Deactivate a citizen account (admin function)\",\"params\":{\"_citizenId\":\"Citizen ID to deactivate\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"reactivateCitizen(uint256)\":{\"details\":\"Reactivate a citizen account (admin function)\",\"params\":{\"_citizenId\":\"Citizen ID to reactivate\"}},\"registerCitizen(string,string,uint256,uint256,string)\":{\"details\":\"Register a new citizen with flexible requirements\",\"params\":{\"_efpFollowers\":\"Number of EFP followers (0 allowed for new users)\",\"_efpFollowing\":\"Number of EFP following (0 allowed for new users)\",\"_efpTokenId\":\"EFP list token ID (can be empty string)\",\"_ensName\":\"ENS name (can be empty string for wallet-only registration)\",\"_ipfsMetadata\":\"IPFS hash for additional profile data\"}},\"registerCitizenSimple()\":{\"details\":\"Simplified registration for wallet-only users (hackathon-friendly) Automatically generates ENS subdomain and placeholder EFP data\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateEFPVerification(string,uint256,uint256)\":{\"details\":\"Update citizen's EFP verification data\",\"params\":{\"_efpFollowers\":\"Updated follower count\",\"_efpFollowing\":\"Updated following count\",\"_efpTokenId\":\"New EFP token ID\"}},\"updateENSName(string)\":{\"details\":\"Update citizen's ENS name\",\"params\":{\"_ensName\":\"New ENS name\"}},\"updateReputationScore(uint256,uint256)\":{\"details\":\"Update reputation score (only called by reputation contract)\",\"params\":{\"_citizenId\":\"Citizen ID\",\"_reputationScore\":\"New reputation score\"}}},\"title\":\"CitizenIdentityRegistry\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CitizenIdentityRegistry.sol\":\"CitizenIdentityRegistry\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/CitizenIdentityRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n/**\\n * @title CitizenIdentityRegistry\\n * @dev Manages verified citizen identities and their verification levels\\n * @author CitiProof Team\\n */\\ncontract CitizenIdentityRegistry is Ownable, ReentrancyGuard {\\n    // Counter for citizen IDs (using simple uint256 instead of Counters)\\n    uint256 private _citizenIdCounter;\\n\\n    // Verification levels\\n    enum VerificationLevel {\\n        UNVERIFIED,    // Default state\\n        BASIC,         // Basic wallet connection + EFP\\n        VERIFIED,      // Enhanced verification (50+ EFP followers)\\n        PREMIUM        // Government-verified or high reputation\\n    }\\n\\n    // Citizen profile structure\\n    struct CitizenProfile {\\n        uint256 citizenId;\\n        address walletAddress;\\n        string ensName;              // ENS name if available\\n        string efpTokenId;           // EFP list token ID\\n        uint256 efpFollowers;        // EFP follower count\\n        uint256 efpFollowing;        // EFP following count\\n        VerificationLevel verificationLevel;\\n        uint256 registrationTimestamp;\\n        uint256 lastUpdateTimestamp;\\n        bool isActive;\\n        uint256 reputationScore;     // Link to reputation contract\\n        string ipfsMetadata;         // Additional profile data on IPFS\\n    }\\n\\n    // Storage mappings\\n    mapping(address => uint256) public walletToCitizenId;\\n    mapping(uint256 => CitizenProfile) public citizens;\\n    mapping(string => uint256) public ensNameToCitizenId;\\n    mapping(string => bool) public registeredEnsNames;\\n\\n    // Events\\n    event CitizenRegistered(\\n        uint256 indexed citizenId,\\n        address indexed walletAddress,\\n        string ensName,\\n        VerificationLevel verificationLevel\\n    );\\n\\n    event CitizenVerificationUpdated(\\n        uint256 indexed citizenId,\\n        address indexed walletAddress,\\n        VerificationLevel oldLevel,\\n        VerificationLevel newLevel\\n    );\\n\\n    event CitizenProfileUpdated(\\n        uint256 indexed citizenId,\\n        address indexed walletAddress,\\n        string ensName,\\n        string efpTokenId\\n    );\\n\\n    event CitizenDeactivated(\\n        uint256 indexed citizenId,\\n        address indexed walletAddress,\\n        address indexed deactivatedBy\\n    );\\n\\n    // Modifiers\\n    modifier onlyRegisteredCitizen() {\\n        require(walletToCitizenId[msg.sender] != 0, \\\"CitizenRegistry: Caller is not a registered citizen\\\");\\n        require(citizens[walletToCitizenId[msg.sender]].isActive, \\\"CitizenRegistry: Citizen account is not active\\\");\\n        _;\\n    }\\n\\n    modifier validCitizenId(uint256 _citizenId) {\\n        require(_citizenId > 0 && _citizenId <= _citizenIdCounter, \\\"CitizenRegistry: Invalid citizen ID\\\");\\n        _;\\n    }\\n\\n    modifier onlyActiveCitizen(uint256 _citizenId) {\\n        require(citizens[_citizenId].isActive, \\\"CitizenRegistry: Citizen is not active\\\");\\n        _;\\n    }\\n\\n    constructor(address initialOwner) Ownable(initialOwner) {}\\n\\n    /**\\n     * @dev Register a new citizen with flexible requirements\\n     * @param _ensName ENS name (can be empty string for wallet-only registration)\\n     * @param _efpTokenId EFP list token ID (can be empty string)\\n     * @param _efpFollowers Number of EFP followers (0 allowed for new users)\\n     * @param _efpFollowing Number of EFP following (0 allowed for new users)\\n     * @param _ipfsMetadata IPFS hash for additional profile data\\n     */\\n    function registerCitizen(\\n        string memory _ensName,\\n        string memory _efpTokenId,\\n        uint256 _efpFollowers,\\n        uint256 _efpFollowing,\\n        string memory _ipfsMetadata\\n    ) external nonReentrant {\\n        require(walletToCitizenId[msg.sender] == 0, \\\"CitizenRegistry: Wallet already registered\\\");\\n        \\n        // Check if ENS name is already taken (if provided)\\n        if (bytes(_ensName).length > 0) {\\n            require(!registeredEnsNames[_ensName], \\\"CitizenRegistry: ENS name already registered\\\");\\n        }\\n\\n        // Increment citizen ID counter\\n        _citizenIdCounter++;\\n        uint256 newCitizenId = _citizenIdCounter;\\n\\n        // Determine verification level based on EFP data\\n        VerificationLevel verificationLevel = _determineVerificationLevel(_efpFollowers, _efpFollowing);\\n\\n        // Create citizen profile\\n        citizens[newCitizenId] = CitizenProfile({\\n            citizenId: newCitizenId,\\n            walletAddress: msg.sender,\\n            ensName: _ensName,\\n            efpTokenId: _efpTokenId,\\n            efpFollowers: _efpFollowers,\\n            efpFollowing: _efpFollowing,\\n            verificationLevel: verificationLevel,\\n            registrationTimestamp: block.timestamp,\\n            lastUpdateTimestamp: block.timestamp,\\n            isActive: true,\\n            reputationScore: 0, // Will be updated by reputation contract\\n            ipfsMetadata: _ipfsMetadata\\n        });\\n\\n        // Update mappings\\n        walletToCitizenId[msg.sender] = newCitizenId;\\n        if (bytes(_ensName).length > 0) {\\n            ensNameToCitizenId[_ensName] = newCitizenId;\\n            registeredEnsNames[_ensName] = true;\\n        }\\n\\n        emit CitizenRegistered(newCitizenId, msg.sender, _ensName, verificationLevel);\\n    }\\n\\n    /**\\n     * @dev Simplified registration for wallet-only users (hackathon-friendly)\\n     * Automatically generates ENS subdomain and placeholder EFP data\\n     */\\n    function registerCitizenSimple() external nonReentrant {\\n        require(walletToCitizenId[msg.sender] == 0, \\\"CitizenRegistry: Wallet already registered\\\");\\n\\n        // Generate automatic ENS subdomain using last 6 chars of address\\n        string memory addressSuffix = Strings.toHexString(uint160(msg.sender) & 0xFFFFFF, 3);\\n        string memory autoEnsName = string(abi.encodePacked(\\\"citizen\\\", addressSuffix, \\\".citiproof.eth\\\"));\\n        \\n        // Ensure generated name is unique (highly unlikely to collide)\\n        require(!registeredEnsNames[autoEnsName], \\\"CitizenRegistry: Generated ENS name collision\\\");\\n\\n        // Create with minimal verification data (can be updated later)\\n        _citizenIdCounter++;\\n        uint256 newCitizenId = _citizenIdCounter;\\n\\n        citizens[newCitizenId] = CitizenProfile({\\n            citizenId: newCitizenId,\\n            walletAddress: msg.sender,\\n            ensName: autoEnsName,\\n            efpTokenId: \\\"\\\", // Can be added later\\n            efpFollowers: 0,\\n            efpFollowing: 0,\\n            verificationLevel: VerificationLevel.UNVERIFIED,\\n            registrationTimestamp: block.timestamp,\\n            lastUpdateTimestamp: block.timestamp,\\n            isActive: true,\\n            reputationScore: 0,\\n            ipfsMetadata: \\\"\\\"\\n        });\\n\\n        // Update mappings\\n        walletToCitizenId[msg.sender] = newCitizenId;\\n        ensNameToCitizenId[autoEnsName] = newCitizenId;\\n        registeredEnsNames[autoEnsName] = true;\\n\\n        emit CitizenRegistered(newCitizenId, msg.sender, autoEnsName, VerificationLevel.UNVERIFIED);\\n    }\\n\\n    /**\\n     * @dev Update citizen's EFP verification data\\n     * @param _efpTokenId New EFP token ID\\n     * @param _efpFollowers Updated follower count\\n     * @param _efpFollowing Updated following count\\n     */\\n    function updateEFPVerification(\\n        string memory _efpTokenId,\\n        uint256 _efpFollowers,\\n        uint256 _efpFollowing\\n    ) external onlyRegisteredCitizen {\\n        uint256 citizenId = walletToCitizenId[msg.sender];\\n        CitizenProfile storage citizen = citizens[citizenId];\\n\\n        VerificationLevel oldLevel = citizen.verificationLevel;\\n        VerificationLevel newLevel = _determineVerificationLevel(_efpFollowers, _efpFollowing);\\n\\n        // Update EFP data\\n        citizen.efpTokenId = _efpTokenId;\\n        citizen.efpFollowers = _efpFollowers;\\n        citizen.efpFollowing = _efpFollowing;\\n        citizen.verificationLevel = newLevel;\\n        citizen.lastUpdateTimestamp = block.timestamp;\\n\\n        if (oldLevel != newLevel) {\\n            emit CitizenVerificationUpdated(citizenId, msg.sender, oldLevel, newLevel);\\n        }\\n\\n        emit CitizenProfileUpdated(citizenId, msg.sender, citizen.ensName, _efpTokenId);\\n    }\\n\\n    /**\\n     * @dev Update citizen's ENS name\\n     * @param _ensName New ENS name\\n     */\\n    function updateENSName(string memory _ensName) external onlyRegisteredCitizen {\\n        require(bytes(_ensName).length > 0, \\\"CitizenRegistry: ENS name cannot be empty\\\");\\n        require(!registeredEnsNames[_ensName], \\\"CitizenRegistry: ENS name already registered\\\");\\n\\n        uint256 citizenId = walletToCitizenId[msg.sender];\\n        CitizenProfile storage citizen = citizens[citizenId];\\n\\n        // Remove old ENS name from registry\\n        if (bytes(citizen.ensName).length > 0) {\\n            registeredEnsNames[citizen.ensName] = false;\\n            delete ensNameToCitizenId[citizen.ensName];\\n        }\\n\\n        // Set new ENS name\\n        citizen.ensName = _ensName;\\n        citizen.lastUpdateTimestamp = block.timestamp;\\n        ensNameToCitizenId[_ensName] = citizenId;\\n        registeredEnsNames[_ensName] = true;\\n\\n        emit CitizenProfileUpdated(citizenId, msg.sender, _ensName, citizen.efpTokenId);\\n    }\\n\\n    /**\\n     * @dev Update reputation score (only called by reputation contract)\\n     * @param _citizenId Citizen ID\\n     * @param _reputationScore New reputation score\\n     */\\n    function updateReputationScore(\\n        uint256 _citizenId,\\n        uint256 _reputationScore\\n    ) external validCitizenId(_citizenId) {\\n        // TODO: Add access control for reputation contract\\n        // require(msg.sender == reputationContract, \\\"CitizenRegistry: Only reputation contract can update scores\\\");\\n        \\n        citizens[_citizenId].reputationScore = _reputationScore;\\n        citizens[_citizenId].lastUpdateTimestamp = block.timestamp;\\n\\n        // Check if reputation score qualifies for premium verification\\n        if (_reputationScore >= 1000 && citizens[_citizenId].verificationLevel != VerificationLevel.PREMIUM) {\\n            VerificationLevel oldLevel = citizens[_citizenId].verificationLevel;\\n            citizens[_citizenId].verificationLevel = VerificationLevel.PREMIUM;\\n            emit CitizenVerificationUpdated(\\n                _citizenId, \\n                citizens[_citizenId].walletAddress, \\n                oldLevel, \\n                VerificationLevel.PREMIUM\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Deactivate a citizen account (admin function)\\n     * @param _citizenId Citizen ID to deactivate\\n     */\\n    function deactivateCitizen(uint256 _citizenId) external onlyOwner validCitizenId(_citizenId) {\\n        citizens[_citizenId].isActive = false;\\n        citizens[_citizenId].lastUpdateTimestamp = block.timestamp;\\n\\n        emit CitizenDeactivated(\\n            _citizenId,\\n            citizens[_citizenId].walletAddress,\\n            msg.sender\\n        );\\n    }\\n\\n    /**\\n     * @dev Reactivate a citizen account (admin function)\\n     * @param _citizenId Citizen ID to reactivate\\n     */\\n    function reactivateCitizen(uint256 _citizenId) external onlyOwner validCitizenId(_citizenId) {\\n        citizens[_citizenId].isActive = true;\\n        citizens[_citizenId].lastUpdateTimestamp = block.timestamp;\\n    }\\n\\n    // View functions\\n    function getCitizen(uint256 _citizenId) external view validCitizenId(_citizenId) returns (CitizenProfile memory) {\\n        return citizens[_citizenId];\\n    }\\n\\n    function getCitizenByWallet(address _wallet) external view returns (CitizenProfile memory) {\\n        uint256 citizenId = walletToCitizenId[_wallet];\\n        require(citizenId != 0, \\\"CitizenRegistry: Wallet not registered\\\");\\n        return citizens[citizenId];\\n    }\\n\\n    function getCitizenByENS(string memory _ensName) external view returns (CitizenProfile memory) {\\n        uint256 citizenId = ensNameToCitizenId[_ensName];\\n        require(citizenId != 0, \\\"CitizenRegistry: ENS name not registered\\\");\\n        return citizens[citizenId];\\n    }\\n\\n    function isCitizenRegistered(address _wallet) external view returns (bool) {\\n        return walletToCitizenId[_wallet] != 0 && citizens[walletToCitizenId[_wallet]].isActive;\\n    }\\n\\n    function getTotalCitizens() external view returns (uint256) {\\n        return _citizenIdCounter;\\n    }\\n\\n    function getVerificationLevel(address _wallet) external view returns (VerificationLevel) {\\n        uint256 citizenId = walletToCitizenId[_wallet];\\n        require(citizenId != 0, \\\"CitizenRegistry: Wallet not registered\\\");\\n        return citizens[citizenId].verificationLevel;\\n    }\\n\\n    function isENSNameAvailable(string memory _ensName) external view returns (bool) {\\n        return !registeredEnsNames[_ensName];\\n    }\\n\\n    // Internal functions\\n    function _determineVerificationLevel(uint256 _followers, uint256 _following) internal pure returns (VerificationLevel) {\\n        if (_followers == 0 && _following == 0) {\\n            return VerificationLevel.UNVERIFIED;\\n        } else if (_followers < 50) {\\n            return VerificationLevel.BASIC;\\n        } else {\\n            return VerificationLevel.VERIFIED;\\n        }\\n    }\\n\\n    // Batch operations for efficiency\\n    function getCitizensBatch(uint256[] memory _citizenIds) \\n        external \\n        view \\n        returns (CitizenProfile[] memory) \\n    {\\n        CitizenProfile[] memory profiles = new CitizenProfile[](_citizenIds.length);\\n        for (uint256 i = 0; i < _citizenIds.length; i++) {\\n            if (_citizenIds[i] > 0 && _citizenIds[i] <= _citizenIdCounter) {\\n                profiles[i] = citizens[_citizenIds[i]];\\n            }\\n        }\\n        return profiles;\\n    }\\n\\n    function getActiveCitizensCount() external view returns (uint256) {\\n        uint256 activeCount = 0;\\n        for (uint256 i = 1; i <= _citizenIdCounter; i++) {\\n            if (citizens[i].isActive) {\\n                activeCount++;\\n            }\\n        }\\n        return activeCount;\\n    }\\n}\",\"keccak256\":\"0x558f50048caa6b475ee31972fae16eee3985777f19dbd9882a6d86277223d533\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080346100c157601f620028e838819003918201601f19168301916001600160401b038311848410176100c6578084926020946040528339810103126100c157516001600160a01b0390818116908190036100c15780156100a857600080546001600160a01b03198116831782556040519316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a36001805561280b9081620000dd8239f35b604051631e4fbdf760e01b815260006004820152602490fd5b600080fd5b634e487b7160e01b600052604160045260246000fdfe6080604052600436101561001257600080fd5b60003560e01c806309a34f001461203557806318c212f014611f3c5780631e4c935814611f1e57806320e2153514611eba5780632e3b326814611e545780636354d72014611bc457806365caaecc146117c3578063715018a61461176a57806380e6859414611700578063812af68e14610fc65780638914a8a014610eb85780638da5cb5b14610e8f5780639549aae814610e415780639fe3b6a514610daf578063addee81714610d4e578063b1f72a0b14610d01578063c594d7ba14610aab578063ce41f59f14610a4f578063d72e35b4146103fa578063e19ec61e146102e6578063f2fde38b1461025b578063f59751741461021d5763fdf488f71461011957600080fd5b34610218576040366003190112610218576004356024358115158061020c575b61014290612684565b8160005260046020526103e860406000209180600a840155426008840155101590816101da575b5061017057005b8060005260046020526040600020907fd74bfb0b5babd68e78b35e283fa08d4b042d288c02f068696874cb188dfef4b8604060ff6101d060068601958654966003841989161790556001808060a01b0391015416958351928391166122b4565b60036020820152a3005b60ff9150600601541660048110156101f6576003141538610169565b634e487b7160e01b600052602160045260246000fd5b50600254821115610139565b600080fd5b34610218576020366003190112610218576004356001600160a01b038116908190036102185760005260036020526020604060002054604051908152f35b34610218576020366003190112610218576004356001600160a01b03818116918290036102185761028a6123e1565b81156102cd57600054826001600160601b0360a01b821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3005b604051631e4fbdf760e01b815260006004820152602490fd5b3461021857602080600319360112610218576001600160a01b039060043582811690819003610218576103176126dc565b5060005260038152604060002054610330811515612735565b600052600481526103dc600b60406000206040519461034e8661216e565b8154865260018201541684860152610368600282016121c6565b6040860152610379600382016121c6565b606086015260048101546080860152600581015460a08601526103a660ff60068301541660c087016124dc565b600781015460e0860152600881015461010086015260ff6009820154161515610120860152600a810154610140860152016121c6565b6101608301526103f6604051928284938452830190612317565b0390f35b346102185760a0366003190112610218576004356001600160401b0381116102185761042a9036906004016122c1565b6024356001600160401b038111610218576104499036906004016122c1565b6084356001600160401b038111610218576104689036906004016122c1565b91610471612500565b3360005260036020526104896040600020541561240d565b805180610a1d575b5061049d6002546124cd565b91826002556104b0606435604435612790565b93604051916104be8361216e565b8483523360208401528360408401526060830152604435608083015260643560a08301526104ef8560c084016124dc565b4260e083015242610100830152600161012083015260006101408301526101608201528260005260046020526040600020815181556001810160018060a01b036020840151166001600160601b0360a01b82541617905560408201518051906001600160401b03821161086757819061056b6002850154612134565b601f81116109ca575b50602090601f83116001146109585760009261094d575b50508160011b916000199060031b1c19161760028201555b60608201518051906001600160401b0382116108675781906105c86003850154612134565b601f81116108fa575b50602090601f83116001146108885760009261087d575b50508160011b916000199060031b1c19161760038201555b6080820151600482015560a0820151600582015560c082015160048110156101f65781610635600b92600661016095016124e8565b60e08401516007820155610100840151600882015561066a6101208501511515600983019060ff801983541691151516179055565b610140840151600a820155019101518051906001600160401b038211610867576106948354612134565b601f811161081f575b50602090601f8311600114610794577f920464f5faa68fb79b490309b9a98f520ba3669313022ca18fcb47a7e3cd760e9493929160009183610789575b50508160011b916000199060031b1c19161790555b33600052600360205282604060002055805180610737575b5061072b6107206040519260408452604084019061228f565b9460208301906122b4565b8033940390a360018055005b602061076e918560405183818188019461075281838861226c565b810160058152030190205560405180938192865192839161226c565b81016006815203019020600160ff1982541617905584610707565b0151905087806106da565b90601f198316918460005260206000209260005b81811061080757509160019391857f920464f5faa68fb79b490309b9a98f520ba3669313022ca18fcb47a7e3cd760e98979694106107ee575b505050811b0190556106ef565b015160001960f88460031b161c191690558780806107e1565b929360206001819287860151815501950193016107a8565b836000526020600020601f840160051c8101916020851061085d575b601f0160051c01905b818110610851575061069d565b60008155600101610844565b909150819061083b565b634e487b7160e01b600052604160045260246000fd5b0151905087806105e8565b9250600384016000526020600020906000935b601f19841685106108df576001945083601f198116106108c6575b505050811b016003820155610600565b015160001960f88460031b161c191690558780806108b6565b8181015183556020948501946001909301929091019061089b565b909150600384016000526020600020601f840160051c810160208510610946575b90849392915b601f830160051c820181106109375750506105d1565b60008155859450600101610921565b508061091b565b01519050878061058b565b9250600284016000526020600020906000935b601f19841685106109af576001945083601f19811610610996575b505050811b0160028201556105a3565b015160001960f88460031b161c19169055878080610986565b8181015183556020948501946001909301929091019061096b565b909150600284016000526020600020601f840160051c810160208510610a16575b90849392915b601f830160051c82018110610a07575050610574565b600081558594506001016109f1565b50806109eb565b60ff610a4991602060405182610a37829483858a0161226c565b8101600681520301902054161561246c565b83610491565b34610218576020366003190112610218576004356001600160401b03811161021857610a986020610a85819336906004016122c1565b816040519382858094519384920161226c565b8101600581520301902054604051908152f35b346102185760208060031936011261021857600435906001600160401b038211610218573660238301121561021857816004013591610ae9836123ca565b90610af760405192836121a5565b8382528282016024600595861b83010191368311610218576024859101915b838310610cf157505050508051610b2c816123ca565b90610b3a60405192836121a5565b808252610b49601f19916123ca565b018360005b828110610cdb5750505060005b8251811015610c7d5780610b72610b8492856127c1565b51151580610c67575b610b89576124cd565b610b5b565b610b9381856127c1565b51600052600485526040600020610c46600b60405192610bb28461216e565b8054845260018101546001600160a01b031689850152610bd4600282016121c6565b6040850152610be5600382016121c6565b6060850152600481015460808501528981015460a085015260ff610c128160068401541660c087016124dc565b600782015460e086015260088201546101008601526009820154161515610120850152600a810154610140850152016121c6565b610160820152610c5682856127c1565b52610c6181846127c1565b506124cd565b50610c7281856127c1565b516002541015610b7b565b50905060405191808301818452825180915281604082818701971b8601019301916000955b828710610caf5785850386f35b909192938280610ccb600193603f198a82030186528851612317565b9601920196019592919092610ca2565b610ce36126dc565b828286010152018490610b4e565b8235815291810191859101610b16565b34610218576020366003190112610218576004356001600160401b0381116102185760ff610d396020610a85819436906004016122c1565b81016006815203019020541615604051908152f35b3461021857602036600319011261021857600435610d6a6123e1565b80151580610da3575b610d7c90612684565b6000526004602052604060002060098101600160ff19825416179055600842910155600080f35b50600254811115610d73565b3461021857602036600319011261021857600435610dcb6123e1565b80151580610e35575b610ddd90612684565b600081815260046020526040812060098101805460ff191690554260088201556001015433926001600160a01b03909116917f296cc3bd236e3f2dc6c8d34b3aabd323efbaba1147f36d96fb62a0c632b7f7079080a4005b50600254811115610dd4565b34610218576020366003190112610218576004356001600160401b0381116102185760ff610e796020610a85819436906004016122c1565b8101600681520301902054166040519015158152f35b34610218576000366003190112610218576000546040516001600160a01b039091168152602090f35b3461021857602036600319011261021857600435610ed46126dc565b5080151580610fba575b610ee790612684565b60005260046020526103f66040600020610fa0600b60405192610f098461216e565b8054845260018101546001600160a01b03166020850152610f2c600282016121c6565b6040850152610f3d600382016121c6565b606085015260048101546080850152600581015460a0850152610f6a60ff60068301541660c086016124dc565b600781015460e0850152600881015461010085015260ff6009820154161515610120850152600a810154610140850152016121c6565b610160820152604051918291602083526020830190612317565b50600254811115610ede565b3461021857600036600319011261021857610fdf612500565b336000526003602052610ff76040600020541561240d565b62ffffff33168060405191604083018381106001600160401b038211176108675760405260088352602083019160203684378351156116ea57603083538351600110156116ea576078602185015360075b6001811161168d575061166e576040516631b4ba34bd32b760c91b602082015283516110a890603590839061108181602784018961226c565b81016d05cc6d2e8d2e0e4dedecc5ccae8d60931b60278201520360158101845201826121a5565b60ff60405160208184516110bf818385890161226c565b810160068152030190205416611613576110da6002546124cd565b9081600255604051916110ec8361216e565b8083523360208401528160408401526040516111078161218a565b60008152606084015260006080840152600060a0840152600060c08401524260e0840152426101008401526001610120840152600061014084015260405161114e8161218a565b600081526101608401528060005260046020526040600020835181556001810160018060a01b036020860151166001600160601b0360a01b82541617905560408401518051906001600160401b0382116108675781906111b16002850154612134565b601f81116115c0575b50602090601f831160011461154e57600092611543575b50508160011b916000199060031b1c19161760028201555b60608401518051906001600160401b03821161086757819061120e6003850154612134565b601f81116114f0575b50602090601f831160011461147e57600092611473575b50508160011b916000199060031b1c19161760038201555b6080840151600482015560a0840151600582015560c084015160048110156101f6578161127b600b92600661016095016124e8565b60e0860151600782015561010086015160088201556112b06101208701511515600983019060ff801983541691151516179055565b610140860151600a820155019301519283516001600160401b038111610867576112da8254612134565b601f811161142b575b50602094601f82116001146113c5579481929394956000926113ba575b50508160011b916000199060031b1c19161790555b3360005260036020528060406000205580604051602081855161133b8183858a0161226c565b8101600581520301902055604051602081845161135b818385890161226c565b81016006815203019020600160ff198254161790557f920464f5faa68fb79b490309b9a98f520ba3669313022ca18fcb47a7e3cd760e6113a66040519360408552604085019061228f565b92600060208201528033940390a360018055005b015190508580611300565b601f198216958360005260206000209160005b888110611413575083600195969798106113fa575b505050811b019055611315565b015160001960f88460031b161c191690558580806113ed565b919260206001819286850151815501940192016113d8565b826000526020600020601f830160051c81019160208410611469575b601f0160051c01905b81811061145d57506112e3565b60008155600101611450565b9091508190611447565b01519050868061122e565b9250600384016000526020600020906000935b601f19841685106114d5576001945083601f198116106114bc575b505050811b016003820155611246565b015160001960f88460031b161c191690558680806114ac565b81810151835560209485019460019093019290910190611491565b909150600384016000526020600020601f840160051c81016020851061153c575b90849392915b601f830160051c8201811061152d575050611217565b60008155859450600101611517565b5080611511565b0151905086806111d1565b9250600284016000526020600020906000935b601f19841685106115a5576001945083601f1981161061158c575b505050811b0160028201556111e9565b015160001960f88460031b161c1916905586808061157c565b81810151835560209485019460019093019290910190611561565b909150600284016000526020600020601f840160051c81016020851061160c575b90849392915b601f830160051c820181106115fd5750506111ba565b600081558594506001016115e7565b50806115e1565b60405162461bcd60e51b815260206004820152602d60248201527f436974697a656e52656769737472793a2047656e65726174656420454e53206e60448201526c30b6b29031b7b63634b9b4b7b760991b6064820152608490fd5b6044906040519063e22e27eb60e01b8252600482015260036024820152fd5b90600f811660108110156116ea5785518310156116ea576f181899199a1a9b1b9c1cb0b131b232b360811b901a8583016020015360041c9080156116d45760001901611048565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b346102185760003660031901126102185760006001600254905b8181111561172d57602083604051908152f35b80600052600460205260ff60096040600020015416611755575b611750906124cd565b61171a565b91611762611750916124cd565b929050611747565b34610218576000366003190112610218576117836123e1565b600080546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b3461021857602080600319360112610218576001600160401b0390600435828111610218576117f69036906004016122c1565b336000526003918281526118106040600020541515612523565b336000528281526040600020546000526004815261183860ff6009604060002001541661258b565b815115611b6e576040519261185c60ff845195848181880198610a3781838c61226c565b336000528082526040600020549384600052600483526040600020956002870190815461188881612134565b611a5b575b508551908111610867576118a18254612134565b601f8111611a15575b5084601f82116001146119835785611973946119639794847f590d1cd57ebd1d5372aa934bbd03af2e54f157676b83a80a6f5d9ee31834e9609a989561193a95600091611978575b508160011b9160001990881b1c19161790555b4260088c01558960405183818a5161191e81838861226c565b810160058152030190205560405180938192895192839161226c565b81016006815203019020600160ff1982541617905560405194859460408652604086019061228f565b91848303908501523397016125ee565b0390a3005b90508901518e6118f2565b601f1982169083600052866000209160005b8181106119fe575094879460018561193a956119639b957f590d1cd57ebd1d5372aa934bbd03af2e54f157676b83a80a6f5d9ee31834e9609d9b986119739b106119e6575b5050811b019055611905565b8b0151600019838a1b60f8161c191690558e806119da565b91928860018192868d015181550194019201611995565b8260005285600020601f830160051c810191878410611a51575b601f0160051c01905b818110611a4557506118aa565b60008155600101611a38565b9091508190611a2f565b60405186816000611a6b85612134565b600195808716908115611b595750600114611b21575b50600681520301902060ff199081815416905586604051916000938654611aa781612134565b92818316918215611b0c575050600114611ad1575b5050818360056000955203019020558861188d565b90919293508560005282600020906000915b838310611af95750505082019190816000611abc565b8054868401528a94909201918101611ae3565b16855250508015150282019250816000611abc565b90508660005282600020856000915b838310611b425750505081018d611a81565b8054878401528c9587955090920191879101611b30565b60ff191684525080151502820190508d611a81565b6084906040519062461bcd60e51b82526004820152602960248201527f436974697a656e52656769737472793a20454e53206e616d652063616e6e6f7460448201526820626520656d70747960b81b6064820152fd5b34610218576060366003190112610218576001600160401b0360043581811161021857611bf59036906004016122c1565b90336000526003602052611c0f6040600020541515612523565b3360005260036020526040600020546000526004602052611c3a60ff6009604060002001541661258b565b3360005260036020526040600020549081600052600460205260406000209060ff60068301541691611c70604435602435612790565b91855190811161086757611c876003830154612134565b601f8111611e0d575b50806020601f8211600114611da057600091611d95575b508160011b916000199060031b1c19161760038201555b60243560048201556044356005820155611cdb82600683016124e8565b42600882015560048210156101f65760048310156101f6578282611d3d937f590d1cd57ebd1d5372aa934bbd03af2e54f157676b83a80a6f5d9ee31834e9609503611d4c575b50506119736040519283926040845260026040850191016125ee565b8281036020840152339661228f565b611d6790611d5d60405180946122b4565b60208301906122b4565b847fd74bfb0b5babd68e78b35e283fa08d4b042d288c02f068696874cb188dfef4b860403393a38580611d21565b905086015187611ca7565b91506003830160005260206000206000925b601f1983168410611df5576001935082601f19811610611ddc575b5050811b016003820155611cbe565b88015160001960f88460031b161c191690558780611dcd565b88810151825560209384019360019092019101611db2565b600383016000526020600020601f830160051c810160208410611e4d575b601f830160051c82018110611e41575050611c90565b60008155600101611e2b565b5080611e2b565b34610218576020366003190112610218576004356001600160a01b0381169081900361021857600052600360205260406000205480151580611e9e575b6020906040519015158152f35b506000526004602052602060ff60096040600020015416611e91565b34610218576020366003190112610218576004356001600160a01b03811690819003610218576000526003602052604060002054611ef9811515612735565b6000526004602052602060ff60066040600020015416611f1c60405180926122b4565bf35b34610218576000366003190112610218576020600254604051908152f35b3461021857602080600319360112610218576004356001600160401b0381116102185781611f71611f8d9236906004016122c1565b611f796126dc565b50816040519382858094519384920161226c565b81016005815203019020548015611fdf57600052600481526040600020906103dc600b60405193611fbd8561216e565b8054855260018101546001600160a01b031684860152610368600282016121c6565b60405162461bcd60e51b815260048101839052602860248201527f436974697a656e52656769737472793a20454e53206e616d65206e6f7420726560448201526719da5cdd195c995960c21b6064820152608490fd5b346102185760203660031901126102185760048035600090815260209190915260409020805460018201546001600160a01b031691612076600282016121c6565b90612083600382016121c6565b906004810154916005820154600683015460ff16600784015490600885015492600986015460ff1694600a87015496600b016120be906121c6565b986040519b8c9b8c5260208c01526101808060408d01528b016120e09161228f565b8a810360608c01526120f19161228f565b9660808a015260a089015260c08801612109916122b4565b60e087015261010086015215156101208501526101408401528281036101608401526103f69161228f565b90600182811c92168015612164575b602083101461214e57565b634e487b7160e01b600052602260045260246000fd5b91607f1691612143565b61018081019081106001600160401b0382111761086757604052565b602081019081106001600160401b0382111761086757604052565b90601f801991011681019081106001600160401b0382111761086757604052565b90604051918260008254926121da84612134565b9081845260019485811690816000146122495750600114612206575b5050612204925003836121a5565b565b9093915060005260209081600020936000915b818310612231575050612204935082010138806121f6565b85548884018501529485019487945091830191612219565b91505061220494506020925060ff191682840152151560051b82010138806121f6565b60005b83811061227f5750506000910152565b818101518382015260200161226f565b906020916122a88151809281855285808601910161226c565b601f01601f1916010190565b9060048210156101f65752565b81601f82011215610218578035906001600160401b03821161086757604051926122f5601f8401601f1916602001856121a5565b8284526020838301011161021857816000926020809301838601378301015290565b906123c7918051825260018060a01b03602082015116602083015261236061234e604083015161018080604087015285019061228f565b6060830151848203606086015261228f565b916080820151608082015260a082015160a082015261238760c083015160c08301906122b4565b60e082015160e08201526101008083015190820152610120808301511515908201526101408083015190820152610160809201519181840391015261228f565b90565b6001600160401b0381116108675760051b60200190565b6000546001600160a01b031633036123f557565b60405163118cdaa760e01b8152336004820152602490fd5b1561241457565b60405162461bcd60e51b815260206004820152602a60248201527f436974697a656e52656769737472793a2057616c6c657420616c7265616479206044820152691c9959da5cdd195c995960b21b6064820152608490fd5b1561247357565b60405162461bcd60e51b815260206004820152602c60248201527f436974697a656e52656769737472793a20454e53206e616d6520616c7265616460448201526b1e481c9959da5cdd195c995960a21b6064820152608490fd5b60001981146116d45760010190565b60048210156101f65752565b9060048110156101f65760ff80198354169116179055565b600260015414612511576002600155565b604051633ee5aeb560e01b8152600490fd5b1561252a57565b60405162461bcd60e51b815260206004820152603360248201527f436974697a656e52656769737472793a2043616c6c6572206973206e6f742061604482015272103932b3b4b9ba32b932b21031b4ba34bd32b760691b6064820152608490fd5b1561259257565b60405162461bcd60e51b815260206004820152602e60248201527f436974697a656e52656769737472793a20436974697a656e206163636f756e7460448201526d206973206e6f742061637469766560901b6064820152608490fd5b90600092918054916125ff83612134565b9182825260019384811690816000146126615750600114612621575b50505050565b90919394506000526020928360002092846000945b83861061264d57505050500101903880808061261b565b805485870183015294019385908201612636565b9294505050602093945060ff191683830152151560051b0101903880808061261b565b1561268b57565b60405162461bcd60e51b815260206004820152602360248201527f436974697a656e52656769737472793a20496e76616c696420636974697a656e60448201526208125160ea1b6064820152608490fd5b604051906126e98261216e565b606061016083600080825280602083015283604083015283808301528060808301528060a08301528060c08301528060e083015280610100830152806101208301526101408201520152565b1561273c57565b60405162461bcd60e51b815260206004820152602660248201527f436974697a656e52656769737472793a2057616c6c6574206e6f7420726567696044820152651cdd195c995960d21b6064820152608490fd5b90811590816127b8575b50156127a65750600090565b603211156127b357600190565b600290565b9050153861279a565b80518210156116ea5760209160051b01019056fea2646970667358221220ee29c49c9b651f5cb20ce33e3c4be84983a3f3ff76b2660d1ccbec372fdf672f64736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b60003560e01c806309a34f001461203557806318c212f014611f3c5780631e4c935814611f1e57806320e2153514611eba5780632e3b326814611e545780636354d72014611bc457806365caaecc146117c3578063715018a61461176a57806380e6859414611700578063812af68e14610fc65780638914a8a014610eb85780638da5cb5b14610e8f5780639549aae814610e415780639fe3b6a514610daf578063addee81714610d4e578063b1f72a0b14610d01578063c594d7ba14610aab578063ce41f59f14610a4f578063d72e35b4146103fa578063e19ec61e146102e6578063f2fde38b1461025b578063f59751741461021d5763fdf488f71461011957600080fd5b34610218576040366003190112610218576004356024358115158061020c575b61014290612684565b8160005260046020526103e860406000209180600a840155426008840155101590816101da575b5061017057005b8060005260046020526040600020907fd74bfb0b5babd68e78b35e283fa08d4b042d288c02f068696874cb188dfef4b8604060ff6101d060068601958654966003841989161790556001808060a01b0391015416958351928391166122b4565b60036020820152a3005b60ff9150600601541660048110156101f6576003141538610169565b634e487b7160e01b600052602160045260246000fd5b50600254821115610139565b600080fd5b34610218576020366003190112610218576004356001600160a01b038116908190036102185760005260036020526020604060002054604051908152f35b34610218576020366003190112610218576004356001600160a01b03818116918290036102185761028a6123e1565b81156102cd57600054826001600160601b0360a01b821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3005b604051631e4fbdf760e01b815260006004820152602490fd5b3461021857602080600319360112610218576001600160a01b039060043582811690819003610218576103176126dc565b5060005260038152604060002054610330811515612735565b600052600481526103dc600b60406000206040519461034e8661216e565b8154865260018201541684860152610368600282016121c6565b6040860152610379600382016121c6565b606086015260048101546080860152600581015460a08601526103a660ff60068301541660c087016124dc565b600781015460e0860152600881015461010086015260ff6009820154161515610120860152600a810154610140860152016121c6565b6101608301526103f6604051928284938452830190612317565b0390f35b346102185760a0366003190112610218576004356001600160401b0381116102185761042a9036906004016122c1565b6024356001600160401b038111610218576104499036906004016122c1565b6084356001600160401b038111610218576104689036906004016122c1565b91610471612500565b3360005260036020526104896040600020541561240d565b805180610a1d575b5061049d6002546124cd565b91826002556104b0606435604435612790565b93604051916104be8361216e565b8483523360208401528360408401526060830152604435608083015260643560a08301526104ef8560c084016124dc565b4260e083015242610100830152600161012083015260006101408301526101608201528260005260046020526040600020815181556001810160018060a01b036020840151166001600160601b0360a01b82541617905560408201518051906001600160401b03821161086757819061056b6002850154612134565b601f81116109ca575b50602090601f83116001146109585760009261094d575b50508160011b916000199060031b1c19161760028201555b60608201518051906001600160401b0382116108675781906105c86003850154612134565b601f81116108fa575b50602090601f83116001146108885760009261087d575b50508160011b916000199060031b1c19161760038201555b6080820151600482015560a0820151600582015560c082015160048110156101f65781610635600b92600661016095016124e8565b60e08401516007820155610100840151600882015561066a6101208501511515600983019060ff801983541691151516179055565b610140840151600a820155019101518051906001600160401b038211610867576106948354612134565b601f811161081f575b50602090601f8311600114610794577f920464f5faa68fb79b490309b9a98f520ba3669313022ca18fcb47a7e3cd760e9493929160009183610789575b50508160011b916000199060031b1c19161790555b33600052600360205282604060002055805180610737575b5061072b6107206040519260408452604084019061228f565b9460208301906122b4565b8033940390a360018055005b602061076e918560405183818188019461075281838861226c565b810160058152030190205560405180938192865192839161226c565b81016006815203019020600160ff1982541617905584610707565b0151905087806106da565b90601f198316918460005260206000209260005b81811061080757509160019391857f920464f5faa68fb79b490309b9a98f520ba3669313022ca18fcb47a7e3cd760e98979694106107ee575b505050811b0190556106ef565b015160001960f88460031b161c191690558780806107e1565b929360206001819287860151815501950193016107a8565b836000526020600020601f840160051c8101916020851061085d575b601f0160051c01905b818110610851575061069d565b60008155600101610844565b909150819061083b565b634e487b7160e01b600052604160045260246000fd5b0151905087806105e8565b9250600384016000526020600020906000935b601f19841685106108df576001945083601f198116106108c6575b505050811b016003820155610600565b015160001960f88460031b161c191690558780806108b6565b8181015183556020948501946001909301929091019061089b565b909150600384016000526020600020601f840160051c810160208510610946575b90849392915b601f830160051c820181106109375750506105d1565b60008155859450600101610921565b508061091b565b01519050878061058b565b9250600284016000526020600020906000935b601f19841685106109af576001945083601f19811610610996575b505050811b0160028201556105a3565b015160001960f88460031b161c19169055878080610986565b8181015183556020948501946001909301929091019061096b565b909150600284016000526020600020601f840160051c810160208510610a16575b90849392915b601f830160051c82018110610a07575050610574565b600081558594506001016109f1565b50806109eb565b60ff610a4991602060405182610a37829483858a0161226c565b8101600681520301902054161561246c565b83610491565b34610218576020366003190112610218576004356001600160401b03811161021857610a986020610a85819336906004016122c1565b816040519382858094519384920161226c565b8101600581520301902054604051908152f35b346102185760208060031936011261021857600435906001600160401b038211610218573660238301121561021857816004013591610ae9836123ca565b90610af760405192836121a5565b8382528282016024600595861b83010191368311610218576024859101915b838310610cf157505050508051610b2c816123ca565b90610b3a60405192836121a5565b808252610b49601f19916123ca565b018360005b828110610cdb5750505060005b8251811015610c7d5780610b72610b8492856127c1565b51151580610c67575b610b89576124cd565b610b5b565b610b9381856127c1565b51600052600485526040600020610c46600b60405192610bb28461216e565b8054845260018101546001600160a01b031689850152610bd4600282016121c6565b6040850152610be5600382016121c6565b6060850152600481015460808501528981015460a085015260ff610c128160068401541660c087016124dc565b600782015460e086015260088201546101008601526009820154161515610120850152600a810154610140850152016121c6565b610160820152610c5682856127c1565b52610c6181846127c1565b506124cd565b50610c7281856127c1565b516002541015610b7b565b50905060405191808301818452825180915281604082818701971b8601019301916000955b828710610caf5785850386f35b909192938280610ccb600193603f198a82030186528851612317565b9601920196019592919092610ca2565b610ce36126dc565b828286010152018490610b4e565b8235815291810191859101610b16565b34610218576020366003190112610218576004356001600160401b0381116102185760ff610d396020610a85819436906004016122c1565b81016006815203019020541615604051908152f35b3461021857602036600319011261021857600435610d6a6123e1565b80151580610da3575b610d7c90612684565b6000526004602052604060002060098101600160ff19825416179055600842910155600080f35b50600254811115610d73565b3461021857602036600319011261021857600435610dcb6123e1565b80151580610e35575b610ddd90612684565b600081815260046020526040812060098101805460ff191690554260088201556001015433926001600160a01b03909116917f296cc3bd236e3f2dc6c8d34b3aabd323efbaba1147f36d96fb62a0c632b7f7079080a4005b50600254811115610dd4565b34610218576020366003190112610218576004356001600160401b0381116102185760ff610e796020610a85819436906004016122c1565b8101600681520301902054166040519015158152f35b34610218576000366003190112610218576000546040516001600160a01b039091168152602090f35b3461021857602036600319011261021857600435610ed46126dc565b5080151580610fba575b610ee790612684565b60005260046020526103f66040600020610fa0600b60405192610f098461216e565b8054845260018101546001600160a01b03166020850152610f2c600282016121c6565b6040850152610f3d600382016121c6565b606085015260048101546080850152600581015460a0850152610f6a60ff60068301541660c086016124dc565b600781015460e0850152600881015461010085015260ff6009820154161515610120850152600a810154610140850152016121c6565b610160820152604051918291602083526020830190612317565b50600254811115610ede565b3461021857600036600319011261021857610fdf612500565b336000526003602052610ff76040600020541561240d565b62ffffff33168060405191604083018381106001600160401b038211176108675760405260088352602083019160203684378351156116ea57603083538351600110156116ea576078602185015360075b6001811161168d575061166e576040516631b4ba34bd32b760c91b602082015283516110a890603590839061108181602784018961226c565b81016d05cc6d2e8d2e0e4dedecc5ccae8d60931b60278201520360158101845201826121a5565b60ff60405160208184516110bf818385890161226c565b810160068152030190205416611613576110da6002546124cd565b9081600255604051916110ec8361216e565b8083523360208401528160408401526040516111078161218a565b60008152606084015260006080840152600060a0840152600060c08401524260e0840152426101008401526001610120840152600061014084015260405161114e8161218a565b600081526101608401528060005260046020526040600020835181556001810160018060a01b036020860151166001600160601b0360a01b82541617905560408401518051906001600160401b0382116108675781906111b16002850154612134565b601f81116115c0575b50602090601f831160011461154e57600092611543575b50508160011b916000199060031b1c19161760028201555b60608401518051906001600160401b03821161086757819061120e6003850154612134565b601f81116114f0575b50602090601f831160011461147e57600092611473575b50508160011b916000199060031b1c19161760038201555b6080840151600482015560a0840151600582015560c084015160048110156101f6578161127b600b92600661016095016124e8565b60e0860151600782015561010086015160088201556112b06101208701511515600983019060ff801983541691151516179055565b610140860151600a820155019301519283516001600160401b038111610867576112da8254612134565b601f811161142b575b50602094601f82116001146113c5579481929394956000926113ba575b50508160011b916000199060031b1c19161790555b3360005260036020528060406000205580604051602081855161133b8183858a0161226c565b8101600581520301902055604051602081845161135b818385890161226c565b81016006815203019020600160ff198254161790557f920464f5faa68fb79b490309b9a98f520ba3669313022ca18fcb47a7e3cd760e6113a66040519360408552604085019061228f565b92600060208201528033940390a360018055005b015190508580611300565b601f198216958360005260206000209160005b888110611413575083600195969798106113fa575b505050811b019055611315565b015160001960f88460031b161c191690558580806113ed565b919260206001819286850151815501940192016113d8565b826000526020600020601f830160051c81019160208410611469575b601f0160051c01905b81811061145d57506112e3565b60008155600101611450565b9091508190611447565b01519050868061122e565b9250600384016000526020600020906000935b601f19841685106114d5576001945083601f198116106114bc575b505050811b016003820155611246565b015160001960f88460031b161c191690558680806114ac565b81810151835560209485019460019093019290910190611491565b909150600384016000526020600020601f840160051c81016020851061153c575b90849392915b601f830160051c8201811061152d575050611217565b60008155859450600101611517565b5080611511565b0151905086806111d1565b9250600284016000526020600020906000935b601f19841685106115a5576001945083601f1981161061158c575b505050811b0160028201556111e9565b015160001960f88460031b161c1916905586808061157c565b81810151835560209485019460019093019290910190611561565b909150600284016000526020600020601f840160051c81016020851061160c575b90849392915b601f830160051c820181106115fd5750506111ba565b600081558594506001016115e7565b50806115e1565b60405162461bcd60e51b815260206004820152602d60248201527f436974697a656e52656769737472793a2047656e65726174656420454e53206e60448201526c30b6b29031b7b63634b9b4b7b760991b6064820152608490fd5b6044906040519063e22e27eb60e01b8252600482015260036024820152fd5b90600f811660108110156116ea5785518310156116ea576f181899199a1a9b1b9c1cb0b131b232b360811b901a8583016020015360041c9080156116d45760001901611048565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b346102185760003660031901126102185760006001600254905b8181111561172d57602083604051908152f35b80600052600460205260ff60096040600020015416611755575b611750906124cd565b61171a565b91611762611750916124cd565b929050611747565b34610218576000366003190112610218576117836123e1565b600080546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b3461021857602080600319360112610218576001600160401b0390600435828111610218576117f69036906004016122c1565b336000526003918281526118106040600020541515612523565b336000528281526040600020546000526004815261183860ff6009604060002001541661258b565b815115611b6e576040519261185c60ff845195848181880198610a3781838c61226c565b336000528082526040600020549384600052600483526040600020956002870190815461188881612134565b611a5b575b508551908111610867576118a18254612134565b601f8111611a15575b5084601f82116001146119835785611973946119639794847f590d1cd57ebd1d5372aa934bbd03af2e54f157676b83a80a6f5d9ee31834e9609a989561193a95600091611978575b508160011b9160001990881b1c19161790555b4260088c01558960405183818a5161191e81838861226c565b810160058152030190205560405180938192895192839161226c565b81016006815203019020600160ff1982541617905560405194859460408652604086019061228f565b91848303908501523397016125ee565b0390a3005b90508901518e6118f2565b601f1982169083600052866000209160005b8181106119fe575094879460018561193a956119639b957f590d1cd57ebd1d5372aa934bbd03af2e54f157676b83a80a6f5d9ee31834e9609d9b986119739b106119e6575b5050811b019055611905565b8b0151600019838a1b60f8161c191690558e806119da565b91928860018192868d015181550194019201611995565b8260005285600020601f830160051c810191878410611a51575b601f0160051c01905b818110611a4557506118aa565b60008155600101611a38565b9091508190611a2f565b60405186816000611a6b85612134565b600195808716908115611b595750600114611b21575b50600681520301902060ff199081815416905586604051916000938654611aa781612134565b92818316918215611b0c575050600114611ad1575b5050818360056000955203019020558861188d565b90919293508560005282600020906000915b838310611af95750505082019190816000611abc565b8054868401528a94909201918101611ae3565b16855250508015150282019250816000611abc565b90508660005282600020856000915b838310611b425750505081018d611a81565b8054878401528c9587955090920191879101611b30565b60ff191684525080151502820190508d611a81565b6084906040519062461bcd60e51b82526004820152602960248201527f436974697a656e52656769737472793a20454e53206e616d652063616e6e6f7460448201526820626520656d70747960b81b6064820152fd5b34610218576060366003190112610218576001600160401b0360043581811161021857611bf59036906004016122c1565b90336000526003602052611c0f6040600020541515612523565b3360005260036020526040600020546000526004602052611c3a60ff6009604060002001541661258b565b3360005260036020526040600020549081600052600460205260406000209060ff60068301541691611c70604435602435612790565b91855190811161086757611c876003830154612134565b601f8111611e0d575b50806020601f8211600114611da057600091611d95575b508160011b916000199060031b1c19161760038201555b60243560048201556044356005820155611cdb82600683016124e8565b42600882015560048210156101f65760048310156101f6578282611d3d937f590d1cd57ebd1d5372aa934bbd03af2e54f157676b83a80a6f5d9ee31834e9609503611d4c575b50506119736040519283926040845260026040850191016125ee565b8281036020840152339661228f565b611d6790611d5d60405180946122b4565b60208301906122b4565b847fd74bfb0b5babd68e78b35e283fa08d4b042d288c02f068696874cb188dfef4b860403393a38580611d21565b905086015187611ca7565b91506003830160005260206000206000925b601f1983168410611df5576001935082601f19811610611ddc575b5050811b016003820155611cbe565b88015160001960f88460031b161c191690558780611dcd565b88810151825560209384019360019092019101611db2565b600383016000526020600020601f830160051c810160208410611e4d575b601f830160051c82018110611e41575050611c90565b60008155600101611e2b565b5080611e2b565b34610218576020366003190112610218576004356001600160a01b0381169081900361021857600052600360205260406000205480151580611e9e575b6020906040519015158152f35b506000526004602052602060ff60096040600020015416611e91565b34610218576020366003190112610218576004356001600160a01b03811690819003610218576000526003602052604060002054611ef9811515612735565b6000526004602052602060ff60066040600020015416611f1c60405180926122b4565bf35b34610218576000366003190112610218576020600254604051908152f35b3461021857602080600319360112610218576004356001600160401b0381116102185781611f71611f8d9236906004016122c1565b611f796126dc565b50816040519382858094519384920161226c565b81016005815203019020548015611fdf57600052600481526040600020906103dc600b60405193611fbd8561216e565b8054855260018101546001600160a01b031684860152610368600282016121c6565b60405162461bcd60e51b815260048101839052602860248201527f436974697a656e52656769737472793a20454e53206e616d65206e6f7420726560448201526719da5cdd195c995960c21b6064820152608490fd5b346102185760203660031901126102185760048035600090815260209190915260409020805460018201546001600160a01b031691612076600282016121c6565b90612083600382016121c6565b906004810154916005820154600683015460ff16600784015490600885015492600986015460ff1694600a87015496600b016120be906121c6565b986040519b8c9b8c5260208c01526101808060408d01528b016120e09161228f565b8a810360608c01526120f19161228f565b9660808a015260a089015260c08801612109916122b4565b60e087015261010086015215156101208501526101408401528281036101608401526103f69161228f565b90600182811c92168015612164575b602083101461214e57565b634e487b7160e01b600052602260045260246000fd5b91607f1691612143565b61018081019081106001600160401b0382111761086757604052565b602081019081106001600160401b0382111761086757604052565b90601f801991011681019081106001600160401b0382111761086757604052565b90604051918260008254926121da84612134565b9081845260019485811690816000146122495750600114612206575b5050612204925003836121a5565b565b9093915060005260209081600020936000915b818310612231575050612204935082010138806121f6565b85548884018501529485019487945091830191612219565b91505061220494506020925060ff191682840152151560051b82010138806121f6565b60005b83811061227f5750506000910152565b818101518382015260200161226f565b906020916122a88151809281855285808601910161226c565b601f01601f1916010190565b9060048210156101f65752565b81601f82011215610218578035906001600160401b03821161086757604051926122f5601f8401601f1916602001856121a5565b8284526020838301011161021857816000926020809301838601378301015290565b906123c7918051825260018060a01b03602082015116602083015261236061234e604083015161018080604087015285019061228f565b6060830151848203606086015261228f565b916080820151608082015260a082015160a082015261238760c083015160c08301906122b4565b60e082015160e08201526101008083015190820152610120808301511515908201526101408083015190820152610160809201519181840391015261228f565b90565b6001600160401b0381116108675760051b60200190565b6000546001600160a01b031633036123f557565b60405163118cdaa760e01b8152336004820152602490fd5b1561241457565b60405162461bcd60e51b815260206004820152602a60248201527f436974697a656e52656769737472793a2057616c6c657420616c7265616479206044820152691c9959da5cdd195c995960b21b6064820152608490fd5b1561247357565b60405162461bcd60e51b815260206004820152602c60248201527f436974697a656e52656769737472793a20454e53206e616d6520616c7265616460448201526b1e481c9959da5cdd195c995960a21b6064820152608490fd5b60001981146116d45760010190565b60048210156101f65752565b9060048110156101f65760ff80198354169116179055565b600260015414612511576002600155565b604051633ee5aeb560e01b8152600490fd5b1561252a57565b60405162461bcd60e51b815260206004820152603360248201527f436974697a656e52656769737472793a2043616c6c6572206973206e6f742061604482015272103932b3b4b9ba32b932b21031b4ba34bd32b760691b6064820152608490fd5b1561259257565b60405162461bcd60e51b815260206004820152602e60248201527f436974697a656e52656769737472793a20436974697a656e206163636f756e7460448201526d206973206e6f742061637469766560901b6064820152608490fd5b90600092918054916125ff83612134565b9182825260019384811690816000146126615750600114612621575b50505050565b90919394506000526020928360002092846000945b83861061264d57505050500101903880808061261b565b805485870183015294019385908201612636565b9294505050602093945060ff191683830152151560051b0101903880808061261b565b1561268b57565b60405162461bcd60e51b815260206004820152602360248201527f436974697a656e52656769737472793a20496e76616c696420636974697a656e60448201526208125160ea1b6064820152608490fd5b604051906126e98261216e565b606061016083600080825280602083015283604083015283808301528060808301528060a08301528060c08301528060e083015280610100830152806101208301526101408201520152565b1561273c57565b60405162461bcd60e51b815260206004820152602660248201527f436974697a656e52656769737472793a2057616c6c6574206e6f7420726567696044820152651cdd195c995960d21b6064820152608490fd5b90811590816127b8575b50156127a65750600090565b603211156127b357600190565b600290565b9050153861279a565b80518210156116ea5760209160051b01019056fea2646970667358221220ee29c49c9b651f5cb20ce33e3c4be84983a3f3ff76b2660d1ccbec372fdf672f64736f6c63430008140033",
  "devdoc": {
    "author": "CitiProof Team",
    "details": "Manages verified citizen identities and their verification levels",
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "StringsInsufficientHexLength(uint256,uint256)": [
        {
          "details": "The `value` string doesn't fit in the specified `length`."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "deactivateCitizen(uint256)": {
        "details": "Deactivate a citizen account (admin function)",
        "params": {
          "_citizenId": "Citizen ID to deactivate"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "reactivateCitizen(uint256)": {
        "details": "Reactivate a citizen account (admin function)",
        "params": {
          "_citizenId": "Citizen ID to reactivate"
        }
      },
      "registerCitizen(string,string,uint256,uint256,string)": {
        "details": "Register a new citizen with flexible requirements",
        "params": {
          "_efpFollowers": "Number of EFP followers (0 allowed for new users)",
          "_efpFollowing": "Number of EFP following (0 allowed for new users)",
          "_efpTokenId": "EFP list token ID (can be empty string)",
          "_ensName": "ENS name (can be empty string for wallet-only registration)",
          "_ipfsMetadata": "IPFS hash for additional profile data"
        }
      },
      "registerCitizenSimple()": {
        "details": "Simplified registration for wallet-only users (hackathon-friendly) Automatically generates ENS subdomain and placeholder EFP data"
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateEFPVerification(string,uint256,uint256)": {
        "details": "Update citizen's EFP verification data",
        "params": {
          "_efpFollowers": "Updated follower count",
          "_efpFollowing": "Updated following count",
          "_efpTokenId": "New EFP token ID"
        }
      },
      "updateENSName(string)": {
        "details": "Update citizen's ENS name",
        "params": {
          "_ensName": "New ENS name"
        }
      },
      "updateReputationScore(uint256,uint256)": {
        "details": "Update reputation score (only called by reputation contract)",
        "params": {
          "_citizenId": "Citizen ID",
          "_reputationScore": "New reputation score"
        }
      }
    },
    "title": "CitizenIdentityRegistry",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/CitizenIdentityRegistry.sol:CitizenIdentityRegistry",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 188,
        "contract": "contracts/CitizenIdentityRegistry.sol:CitizenIdentityRegistry",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1672,
        "contract": "contracts/CitizenIdentityRegistry.sol:CitizenIdentityRegistry",
        "label": "_citizenIdCounter",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1707,
        "contract": "contracts/CitizenIdentityRegistry.sol:CitizenIdentityRegistry",
        "label": "walletToCitizenId",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1712,
        "contract": "contracts/CitizenIdentityRegistry.sol:CitizenIdentityRegistry",
        "label": "citizens",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(CitizenProfile)1703_storage)"
      },
      {
        "astId": 1716,
        "contract": "contracts/CitizenIdentityRegistry.sol:CitizenIdentityRegistry",
        "label": "ensNameToCitizenId",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_string_memory_ptr,t_uint256)"
      },
      {
        "astId": 1720,
        "contract": "contracts/CitizenIdentityRegistry.sol:CitizenIdentityRegistry",
        "label": "registeredEnsNames",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_string_memory_ptr,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(VerificationLevel)1677": {
        "encoding": "inplace",
        "label": "enum CitizenIdentityRegistry.VerificationLevel",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_bool)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_string_memory_ptr,t_uint256)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(CitizenProfile)1703_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CitizenIdentityRegistry.CitizenProfile)",
        "numberOfBytes": "32",
        "value": "t_struct(CitizenProfile)1703_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(CitizenProfile)1703_storage": {
        "encoding": "inplace",
        "label": "struct CitizenIdentityRegistry.CitizenProfile",
        "members": [
          {
            "astId": 1679,
            "contract": "contracts/CitizenIdentityRegistry.sol:CitizenIdentityRegistry",
            "label": "citizenId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1681,
            "contract": "contracts/CitizenIdentityRegistry.sol:CitizenIdentityRegistry",
            "label": "walletAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 1683,
            "contract": "contracts/CitizenIdentityRegistry.sol:CitizenIdentityRegistry",
            "label": "ensName",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 1685,
            "contract": "contracts/CitizenIdentityRegistry.sol:CitizenIdentityRegistry",
            "label": "efpTokenId",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 1687,
            "contract": "contracts/CitizenIdentityRegistry.sol:CitizenIdentityRegistry",
            "label": "efpFollowers",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1689,
            "contract": "contracts/CitizenIdentityRegistry.sol:CitizenIdentityRegistry",
            "label": "efpFollowing",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 1692,
            "contract": "contracts/CitizenIdentityRegistry.sol:CitizenIdentityRegistry",
            "label": "verificationLevel",
            "offset": 0,
            "slot": "6",
            "type": "t_enum(VerificationLevel)1677"
          },
          {
            "astId": 1694,
            "contract": "contracts/CitizenIdentityRegistry.sol:CitizenIdentityRegistry",
            "label": "registrationTimestamp",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 1696,
            "contract": "contracts/CitizenIdentityRegistry.sol:CitizenIdentityRegistry",
            "label": "lastUpdateTimestamp",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 1698,
            "contract": "contracts/CitizenIdentityRegistry.sol:CitizenIdentityRegistry",
            "label": "isActive",
            "offset": 0,
            "slot": "9",
            "type": "t_bool"
          },
          {
            "astId": 1700,
            "contract": "contracts/CitizenIdentityRegistry.sol:CitizenIdentityRegistry",
            "label": "reputationScore",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 1702,
            "contract": "contracts/CitizenIdentityRegistry.sol:CitizenIdentityRegistry",
            "label": "ipfsMetadata",
            "offset": 0,
            "slot": "11",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}