{
  "address": "0x51649792320c676b2e38accfb7cd61ab0d2a3f5a",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "initialOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_citizenRegistry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_reputationSystem",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_projectRegistry",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "creatorCitizenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum VotingGovernanceSystem.ProposalType",
          "name": "proposalType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "title",
          "type": "string"
        }
      ],
      "name": "ProposalCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum VotingGovernanceSystem.ProposalStatus",
          "name": "finalStatus",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "yesVotes",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "noVotes",
          "type": "uint256"
        }
      ],
      "name": "ProposalExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum VotingGovernanceSystem.ProposalStatus",
          "name": "oldStatus",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "enum VotingGovernanceSystem.ProposalStatus",
          "name": "newStatus",
          "type": "uint8"
        }
      ],
      "name": "ProposalStatusChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "citizenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "support",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "votingPower",
          "type": "uint256"
        }
      ],
      "name": "VoteCast",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_proposalId",
          "type": "uint256"
        }
      ],
      "name": "cancelProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_proposalId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_support",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "_reason",
          "type": "string"
        }
      ],
      "name": "castVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "citizenProposals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "citizenRegistry",
      "outputs": [
        {
          "internalType": "contract CitizenIdentityRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_title",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "internalType": "enum VotingGovernanceSystem.ProposalType",
          "name": "_proposalType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_votingPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_relatedProjectId",
          "type": "uint256"
        }
      ],
      "name": "createProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultPassingThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultVotingPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_proposalId",
          "type": "uint256"
        }
      ],
      "name": "executeProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getActiveProposals",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_citizen",
          "type": "address"
        }
      ],
      "name": "getCitizenProposals",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_proposalId",
          "type": "uint256"
        }
      ],
      "name": "getProposal",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "proposalId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "creatorCitizenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "title",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "ipfsDescriptionHash",
              "type": "string"
            },
            {
              "internalType": "enum VotingGovernanceSystem.ProposalType",
              "name": "proposalType",
              "type": "uint8"
            },
            {
              "internalType": "enum VotingGovernanceSystem.ProposalStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "creationTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "votingEndTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "executionTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "yesVotes",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "noVotes",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalVotingPower",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "quorumRequired",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "passingThreshold",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "executionData",
              "type": "bytes"
            },
            {
              "internalType": "string",
              "name": "ipfsDocumentHash",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "isExecuted",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "relatedProjectId",
              "type": "uint256"
            }
          ],
          "internalType": "struct VotingGovernanceSystem.Proposal",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_proposalId",
          "type": "uint256"
        }
      ],
      "name": "getProposalVotes",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "citizenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "voter",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "support",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "votingPower",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "reason",
              "type": "string"
            }
          ],
          "internalType": "struct VotingGovernanceSystem.Vote[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum VotingGovernanceSystem.ProposalType",
          "name": "_proposalType",
          "type": "uint8"
        }
      ],
      "name": "getProposalsByType",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalProposals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVotingStats",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalProposals",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "activeProposals",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "passedProposals",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rejectedProposals",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "hasVoted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumQuorum",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumReputationToPropose",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumReputationToVote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "projectRegistry",
      "outputs": [
        {
          "internalType": "contract GovernmentProjectRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proposalVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "citizenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "support",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "votingPower",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proposals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "creatorCitizenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "ipfsDescriptionHash",
          "type": "string"
        },
        {
          "internalType": "enum VotingGovernanceSystem.ProposalType",
          "name": "proposalType",
          "type": "uint8"
        },
        {
          "internalType": "enum VotingGovernanceSystem.ProposalStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "creationTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "votingEndTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "executionTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "yesVotes",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "noVotes",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalVotingPower",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quorumRequired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "passingThreshold",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "executionData",
          "type": "bytes"
        },
        {
          "internalType": "string",
          "name": "ipfsDocumentHash",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "isExecuted",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "relatedProjectId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reputationSystem",
      "outputs": [
        {
          "internalType": "contract ReputationSystem",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "typeProposals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_projectRegistry",
          "type": "address"
        }
      ],
      "name": "updateProjectRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_reputationSystem",
          "type": "address"
        }
      ],
      "name": "updateReputationSystem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_defaultVotingPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minimumQuorum",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_defaultPassingThreshold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minimumReputationToPropose",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minimumReputationToVote",
          "type": "uint256"
        }
      ],
      "name": "updateVotingConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd0a7df6a45d69e3726753cfca9e4d509b2bc1a3af082b6b298caecc116ac8c1d",
  "receipt": {
    "to": null,
    "from": "0x847118e06a68716b385a86a50250c598d33ca68c",
    "contractAddress": "0x51649792320c676b2e38accfb7cd61ab0d2a3f5a",
    "transactionIndex": "0x9b",
    "gasUsed": "0x28a8eb",
    "logsBloom": "0x
    "blockHash": "0x4ea65d7ab9a487cadde96526d30334306d115570c23c9d885daa29c349209b86",
    "transactionHash": "0xd0a7df6a45d69e3726753cfca9e4d509b2bc1a3af082b6b298caecc116ac8c1d",
    "logs": [
      {
        "address": "0x51649792320c676b2e38accfb7cd61ab0d2a3f5a",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000847118e06a68716b385a86a50250c598d33ca68c"
        ],
        "data": "0x",
        "blockHash": "0x4ea65d7ab9a487cadde96526d30334306d115570c23c9d885daa29c349209b86",
        "blockNumber": "0x8b82f2",
        "blockTimestamp": "0x68bba0b0",
        "transactionHash": "0xd0a7df6a45d69e3726753cfca9e4d509b2bc1a3af082b6b298caecc116ac8c1d",
        "transactionIndex": "0x9b",
        "logIndex": "0xf1",
        "removed": false
      }
    ],
    "blockNumber": "0x8b82f2",
    "cumulativeGasUsed": "0x12df646",
    "status": "0x1"
  },
  "args": [
    "0x847118E06a68716b385a86a50250C598D33Ca68C",
    "0x9F4Bc4cb48e60871768b4cFB9CF9C53381063652",
    "0x0Be2398A11E351903d7528533F2b5d544301510c",
    "0xA2B1623a4AdE119f510Bd33493D70A246737bcD8"
  ],
  "numDeployments": 1,
  "solcInputHash": "2510a4953b833be54b78475d9a98dd2b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_citizenRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_reputationSystem\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_projectRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"creatorCitizenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum VotingGovernanceSystem.ProposalType\",\"name\":\"proposalType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"}],\"name\":\"ProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum VotingGovernanceSystem.ProposalStatus\",\"name\":\"finalStatus\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"yesVotes\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"noVotes\",\"type\":\"uint256\"}],\"name\":\"ProposalExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum VotingGovernanceSystem.ProposalStatus\",\"name\":\"oldStatus\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum VotingGovernanceSystem.ProposalStatus\",\"name\":\"newStatus\",\"type\":\"uint8\"}],\"name\":\"ProposalStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"citizenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"}],\"name\":\"VoteCast\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"}],\"name\":\"cancelProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_support\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"_reason\",\"type\":\"string\"}],\"name\":\"castVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"citizenProposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"citizenRegistry\",\"outputs\":[{\"internalType\":\"contract CitizenIdentityRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"enum VotingGovernanceSystem.ProposalType\",\"name\":\"_proposalType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_votingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_relatedProjectId\",\"type\":\"uint256\"}],\"name\":\"createProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultPassingThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultVotingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"}],\"name\":\"executeProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActiveProposals\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_citizen\",\"type\":\"address\"}],\"name\":\"getCitizenProposals\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"}],\"name\":\"getProposal\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"creatorCitizenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ipfsDescriptionHash\",\"type\":\"string\"},{\"internalType\":\"enum VotingGovernanceSystem.ProposalType\",\"name\":\"proposalType\",\"type\":\"uint8\"},{\"internalType\":\"enum VotingGovernanceSystem.ProposalStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingEndTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executionTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yesVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"noVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalVotingPower\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quorumRequired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"passingThreshold\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"executionData\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"ipfsDocumentHash\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isExecuted\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"relatedProjectId\",\"type\":\"uint256\"}],\"internalType\":\"struct VotingGovernanceSystem.Proposal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"}],\"name\":\"getProposalVotes\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"citizenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"internalType\":\"struct VotingGovernanceSystem.Vote[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum VotingGovernanceSystem.ProposalType\",\"name\":\"_proposalType\",\"type\":\"uint8\"}],\"name\":\"getProposalsByType\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalProposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVotingStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalProposals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"activeProposals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"passedProposals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rejectedProposals\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"hasVoted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumQuorum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumReputationToPropose\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumReputationToVote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projectRegistry\",\"outputs\":[{\"internalType\":\"contract GovernmentProjectRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposalVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"citizenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"creatorCitizenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ipfsDescriptionHash\",\"type\":\"string\"},{\"internalType\":\"enum VotingGovernanceSystem.ProposalType\",\"name\":\"proposalType\",\"type\":\"uint8\"},{\"internalType\":\"enum VotingGovernanceSystem.ProposalStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingEndTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executionTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yesVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"noVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalVotingPower\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quorumRequired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"passingThreshold\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"executionData\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"ipfsDocumentHash\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isExecuted\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"relatedProjectId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reputationSystem\",\"outputs\":[{\"internalType\":\"contract ReputationSystem\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"typeProposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_projectRegistry\",\"type\":\"address\"}],\"name\":\"updateProjectRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reputationSystem\",\"type\":\"address\"}],\"name\":\"updateReputationSystem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_defaultVotingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumQuorum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_defaultPassingThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumReputationToPropose\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumReputationToVote\",\"type\":\"uint256\"}],\"name\":\"updateVotingConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"CitiProof Team\",\"details\":\"Enables community voting on governance matters\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{\"castVote(uint256,bool,string)\":{\"details\":\"Cast vote on a proposal\"},\"createProposal(string,string,uint8,uint256,uint256)\":{\"details\":\"Create a new governance proposal (simplified to avoid stack too deep)\"},\"executeProposal(uint256)\":{\"details\":\"Execute proposal after voting period ends\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"VotingGovernanceSystem\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/VotingGovernanceSystem.sol\":\"VotingGovernanceSystem\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/CitizenIdentityRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n/**\\n * @title CitizenIdentityRegistry\\n * @dev Manages verified citizen identities and their verification levels\\n * @author CitiProof Team\\n */\\ncontract CitizenIdentityRegistry is Ownable, ReentrancyGuard {\\n    // Counter for citizen IDs (using simple uint256 instead of Counters)\\n    uint256 private _citizenIdCounter;\\n\\n    // Verification levels\\n    enum VerificationLevel {\\n        UNVERIFIED,    // Default state\\n        BASIC,         // Basic wallet connection + EFP\\n        VERIFIED,      // Enhanced verification (50+ EFP followers)\\n        PREMIUM        // Government-verified or high reputation\\n    }\\n\\n    // Citizen profile structure\\n    struct CitizenProfile {\\n        uint256 citizenId;\\n        address walletAddress;\\n        string ensName;              // ENS name if available\\n        string efpTokenId;           // EFP list token ID\\n        uint256 efpFollowers;        // EFP follower count\\n        uint256 efpFollowing;        // EFP following count\\n        VerificationLevel verificationLevel;\\n        uint256 registrationTimestamp;\\n        uint256 lastUpdateTimestamp;\\n        bool isActive;\\n        uint256 reputationScore;     // Link to reputation contract\\n        string ipfsMetadata;         // Additional profile data on IPFS\\n    }\\n\\n    // Storage mappings\\n    mapping(address => uint256) public walletToCitizenId;\\n    mapping(uint256 => CitizenProfile) public citizens;\\n    mapping(string => uint256) public ensNameToCitizenId;\\n    mapping(string => bool) public registeredEnsNames;\\n\\n    // Events\\n    event CitizenRegistered(\\n        uint256 indexed citizenId,\\n        address indexed walletAddress,\\n        string ensName,\\n        VerificationLevel verificationLevel\\n    );\\n\\n    event CitizenVerificationUpdated(\\n        uint256 indexed citizenId,\\n        address indexed walletAddress,\\n        VerificationLevel oldLevel,\\n        VerificationLevel newLevel\\n    );\\n\\n    event CitizenProfileUpdated(\\n        uint256 indexed citizenId,\\n        address indexed walletAddress,\\n        string ensName,\\n        string efpTokenId\\n    );\\n\\n    event CitizenDeactivated(\\n        uint256 indexed citizenId,\\n        address indexed walletAddress,\\n        address indexed deactivatedBy\\n    );\\n\\n    // Modifiers\\n    modifier onlyRegisteredCitizen() {\\n        require(walletToCitizenId[msg.sender] != 0, \\\"CitizenRegistry: Caller is not a registered citizen\\\");\\n        require(citizens[walletToCitizenId[msg.sender]].isActive, \\\"CitizenRegistry: Citizen account is not active\\\");\\n        _;\\n    }\\n\\n    modifier validCitizenId(uint256 _citizenId) {\\n        require(_citizenId > 0 && _citizenId <= _citizenIdCounter, \\\"CitizenRegistry: Invalid citizen ID\\\");\\n        _;\\n    }\\n\\n    modifier onlyActiveCitizen(uint256 _citizenId) {\\n        require(citizens[_citizenId].isActive, \\\"CitizenRegistry: Citizen is not active\\\");\\n        _;\\n    }\\n\\n    constructor(address initialOwner) Ownable(initialOwner) {}\\n\\n    /**\\n     * @dev Register a new citizen with flexible requirements\\n     * @param _ensName ENS name (can be empty string for wallet-only registration)\\n     * @param _efpTokenId EFP list token ID (can be empty string)\\n     * @param _efpFollowers Number of EFP followers (0 allowed for new users)\\n     * @param _efpFollowing Number of EFP following (0 allowed for new users)\\n     * @param _ipfsMetadata IPFS hash for additional profile data\\n     */\\n    function registerCitizen(\\n        string memory _ensName,\\n        string memory _efpTokenId,\\n        uint256 _efpFollowers,\\n        uint256 _efpFollowing,\\n        string memory _ipfsMetadata\\n    ) external nonReentrant {\\n        require(walletToCitizenId[msg.sender] == 0, \\\"CitizenRegistry: Wallet already registered\\\");\\n        \\n        // Check if ENS name is already taken (if provided)\\n        if (bytes(_ensName).length > 0) {\\n            require(!registeredEnsNames[_ensName], \\\"CitizenRegistry: ENS name already registered\\\");\\n        }\\n\\n        // Increment citizen ID counter\\n        _citizenIdCounter++;\\n        uint256 newCitizenId = _citizenIdCounter;\\n\\n        // Determine verification level based on EFP data\\n        VerificationLevel verificationLevel = _determineVerificationLevel(_efpFollowers, _efpFollowing);\\n\\n        // Create citizen profile\\n        citizens[newCitizenId] = CitizenProfile({\\n            citizenId: newCitizenId,\\n            walletAddress: msg.sender,\\n            ensName: _ensName,\\n            efpTokenId: _efpTokenId,\\n            efpFollowers: _efpFollowers,\\n            efpFollowing: _efpFollowing,\\n            verificationLevel: verificationLevel,\\n            registrationTimestamp: block.timestamp,\\n            lastUpdateTimestamp: block.timestamp,\\n            isActive: true,\\n            reputationScore: 0, // Will be updated by reputation contract\\n            ipfsMetadata: _ipfsMetadata\\n        });\\n\\n        // Update mappings\\n        walletToCitizenId[msg.sender] = newCitizenId;\\n        if (bytes(_ensName).length > 0) {\\n            ensNameToCitizenId[_ensName] = newCitizenId;\\n            registeredEnsNames[_ensName] = true;\\n        }\\n\\n        emit CitizenRegistered(newCitizenId, msg.sender, _ensName, verificationLevel);\\n    }\\n\\n    /**\\n     * @dev Simplified registration for wallet-only users (hackathon-friendly)\\n     * Automatically generates ENS subdomain and placeholder EFP data\\n     */\\n    function registerCitizenSimple() external nonReentrant {\\n        require(walletToCitizenId[msg.sender] == 0, \\\"CitizenRegistry: Wallet already registered\\\");\\n\\n        // Generate automatic ENS subdomain using last 6 chars of address\\n        string memory addressSuffix = Strings.toHexString(uint160(msg.sender) & 0xFFFFFF, 3);\\n        string memory autoEnsName = string(abi.encodePacked(\\\"citizen\\\", addressSuffix, \\\".citiproof.eth\\\"));\\n        \\n        // Ensure generated name is unique (highly unlikely to collide)\\n        require(!registeredEnsNames[autoEnsName], \\\"CitizenRegistry: Generated ENS name collision\\\");\\n\\n        // Create with minimal verification data (can be updated later)\\n        _citizenIdCounter++;\\n        uint256 newCitizenId = _citizenIdCounter;\\n\\n        citizens[newCitizenId] = CitizenProfile({\\n            citizenId: newCitizenId,\\n            walletAddress: msg.sender,\\n            ensName: autoEnsName,\\n            efpTokenId: \\\"\\\", // Can be added later\\n            efpFollowers: 0,\\n            efpFollowing: 0,\\n            verificationLevel: VerificationLevel.UNVERIFIED,\\n            registrationTimestamp: block.timestamp,\\n            lastUpdateTimestamp: block.timestamp,\\n            isActive: true,\\n            reputationScore: 0,\\n            ipfsMetadata: \\\"\\\"\\n        });\\n\\n        // Update mappings\\n        walletToCitizenId[msg.sender] = newCitizenId;\\n        ensNameToCitizenId[autoEnsName] = newCitizenId;\\n        registeredEnsNames[autoEnsName] = true;\\n\\n        emit CitizenRegistered(newCitizenId, msg.sender, autoEnsName, VerificationLevel.UNVERIFIED);\\n    }\\n\\n    /**\\n     * @dev Update citizen's EFP verification data\\n     * @param _efpTokenId New EFP token ID\\n     * @param _efpFollowers Updated follower count\\n     * @param _efpFollowing Updated following count\\n     */\\n    function updateEFPVerification(\\n        string memory _efpTokenId,\\n        uint256 _efpFollowers,\\n        uint256 _efpFollowing\\n    ) external onlyRegisteredCitizen {\\n        uint256 citizenId = walletToCitizenId[msg.sender];\\n        CitizenProfile storage citizen = citizens[citizenId];\\n\\n        VerificationLevel oldLevel = citizen.verificationLevel;\\n        VerificationLevel newLevel = _determineVerificationLevel(_efpFollowers, _efpFollowing);\\n\\n        // Update EFP data\\n        citizen.efpTokenId = _efpTokenId;\\n        citizen.efpFollowers = _efpFollowers;\\n        citizen.efpFollowing = _efpFollowing;\\n        citizen.verificationLevel = newLevel;\\n        citizen.lastUpdateTimestamp = block.timestamp;\\n\\n        if (oldLevel != newLevel) {\\n            emit CitizenVerificationUpdated(citizenId, msg.sender, oldLevel, newLevel);\\n        }\\n\\n        emit CitizenProfileUpdated(citizenId, msg.sender, citizen.ensName, _efpTokenId);\\n    }\\n\\n    /**\\n     * @dev Update citizen's ENS name\\n     * @param _ensName New ENS name\\n     */\\n    function updateENSName(string memory _ensName) external onlyRegisteredCitizen {\\n        require(bytes(_ensName).length > 0, \\\"CitizenRegistry: ENS name cannot be empty\\\");\\n        require(!registeredEnsNames[_ensName], \\\"CitizenRegistry: ENS name already registered\\\");\\n\\n        uint256 citizenId = walletToCitizenId[msg.sender];\\n        CitizenProfile storage citizen = citizens[citizenId];\\n\\n        // Remove old ENS name from registry\\n        if (bytes(citizen.ensName).length > 0) {\\n            registeredEnsNames[citizen.ensName] = false;\\n            delete ensNameToCitizenId[citizen.ensName];\\n        }\\n\\n        // Set new ENS name\\n        citizen.ensName = _ensName;\\n        citizen.lastUpdateTimestamp = block.timestamp;\\n        ensNameToCitizenId[_ensName] = citizenId;\\n        registeredEnsNames[_ensName] = true;\\n\\n        emit CitizenProfileUpdated(citizenId, msg.sender, _ensName, citizen.efpTokenId);\\n    }\\n\\n    /**\\n     * @dev Update reputation score (only called by reputation contract)\\n     * @param _citizenId Citizen ID\\n     * @param _reputationScore New reputation score\\n     */\\n    function updateReputationScore(\\n        uint256 _citizenId,\\n        uint256 _reputationScore\\n    ) external validCitizenId(_citizenId) {\\n        // TODO: Add access control for reputation contract\\n        // require(msg.sender == reputationContract, \\\"CitizenRegistry: Only reputation contract can update scores\\\");\\n        \\n        citizens[_citizenId].reputationScore = _reputationScore;\\n        citizens[_citizenId].lastUpdateTimestamp = block.timestamp;\\n\\n        // Check if reputation score qualifies for premium verification\\n        if (_reputationScore >= 1000 && citizens[_citizenId].verificationLevel != VerificationLevel.PREMIUM) {\\n            VerificationLevel oldLevel = citizens[_citizenId].verificationLevel;\\n            citizens[_citizenId].verificationLevel = VerificationLevel.PREMIUM;\\n            emit CitizenVerificationUpdated(\\n                _citizenId, \\n                citizens[_citizenId].walletAddress, \\n                oldLevel, \\n                VerificationLevel.PREMIUM\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Deactivate a citizen account (admin function)\\n     * @param _citizenId Citizen ID to deactivate\\n     */\\n    function deactivateCitizen(uint256 _citizenId) external onlyOwner validCitizenId(_citizenId) {\\n        citizens[_citizenId].isActive = false;\\n        citizens[_citizenId].lastUpdateTimestamp = block.timestamp;\\n\\n        emit CitizenDeactivated(\\n            _citizenId,\\n            citizens[_citizenId].walletAddress,\\n            msg.sender\\n        );\\n    }\\n\\n    /**\\n     * @dev Reactivate a citizen account (admin function)\\n     * @param _citizenId Citizen ID to reactivate\\n     */\\n    function reactivateCitizen(uint256 _citizenId) external onlyOwner validCitizenId(_citizenId) {\\n        citizens[_citizenId].isActive = true;\\n        citizens[_citizenId].lastUpdateTimestamp = block.timestamp;\\n    }\\n\\n    // View functions\\n    function getCitizen(uint256 _citizenId) external view validCitizenId(_citizenId) returns (CitizenProfile memory) {\\n        return citizens[_citizenId];\\n    }\\n\\n    function getCitizenByWallet(address _wallet) external view returns (CitizenProfile memory) {\\n        uint256 citizenId = walletToCitizenId[_wallet];\\n        require(citizenId != 0, \\\"CitizenRegistry: Wallet not registered\\\");\\n        return citizens[citizenId];\\n    }\\n\\n    function getCitizenByENS(string memory _ensName) external view returns (CitizenProfile memory) {\\n        uint256 citizenId = ensNameToCitizenId[_ensName];\\n        require(citizenId != 0, \\\"CitizenRegistry: ENS name not registered\\\");\\n        return citizens[citizenId];\\n    }\\n\\n    function isCitizenRegistered(address _wallet) external view returns (bool) {\\n        return walletToCitizenId[_wallet] != 0 && citizens[walletToCitizenId[_wallet]].isActive;\\n    }\\n\\n    function getTotalCitizens() external view returns (uint256) {\\n        return _citizenIdCounter;\\n    }\\n\\n    function getVerificationLevel(address _wallet) external view returns (VerificationLevel) {\\n        uint256 citizenId = walletToCitizenId[_wallet];\\n        require(citizenId != 0, \\\"CitizenRegistry: Wallet not registered\\\");\\n        return citizens[citizenId].verificationLevel;\\n    }\\n\\n    function isENSNameAvailable(string memory _ensName) external view returns (bool) {\\n        return !registeredEnsNames[_ensName];\\n    }\\n\\n    // Internal functions\\n    function _determineVerificationLevel(uint256 _followers, uint256 _following) internal pure returns (VerificationLevel) {\\n        if (_followers == 0 && _following == 0) {\\n            return VerificationLevel.UNVERIFIED;\\n        } else if (_followers < 50) {\\n            return VerificationLevel.BASIC;\\n        } else {\\n            return VerificationLevel.VERIFIED;\\n        }\\n    }\\n\\n    // Batch operations for efficiency\\n    function getCitizensBatch(uint256[] memory _citizenIds) \\n        external \\n        view \\n        returns (CitizenProfile[] memory) \\n    {\\n        CitizenProfile[] memory profiles = new CitizenProfile[](_citizenIds.length);\\n        for (uint256 i = 0; i < _citizenIds.length; i++) {\\n            if (_citizenIds[i] > 0 && _citizenIds[i] <= _citizenIdCounter) {\\n                profiles[i] = citizens[_citizenIds[i]];\\n            }\\n        }\\n        return profiles;\\n    }\\n\\n    function getActiveCitizensCount() external view returns (uint256) {\\n        uint256 activeCount = 0;\\n        for (uint256 i = 1; i <= _citizenIdCounter; i++) {\\n            if (citizens[i].isActive) {\\n                activeCount++;\\n            }\\n        }\\n        return activeCount;\\n    }\\n}\",\"keccak256\":\"0x558f50048caa6b475ee31972fae16eee3985777f19dbd9882a6d86277223d533\",\"license\":\"MIT\"},\"contracts/GovernmentProjectRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"./CitizenIdentityRegistry.sol\\\";\\n\\n/**\\n * @title GovernmentProjectRegistry\\n * @dev Manages all government projects and their lifecycle\\n * @author CitiProof Team\\n */\\ncontract GovernmentProjectRegistry is Ownable, ReentrancyGuard {\\n    \\n    CitizenIdentityRegistry public immutable citizenRegistry;\\n    \\n    // Project status enumeration\\n    enum ProjectStatus {\\n        PROPOSED,      // Project proposed but not approved\\n        APPROVED,      // Project approved and funded\\n        IN_PROGRESS,   // Project execution started\\n        COMPLETED,     // Project completed successfully\\n        CANCELLED,     // Project cancelled\\n        UNDER_REVIEW   // Project under audit/review\\n    }\\n    \\n    // Project category enumeration\\n    enum ProjectCategory {\\n        INFRASTRUCTURE,\\n        HEALTHCARE,\\n        EDUCATION,\\n        ENVIRONMENT,\\n        SOCIAL_SERVICES,\\n        TECHNOLOGY,\\n        SECURITY,\\n        ECONOMIC_DEVELOPMENT,\\n        OTHER\\n    }\\n    \\n    // Project milestone structure\\n    struct ProjectMilestone {\\n        uint256 milestoneId;\\n        string title;\\n        string description;\\n        uint256 targetDate;\\n        uint256 completionDate;\\n        uint256 budgetAllocated;\\n        uint256 budgetSpent;\\n        bool isCompleted;\\n        string evidenceHash; // IPFS hash of completion evidence\\n    }\\n    \\n    // Main project structure\\n    struct Project {\\n        uint256 projectId;\\n        string title;\\n        string description;\\n        ProjectCategory category;\\n        ProjectStatus status;\\n        address governmentEntity; // Government wallet that created the project\\n        uint256 totalBudget;\\n        uint256 budgetSpent;\\n        uint256 startDate;\\n        uint256 estimatedEndDate;\\n        uint256 actualEndDate;\\n        string documentationHash; // IPFS hash for project documents\\n        uint256 citizenSupportScore; // Based on citizen votes/feedback\\n        bool isPublic; // Whether project details are public\\n        uint256 creationTimestamp;\\n        uint256 lastUpdateTimestamp;\\n    }\\n    \\n    // Storage\\n    uint256 private _projectIdCounter;\\n    mapping(uint256 => Project) public projects;\\n    mapping(uint256 => ProjectMilestone[]) public projectMilestones;\\n    mapping(uint256 => mapping(uint256 => bool)) public milestoneCompleted; // projectId => milestoneId => completed\\n    mapping(address => bool) public authorizedGovernmentEntities;\\n    mapping(uint256 => uint256[]) public categoryProjects; // category => projectIds\\n    mapping(address => uint256[]) public governmentEntityProjects; // entity => projectIds\\n    \\n    // Events\\n    event ProjectCreated(\\n        uint256 indexed projectId,\\n        string title,\\n        ProjectCategory category,\\n        address indexed governmentEntity,\\n        uint256 totalBudget\\n    );\\n    \\n    event ProjectStatusUpdated(\\n        uint256 indexed projectId,\\n        ProjectStatus oldStatus,\\n        ProjectStatus newStatus,\\n        address indexed updatedBy\\n    );\\n    \\n    event ProjectMilestoneAdded(\\n        uint256 indexed projectId,\\n        uint256 milestoneId,\\n        string title,\\n        uint256 targetDate,\\n        uint256 budgetAllocated\\n    );\\n    \\n    event ProjectMilestoneCompleted(\\n        uint256 indexed projectId,\\n        uint256 milestoneId,\\n        uint256 completionDate,\\n        uint256 actualBudgetSpent,\\n        string evidenceHash\\n    );\\n    \\n    event ProjectBudgetUpdated(\\n        uint256 indexed projectId,\\n        uint256 previousBudget,\\n        uint256 newBudget,\\n        address indexed updatedBy\\n    );\\n    \\n    event GovernmentEntityAuthorized(\\n        address indexed entity,\\n        bool authorized,\\n        address indexed authorizedBy\\n    );\\n    \\n    // Modifiers\\n    modifier onlyAuthorizedGovernment() {\\n        require(authorizedGovernmentEntities[msg.sender], \\\"ProjectRegistry: Not authorized government entity\\\");\\n        _;\\n    }\\n    \\n    modifier validProjectId(uint256 _projectId) {\\n        require(_projectId > 0 && _projectId <= _projectIdCounter, \\\"ProjectRegistry: Invalid project ID\\\");\\n        _;\\n    }\\n    \\n    modifier onlyProjectOwner(uint256 _projectId) {\\n        require(projects[_projectId].governmentEntity == msg.sender, \\\"ProjectRegistry: Not project owner\\\");\\n        _;\\n    }\\n    \\n    constructor(\\n        address initialOwner,\\n        address _citizenRegistry\\n    ) Ownable(initialOwner) {\\n        require(_citizenRegistry != address(0), \\\"ProjectRegistry: Invalid citizen registry\\\");\\n        citizenRegistry = CitizenIdentityRegistry(_citizenRegistry);\\n    }\\n    \\n    /**\\n     * @dev Create a new government project\\n     */\\n    function createProject(\\n        string memory _title,\\n        string memory _description,\\n        ProjectCategory _category,\\n        uint256 _totalBudget,\\n        uint256 _estimatedEndDate,\\n        string memory _documentationHash,\\n        bool _isPublic\\n    ) external onlyAuthorizedGovernment nonReentrant {\\n        require(bytes(_title).length > 0, \\\"ProjectRegistry: Title cannot be empty\\\");\\n        require(_totalBudget > 0, \\\"ProjectRegistry: Budget must be greater than 0\\\");\\n        require(_estimatedEndDate > block.timestamp, \\\"ProjectRegistry: End date must be in future\\\");\\n        \\n        _projectIdCounter++;\\n        uint256 newProjectId = _projectIdCounter;\\n        \\n        projects[newProjectId] = Project({\\n            projectId: newProjectId,\\n            title: _title,\\n            description: _description,\\n            category: _category,\\n            status: ProjectStatus.PROPOSED,\\n            governmentEntity: msg.sender,\\n            totalBudget: _totalBudget,\\n            budgetSpent: 0,\\n            startDate: 0, // Will be set when approved\\n            estimatedEndDate: _estimatedEndDate,\\n            actualEndDate: 0,\\n            documentationHash: _documentationHash,\\n            citizenSupportScore: 0,\\n            isPublic: _isPublic,\\n            creationTimestamp: block.timestamp,\\n            lastUpdateTimestamp: block.timestamp\\n        });\\n        \\n        // Add to category and entity mappings\\n        categoryProjects[uint256(_category)].push(newProjectId);\\n        governmentEntityProjects[msg.sender].push(newProjectId);\\n        \\n        emit ProjectCreated(newProjectId, _title, _category, msg.sender, _totalBudget);\\n    }\\n    \\n    /**\\n     * @dev Update project status\\n     */\\n    function updateProjectStatus(\\n        uint256 _projectId,\\n        ProjectStatus _newStatus\\n    ) external validProjectId(_projectId) onlyProjectOwner(_projectId) {\\n        Project storage project = projects[_projectId];\\n        ProjectStatus oldStatus = project.status;\\n        \\n        require(oldStatus != _newStatus, \\\"ProjectRegistry: Status unchanged\\\");\\n        require(_isValidStatusTransition(oldStatus, _newStatus), \\\"ProjectRegistry: Invalid status transition\\\");\\n        \\n        project.status = _newStatus;\\n        project.lastUpdateTimestamp = block.timestamp;\\n        \\n        // Set start date when approved\\n        if (_newStatus == ProjectStatus.APPROVED && project.startDate == 0) {\\n            project.startDate = block.timestamp;\\n        }\\n        \\n        // Set completion date when completed\\n        if (_newStatus == ProjectStatus.COMPLETED && project.actualEndDate == 0) {\\n            project.actualEndDate = block.timestamp;\\n        }\\n        \\n        emit ProjectStatusUpdated(_projectId, oldStatus, _newStatus, msg.sender);\\n    }\\n    \\n    /**\\n     * @dev Add milestone to project\\n     */\\n    function addProjectMilestone(\\n        uint256 _projectId,\\n        string memory _title,\\n        string memory _description,\\n        uint256 _targetDate,\\n        uint256 _budgetAllocated\\n    ) external validProjectId(_projectId) onlyProjectOwner(_projectId) {\\n        require(bytes(_title).length > 0, \\\"ProjectRegistry: Milestone title cannot be empty\\\");\\n        require(_targetDate > block.timestamp, \\\"ProjectRegistry: Target date must be in future\\\");\\n        require(_budgetAllocated > 0, \\\"ProjectRegistry: Budget must be greater than 0\\\");\\n        \\n        Project storage project = projects[_projectId];\\n        require(project.status == ProjectStatus.APPROVED || project.status == ProjectStatus.IN_PROGRESS, \\n                \\\"ProjectRegistry: Project must be approved or in progress\\\");\\n        \\n        uint256 milestoneId = projectMilestones[_projectId].length + 1;\\n        \\n        ProjectMilestone memory newMilestone = ProjectMilestone({\\n            milestoneId: milestoneId,\\n            title: _title,\\n            description: _description,\\n            targetDate: _targetDate,\\n            completionDate: 0,\\n            budgetAllocated: _budgetAllocated,\\n            budgetSpent: 0,\\n            isCompleted: false,\\n            evidenceHash: \\\"\\\"\\n        });\\n        \\n        projectMilestones[_projectId].push(newMilestone);\\n        \\n        emit ProjectMilestoneAdded(_projectId, milestoneId, _title, _targetDate, _budgetAllocated);\\n    }\\n    \\n    /**\\n     * @dev Complete project milestone\\n     */\\n    function completeProjectMilestone(\\n        uint256 _projectId,\\n        uint256 _milestoneId,\\n        uint256 _actualBudgetSpent,\\n        string memory _evidenceHash\\n    ) external validProjectId(_projectId) onlyProjectOwner(_projectId) {\\n        require(_milestoneId > 0 && _milestoneId <= projectMilestones[_projectId].length, \\n                \\\"ProjectRegistry: Invalid milestone ID\\\");\\n        require(!milestoneCompleted[_projectId][_milestoneId], \\\"ProjectRegistry: Milestone already completed\\\");\\n        require(bytes(_evidenceHash).length > 0, \\\"ProjectRegistry: Evidence hash required\\\");\\n        \\n        ProjectMilestone storage milestone = projectMilestones[_projectId][_milestoneId - 1];\\n        Project storage project = projects[_projectId];\\n        \\n        require(_actualBudgetSpent <= milestone.budgetAllocated, \\\"ProjectRegistry: Spent exceeds allocated budget\\\");\\n        require(project.budgetSpent + _actualBudgetSpent <= project.totalBudget, \\n                \\\"ProjectRegistry: Total spent would exceed project budget\\\");\\n        \\n        // Update milestone\\n        milestone.isCompleted = true;\\n        milestone.completionDate = block.timestamp;\\n        milestone.budgetSpent = _actualBudgetSpent;\\n        milestone.evidenceHash = _evidenceHash;\\n        milestoneCompleted[_projectId][_milestoneId] = true;\\n        \\n        // Update project budget\\n        project.budgetSpent += _actualBudgetSpent;\\n        project.lastUpdateTimestamp = block.timestamp;\\n        \\n        // Update project status to in progress if not already\\n        if (project.status == ProjectStatus.APPROVED) {\\n            project.status = ProjectStatus.IN_PROGRESS;\\n            emit ProjectStatusUpdated(_projectId, ProjectStatus.APPROVED, ProjectStatus.IN_PROGRESS, msg.sender);\\n        }\\n        \\n        emit ProjectMilestoneCompleted(_projectId, _milestoneId, block.timestamp, _actualBudgetSpent, _evidenceHash);\\n    }\\n    \\n    /**\\n     * @dev Update project budget (owner or admin only)\\n     */\\n    function updateProjectBudget(\\n        uint256 _projectId,\\n        uint256 _newBudget\\n    ) external validProjectId(_projectId) {\\n        require(\\n            msg.sender == projects[_projectId].governmentEntity || msg.sender == owner(),\\n            \\\"ProjectRegistry: Not authorized to update budget\\\"\\n        );\\n        require(_newBudget > 0, \\\"ProjectRegistry: Budget must be greater than 0\\\");\\n        \\n        Project storage project = projects[_projectId];\\n        require(_newBudget >= project.budgetSpent, \\\"ProjectRegistry: New budget less than already spent\\\");\\n        \\n        uint256 previousBudget = project.totalBudget;\\n        project.totalBudget = _newBudget;\\n        project.lastUpdateTimestamp = block.timestamp;\\n        \\n        emit ProjectBudgetUpdated(_projectId, previousBudget, _newBudget, msg.sender);\\n    }\\n    \\n    /**\\n     * @dev Update citizen support score (called by voting contract)\\n     */\\n    function updateCitizenSupportScore(\\n        uint256 _projectId,\\n        uint256 _supportScore\\n    ) external validProjectId(_projectId) {\\n        // TODO: Add access control for voting contract\\n        // require(msg.sender == votingContract, \\\"ProjectRegistry: Only voting contract can update support\\\");\\n        \\n        projects[_projectId].citizenSupportScore = _supportScore;\\n        projects[_projectId].lastUpdateTimestamp = block.timestamp;\\n    }\\n    \\n    // View functions\\n    function getProject(uint256 _projectId) external view validProjectId(_projectId) returns (Project memory) {\\n        Project memory project = projects[_projectId];\\n        require(project.isPublic || msg.sender == project.governmentEntity || msg.sender == owner(), \\n                \\\"ProjectRegistry: Project is not public\\\");\\n        return project;\\n    }\\n    \\n    function getProjectMilestones(uint256 _projectId) external view validProjectId(_projectId) returns (ProjectMilestone[] memory) {\\n        Project memory project = projects[_projectId];\\n        require(project.isPublic || msg.sender == project.governmentEntity || msg.sender == owner(), \\n                \\\"ProjectRegistry: Project is not public\\\");\\n        return projectMilestones[_projectId];\\n    }\\n    \\n    function getProjectsByCategory(ProjectCategory _category) external view returns (uint256[] memory) {\\n        return categoryProjects[uint256(_category)];\\n    }\\n    \\n    function getProjectsByGovernmentEntity(address _entity) external view returns (uint256[] memory) {\\n        return governmentEntityProjects[_entity];\\n    }\\n    \\n    function getProjectsByStatus(ProjectStatus _status) external view returns (uint256[] memory) {\\n        uint256[] memory result = new uint256[](_projectIdCounter);\\n        uint256 count = 0;\\n        \\n        for (uint256 i = 1; i <= _projectIdCounter; i++) {\\n            if (projects[i].status == _status && (projects[i].isPublic || msg.sender == owner())) {\\n                result[count] = i;\\n                count++;\\n            }\\n        }\\n        \\n        // Resize array to actual count\\n        uint256[] memory finalResult = new uint256[](count);\\n        for (uint256 i = 0; i < count; i++) {\\n            finalResult[i] = result[i];\\n        }\\n        \\n        return finalResult;\\n    }\\n    \\n    function getProjectStats() external view returns (\\n        uint256 totalProjects,\\n        uint256 approvedProjects,\\n        uint256 inProgressProjects,\\n        uint256 completedProjects,\\n        uint256 totalBudgetAllocated,\\n        uint256 totalBudgetSpent\\n    ) {\\n        uint256 approved = 0;\\n        uint256 inProgress = 0;\\n        uint256 completed = 0;\\n        uint256 totalAllocated = 0;\\n        uint256 totalSpent = 0;\\n        \\n        for (uint256 i = 1; i <= _projectIdCounter; i++) {\\n            Project storage project = projects[i];\\n            \\n            if (project.status == ProjectStatus.APPROVED) approved++;\\n            else if (project.status == ProjectStatus.IN_PROGRESS) inProgress++;\\n            else if (project.status == ProjectStatus.COMPLETED) completed++;\\n            \\n            totalAllocated += project.totalBudget;\\n            totalSpent += project.budgetSpent;\\n        }\\n        \\n        return (_projectIdCounter, approved, inProgress, completed, totalAllocated, totalSpent);\\n    }\\n    \\n    function getTotalProjects() external view returns (uint256) {\\n        return _projectIdCounter;\\n    }\\n    \\n    function getProjectProgress(uint256 _projectId) external view validProjectId(_projectId) returns (\\n        uint256 totalMilestones,\\n        uint256 completedMilestones,\\n        uint256 budgetUtilization // percentage in basis points (10000 = 100%)\\n    ) {\\n        Project memory project = projects[_projectId];\\n        require(project.isPublic || msg.sender == project.governmentEntity || msg.sender == owner(), \\n                \\\"ProjectRegistry: Project is not public\\\");\\n        \\n        ProjectMilestone[] memory milestones = projectMilestones[_projectId];\\n        uint256 completed = 0;\\n        \\n        for (uint256 i = 0; i < milestones.length; i++) {\\n            if (milestones[i].isCompleted) {\\n                completed++;\\n            }\\n        }\\n        \\n        uint256 utilization = project.totalBudget > 0 ? \\n                             (project.budgetSpent * 10000) / project.totalBudget : 0;\\n        \\n        return (milestones.length, completed, utilization);\\n    }\\n    \\n    // Internal functions\\n    function _isValidStatusTransition(ProjectStatus _from, ProjectStatus _to) internal pure returns (bool) {\\n        if (_from == ProjectStatus.PROPOSED) {\\n            return _to == ProjectStatus.APPROVED || _to == ProjectStatus.CANCELLED;\\n        } else if (_from == ProjectStatus.APPROVED) {\\n            return _to == ProjectStatus.IN_PROGRESS || _to == ProjectStatus.CANCELLED;\\n        } else if (_from == ProjectStatus.IN_PROGRESS) {\\n            return _to == ProjectStatus.COMPLETED || _to == ProjectStatus.UNDER_REVIEW || _to == ProjectStatus.CANCELLED;\\n        } else if (_from == ProjectStatus.UNDER_REVIEW) {\\n            return _to == ProjectStatus.COMPLETED || _to == ProjectStatus.IN_PROGRESS;\\n        }\\n        return false; // COMPLETED and CANCELLED are final states\\n    }\\n    \\n    // Admin functions\\n    function authorizeGovernmentEntity(address _entity, bool _authorized) external onlyOwner {\\n        require(_entity != address(0), \\\"ProjectRegistry: Invalid entity address\\\");\\n        authorizedGovernmentEntities[_entity] = _authorized;\\n        emit GovernmentEntityAuthorized(_entity, _authorized, msg.sender);\\n    }\\n    \\n    function emergencyUpdateProject(\\n        uint256 _projectId,\\n        ProjectStatus _status,\\n        uint256 _newBudget\\n    ) external onlyOwner validProjectId(_projectId) {\\n        Project storage project = projects[_projectId];\\n        ProjectStatus oldStatus = project.status;\\n        \\n        if (_status != oldStatus) {\\n            project.status = _status;\\n            emit ProjectStatusUpdated(_projectId, oldStatus, _status, msg.sender);\\n        }\\n        \\n        if (_newBudget != project.totalBudget && _newBudget >= project.budgetSpent) {\\n            uint256 previousBudget = project.totalBudget;\\n            project.totalBudget = _newBudget;\\n            emit ProjectBudgetUpdated(_projectId, previousBudget, _newBudget, msg.sender);\\n        }\\n        \\n        project.lastUpdateTimestamp = block.timestamp;\\n    }\\n    \\n    function setProjectPublic(uint256 _projectId, bool _isPublic) external onlyOwner validProjectId(_projectId) {\\n        projects[_projectId].isPublic = _isPublic;\\n        projects[_projectId].lastUpdateTimestamp = block.timestamp;\\n    }\\n}\",\"keccak256\":\"0x82263b72f0b4d03e19ff3e708c65bc90b901705625b820770a74107879ef7ce2\",\"license\":\"MIT\"},\"contracts/ReputationSystem.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"./CitizenIdentityRegistry.sol\\\";\\n\\n/**\\n * @title ReputationSystem\\n * @dev Manages citizen reputation scores based on verified activities\\n * @author CitiProof Team\\n */\\ncontract ReputationSystem is Ownable, ReentrancyGuard {\\n    \\n    // Reference to CitizenIdentityRegistry\\n    CitizenIdentityRegistry public immutable citizenRegistry;\\n\\n    // Reputation scoring configuration\\n    struct ReputationConfig {\\n        uint256 issueReportReward;      // Points for verified issue reports\\n        uint256 verificationReward;     // Points for successful verifications\\n        uint256 votingReward;          // Points for participation in voting\\n        uint256 projectCompletionReward; // Points for project milestone completion\\n        uint256 falseReportPenalty;    // Penalty for false/spam reports\\n        uint256 maxDailyEarnings;      // Max points per day to prevent gaming\\n        uint256 decayRate;             // Daily reputation decay (in basis points)\\n        uint256 minimumDecayThreshold; // Minimum reputation before decay applies\\n    }\\n\\n    ReputationConfig public config;\\n\\n    // Reputation tracking\\n    struct ReputationData {\\n        uint256 totalScore;\\n        uint256 lastUpdateTimestamp;\\n        uint256 dailyEarnings;\\n        uint256 lastEarningsReset;\\n        mapping(bytes32 => bool) actionCompleted; // Prevent double rewards\\n        uint256 totalReports;\\n        uint256 verifiedReports;\\n        uint256 totalVerifications;\\n        uint256 successfulVerifications;\\n        uint256 votingParticipation;\\n    }\\n\\n    // Storage\\n    mapping(uint256 => ReputationData) private reputationData; // citizenId => ReputationData\\n    mapping(address => bool) public authorizedContracts; // Contracts allowed to update reputation\\n\\n    // Events\\n    event ReputationUpdated(\\n        uint256 indexed citizenId,\\n        address indexed citizen,\\n        uint256 oldScore,\\n        uint256 newScore,\\n        string reason\\n    );\\n\\n    event ReputationConfigUpdated(\\n        uint256 issueReportReward,\\n        uint256 verificationReward,\\n        uint256 votingReward,\\n        uint256 projectCompletionReward\\n    );\\n\\n    event ContractAuthorized(address indexed contractAddress, bool authorized);\\n\\n    // Modifiers\\n    modifier onlyAuthorizedContract() {\\n        require(authorizedContracts[msg.sender], \\\"ReputationSystem: Caller not authorized\\\");\\n        _;\\n    }\\n\\n    modifier validCitizenId(uint256 _citizenId) {\\n        require(_citizenId > 0, \\\"ReputationSystem: Invalid citizen ID\\\");\\n        // Additional validation by getting citizen profile\\n        try citizenRegistry.getCitizen(_citizenId) returns (CitizenIdentityRegistry.CitizenProfile memory profile) {\\n            require(profile.isActive, \\\"ReputationSystem: Citizen not active\\\");\\n        } catch {\\n            revert(\\\"ReputationSystem: Citizen does not exist\\\");\\n        }\\n        _;\\n    }\\n\\n    constructor(\\n        address initialOwner,\\n        address _citizenRegistry\\n    ) Ownable(initialOwner) {\\n        require(_citizenRegistry != address(0), \\\"ReputationSystem: Invalid citizen registry address\\\");\\n        citizenRegistry = CitizenIdentityRegistry(_citizenRegistry);\\n\\n        // Initialize default configuration\\n        config = ReputationConfig({\\n            issueReportReward: 50,        // 50 points per verified report\\n            verificationReward: 25,       // 25 points per verification\\n            votingReward: 10,            // 10 points per vote\\n            projectCompletionReward: 100, // 100 points per project milestone\\n            falseReportPenalty: 75,      // -75 points for false reports\\n            maxDailyEarnings: 200,       // Max 200 points per day\\n            decayRate: 10,               // 0.1% daily decay (10 basis points)\\n            minimumDecayThreshold: 100   // No decay below 100 points\\n        });\\n    }\\n\\n    /**\\n     * @dev Add reputation points for verified issue report\\n     */\\n    function addIssueReportReputation(uint256 _citizenId, bytes32 _reportId) \\n        external \\n        onlyAuthorizedContract \\n        validCitizenId(_citizenId) \\n    {\\n        bytes32 actionId = keccak256(abi.encodePacked(\\\"issue_report\\\", _reportId));\\n        require(!reputationData[_citizenId].actionCompleted[actionId], \\n                \\\"ReputationSystem: Reward already claimed for this report\\\");\\n\\n        _addReputation(_citizenId, config.issueReportReward, \\\"Verified issue report\\\");\\n        reputationData[_citizenId].actionCompleted[actionId] = true;\\n        reputationData[_citizenId].totalReports++;\\n        reputationData[_citizenId].verifiedReports++;\\n    }\\n\\n    /**\\n     * @dev Add reputation points for successful verification\\n     */\\n    function addVerificationReputation(uint256 _citizenId, bytes32 _verificationId) \\n        external \\n        onlyAuthorizedContract \\n        validCitizenId(_citizenId) \\n    {\\n        bytes32 actionId = keccak256(abi.encodePacked(\\\"verification\\\", _verificationId));\\n        require(!reputationData[_citizenId].actionCompleted[actionId], \\n                \\\"ReputationSystem: Reward already claimed for this verification\\\");\\n\\n        _addReputation(_citizenId, config.verificationReward, \\\"Successful verification\\\");\\n        reputationData[_citizenId].actionCompleted[actionId] = true;\\n        reputationData[_citizenId].totalVerifications++;\\n        reputationData[_citizenId].successfulVerifications++;\\n    }\\n\\n    /**\\n     * @dev Add reputation points for voting participation\\n     */\\n    function addVotingReputation(uint256 _citizenId, bytes32 _voteId) \\n        external \\n        onlyAuthorizedContract \\n        validCitizenId(_citizenId) \\n    {\\n        bytes32 actionId = keccak256(abi.encodePacked(\\\"vote\\\", _voteId));\\n        require(!reputationData[_citizenId].actionCompleted[actionId], \\n                \\\"ReputationSystem: Reward already claimed for this vote\\\");\\n\\n        _addReputation(_citizenId, config.votingReward, \\\"Voting participation\\\");\\n        reputationData[_citizenId].actionCompleted[actionId] = true;\\n        reputationData[_citizenId].votingParticipation++;\\n    }\\n\\n    /**\\n     * @dev Add reputation points for project completion\\n     */\\n    function addProjectCompletionReputation(uint256 _citizenId, bytes32 _projectId) \\n        external \\n        onlyAuthorizedContract \\n        validCitizenId(_citizenId) \\n    {\\n        bytes32 actionId = keccak256(abi.encodePacked(\\\"project\\\", _projectId));\\n        require(!reputationData[_citizenId].actionCompleted[actionId], \\n                \\\"ReputationSystem: Reward already claimed for this project\\\");\\n\\n        _addReputation(_citizenId, config.projectCompletionReward, \\\"Project milestone completion\\\");\\n        reputationData[_citizenId].actionCompleted[actionId] = true;\\n    }\\n\\n    /**\\n     * @dev Penalize reputation for false reports\\n     */\\n    function penalizeFalseReport(uint256 _citizenId, bytes32 _reportId) \\n        external \\n        onlyAuthorizedContract \\n        validCitizenId(_citizenId) \\n    {\\n        bytes32 actionId = keccak256(abi.encodePacked(\\\"false_report\\\", _reportId));\\n        require(!reputationData[_citizenId].actionCompleted[actionId], \\n                \\\"ReputationSystem: Penalty already applied for this report\\\");\\n\\n        _subtractReputation(_citizenId, config.falseReportPenalty, \\\"False report penalty\\\");\\n        reputationData[_citizenId].actionCompleted[actionId] = true;\\n        reputationData[_citizenId].totalReports++;\\n        // Note: verifiedReports count remains unchanged\\n    }\\n\\n    /**\\n     * @dev Apply daily reputation decay to prevent inflation\\n     */\\n    function applyDailyDecay(uint256[] calldata _citizenIds) external {\\n        for (uint256 i = 0; i < _citizenIds.length; i++) {\\n            _applyDecay(_citizenIds[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function to add reputation with daily limits\\n     */\\n    function _addReputation(uint256 _citizenId, uint256 _points, string memory _reason) internal {\\n        ReputationData storage data = reputationData[_citizenId];\\n        \\n        // Reset daily earnings if it's a new day\\n        if (block.timestamp > data.lastEarningsReset + 1 days) {\\n            data.dailyEarnings = 0;\\n            data.lastEarningsReset = block.timestamp;\\n        }\\n\\n        // Check daily earning limits\\n        uint256 actualPoints = _points;\\n        if (data.dailyEarnings + _points > config.maxDailyEarnings) {\\n            actualPoints = config.maxDailyEarnings > data.dailyEarnings ? \\n                           config.maxDailyEarnings - data.dailyEarnings : 0;\\n        }\\n\\n        if (actualPoints > 0) {\\n            uint256 oldScore = data.totalScore;\\n            data.totalScore += actualPoints;\\n            data.dailyEarnings += actualPoints;\\n            data.lastUpdateTimestamp = block.timestamp;\\n\\n            // Update citizen registry with new score\\n            citizenRegistry.updateReputationScore(_citizenId, data.totalScore);\\n\\n            // Get citizen address from registry\\n            address citizenAddress = address(0);\\n            try citizenRegistry.getCitizen(_citizenId) returns (CitizenIdentityRegistry.CitizenProfile memory profile) {\\n                citizenAddress = profile.walletAddress;\\n            } catch {}\\n            \\n            emit ReputationUpdated(_citizenId, citizenAddress, oldScore, data.totalScore, _reason);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function to subtract reputation\\n     */\\n    function _subtractReputation(uint256 _citizenId, uint256 _points, string memory _reason) internal {\\n        ReputationData storage data = reputationData[_citizenId];\\n        uint256 oldScore = data.totalScore;\\n        \\n        // Ensure reputation doesn't go below 0\\n        if (data.totalScore >= _points) {\\n            data.totalScore -= _points;\\n        } else {\\n            data.totalScore = 0;\\n        }\\n        \\n        data.lastUpdateTimestamp = block.timestamp;\\n\\n        // Update citizen registry with new score\\n        citizenRegistry.updateReputationScore(_citizenId, data.totalScore);\\n\\n        // Get citizen address from registry\\n        address citizenAddress = address(0);\\n        try citizenRegistry.getCitizen(_citizenId) returns (CitizenIdentityRegistry.CitizenProfile memory profile) {\\n            citizenAddress = profile.walletAddress;\\n        } catch {}\\n        emit ReputationUpdated(_citizenId, citizenAddress, oldScore, data.totalScore, _reason);\\n    }\\n\\n    /**\\n     * @dev Apply reputation decay for inactive users\\n     */\\n    function _applyDecay(uint256 _citizenId) internal validCitizenId(_citizenId) {\\n        ReputationData storage data = reputationData[_citizenId];\\n        \\n        // Only apply decay if above minimum threshold and it's been at least a day\\n        if (data.totalScore > config.minimumDecayThreshold && \\n            block.timestamp > data.lastUpdateTimestamp + 1 days) {\\n            \\n            uint256 daysSinceUpdate = (block.timestamp - data.lastUpdateTimestamp) / 1 days;\\n            uint256 decayAmount = (data.totalScore * config.decayRate * daysSinceUpdate) / 10000;\\n            \\n            if (decayAmount > 0) {\\n                _subtractReputation(_citizenId, decayAmount, \\\"Daily reputation decay\\\");\\n            }\\n        }\\n    }\\n\\n    // View functions\\n    function getReputationScore(uint256 _citizenId) external view validCitizenId(_citizenId) returns (uint256) {\\n        return reputationData[_citizenId].totalScore;\\n    }\\n\\n    function getReputationStats(uint256 _citizenId) \\n        external \\n        view \\n        validCitizenId(_citizenId) \\n        returns (\\n            uint256 totalScore,\\n            uint256 totalReports,\\n            uint256 verifiedReports,\\n            uint256 totalVerifications,\\n            uint256 successfulVerifications,\\n            uint256 votingParticipation,\\n            uint256 lastUpdateTimestamp\\n        ) \\n    {\\n        ReputationData storage data = reputationData[_citizenId];\\n        return (\\n            data.totalScore,\\n            data.totalReports,\\n            data.verifiedReports,\\n            data.totalVerifications,\\n            data.successfulVerifications,\\n            data.votingParticipation,\\n            data.lastUpdateTimestamp\\n        );\\n    }\\n\\n    function getDailyEarningsInfo(uint256 _citizenId) \\n        external \\n        view \\n        validCitizenId(_citizenId) \\n        returns (uint256 dailyEarnings, uint256 remainingEarnings, uint256 lastReset) \\n    {\\n        ReputationData storage data = reputationData[_citizenId];\\n        uint256 remaining = config.maxDailyEarnings > data.dailyEarnings ? \\n                           config.maxDailyEarnings - data.dailyEarnings : 0;\\n        \\n        return (data.dailyEarnings, remaining, data.lastEarningsReset);\\n    }\\n\\n    function getTopReputationCitizens(uint256 _limit) \\n        external \\n        view \\n        returns (uint256[] memory citizenIds, uint256[] memory scores) \\n    {\\n        uint256 totalCitizens = citizenRegistry.getTotalCitizens();\\n        if (_limit > totalCitizens) _limit = totalCitizens;\\n        \\n        citizenIds = new uint256[](_limit);\\n        scores = new uint256[](_limit);\\n        uint256 count = 0;\\n        \\n        // Simple implementation - collect first _limit active citizens with scores\\n        for (uint256 i = 1; i <= totalCitizens && count < _limit; i++) {\\n            try citizenRegistry.getCitizen(i) returns (CitizenIdentityRegistry.CitizenProfile memory profile) {\\n                if (profile.isActive) {\\n                    citizenIds[count] = i;\\n                    scores[count] = reputationData[i].totalScore;\\n                    count++;\\n                }\\n            } catch {\\n                // Skip invalid citizens\\n                continue;\\n            }\\n        }\\n        \\n        return (citizenIds, scores);\\n    }\\n\\n    // Admin functions\\n    function updateConfig(\\n        uint256 _issueReportReward,\\n        uint256 _verificationReward,\\n        uint256 _votingReward,\\n        uint256 _projectCompletionReward,\\n        uint256 _falseReportPenalty,\\n        uint256 _maxDailyEarnings,\\n        uint256 _decayRate,\\n        uint256 _minimumDecayThreshold\\n    ) external onlyOwner {\\n        config.issueReportReward = _issueReportReward;\\n        config.verificationReward = _verificationReward;\\n        config.votingReward = _votingReward;\\n        config.projectCompletionReward = _projectCompletionReward;\\n        config.falseReportPenalty = _falseReportPenalty;\\n        config.maxDailyEarnings = _maxDailyEarnings;\\n        config.decayRate = _decayRate;\\n        config.minimumDecayThreshold = _minimumDecayThreshold;\\n\\n        emit ReputationConfigUpdated(\\n            _issueReportReward,\\n            _verificationReward,\\n            _votingReward,\\n            _projectCompletionReward\\n        );\\n    }\\n\\n    function authorizeContract(address _contract, bool _authorized) external onlyOwner {\\n        require(_contract != address(0), \\\"ReputationSystem: Invalid contract address\\\");\\n        authorizedContracts[_contract] = _authorized;\\n        emit ContractAuthorized(_contract, _authorized);\\n    }\\n\\n    function emergencyResetReputation(uint256 _citizenId, uint256 _newScore) external onlyOwner {\\n        ReputationData storage data = reputationData[_citizenId];\\n        uint256 oldScore = data.totalScore;\\n        data.totalScore = _newScore;\\n        data.lastUpdateTimestamp = block.timestamp;\\n\\n        citizenRegistry.updateReputationScore(_citizenId, _newScore);\\n\\n        // Get citizen address from registry\\n        address citizenAddress = address(0);\\n        try citizenRegistry.getCitizen(_citizenId) returns (CitizenIdentityRegistry.CitizenProfile memory profile) {\\n            citizenAddress = profile.walletAddress;\\n        } catch {}\\n        emit ReputationUpdated(_citizenId, citizenAddress, oldScore, _newScore, \\\"Emergency reset\\\");\\n    }\\n}\",\"keccak256\":\"0xc87bcb575a1e90e3ac3b3b48c43182947583e9abb388d712ee93ae8bb354f140\",\"license\":\"MIT\"},\"contracts/VotingGovernanceSystem.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"./CitizenIdentityRegistry.sol\\\";\\nimport \\\"./ReputationSystem.sol\\\";\\nimport \\\"./GovernmentProjectRegistry.sol\\\";\\n\\n/**\\n * @title VotingGovernanceSystem\\n * @dev Enables community voting on governance matters\\n * @author CitiProof Team\\n */\\ncontract VotingGovernanceSystem is Ownable, ReentrancyGuard {\\n    \\n    CitizenIdentityRegistry public immutable citizenRegistry;\\n    ReputationSystem public reputationSystem;\\n    GovernmentProjectRegistry public projectRegistry;\\n    \\n    enum ProposalType {\\n        PROJECT_APPROVAL,    // Vote on new project proposals\\n        BUDGET_ALLOCATION,   // Vote on budget changes\\n        POLICY_CHANGE,       // Vote on governance policy updates\\n        ISSUE_PRIORITY,      // Vote on issue priority/urgency\\n        OTHER\\n    }\\n    \\n    enum ProposalStatus {\\n        ACTIVE,      // Currently accepting votes\\n        PASSED,      // Proposal passed and executed\\n        REJECTED,    // Proposal failed to meet threshold\\n        EXPIRED,     // Voting period ended without resolution\\n        CANCELLED    // Cancelled by creator or admin\\n    }\\n    \\n    struct Proposal {\\n        uint256 proposalId;\\n        uint256 creatorCitizenId;\\n        address creator;\\n        string title;\\n        string ipfsDescriptionHash; // IPFS hash for detailed description\\n        ProposalType proposalType;\\n        ProposalStatus status;\\n        uint256 creationTimestamp;\\n        uint256 votingEndTimestamp;\\n        uint256 executionTimestamp;\\n        uint256 yesVotes;\\n        uint256 noVotes;\\n        uint256 totalVotingPower;\\n        uint256 quorumRequired;\\n        uint256 passingThreshold; // Percentage needed to pass (basis points)\\n        bytes executionData; // Data for automatic execution\\n        string ipfsDocumentHash; // Additional proposal documents\\n        bool isExecuted;\\n        uint256 relatedProjectId; // If related to a specific project\\n    }\\n    \\n    struct Vote {\\n        uint256 citizenId;\\n        address voter;\\n        bool support; // true = yes, false = no\\n        uint256 votingPower; // Based on reputation at time of vote\\n        uint256 timestamp;\\n        string reason; // Optional reason for vote\\n    }\\n    \\n    // Storage\\n    uint256 private _proposalIdCounter;\\n    mapping(uint256 => Proposal) public proposals;\\n    mapping(uint256 => Vote[]) public proposalVotes; // proposalId => Vote[]\\n    mapping(uint256 => mapping(uint256 => bool)) public hasVoted; // proposalId => citizenId => voted\\n    mapping(address => uint256[]) public citizenProposals; // creator => proposalIds\\n    mapping(uint256 => uint256[]) public typeProposals; // proposalType => proposalIds\\n    \\n    // Configuration\\n    uint256 public defaultVotingPeriod = 7 days;\\n    uint256 public minimumQuorum = 1000; // Minimum total voting power required\\n    uint256 public defaultPassingThreshold = 5100; // 51% in basis points\\n    uint256 public minimumReputationToPropose = 100;\\n    uint256 public minimumReputationToVote = 50;\\n    \\n    // Events\\n    event ProposalCreated(\\n        uint256 indexed proposalId,\\n        uint256 indexed creatorCitizenId,\\n        address indexed creator,\\n        ProposalType proposalType,\\n        string title\\n    );\\n    \\n    event VoteCast(\\n        uint256 indexed proposalId,\\n        uint256 indexed citizenId,\\n        address indexed voter,\\n        bool support,\\n        uint256 votingPower\\n    );\\n    \\n    event ProposalExecuted(\\n        uint256 indexed proposalId,\\n        ProposalStatus finalStatus,\\n        uint256 yesVotes,\\n        uint256 noVotes\\n    );\\n    \\n    event ProposalStatusChanged(\\n        uint256 indexed proposalId,\\n        ProposalStatus oldStatus,\\n        ProposalStatus newStatus\\n    );\\n    \\n    // Modifiers\\n    modifier onlyRegisteredCitizen() {\\n        require(citizenRegistry.isCitizenRegistered(msg.sender), \\\"Voting: Must be registered citizen\\\");\\n        _;\\n    }\\n    \\n    modifier validProposalId(uint256 _proposalId) {\\n        require(_proposalId > 0 && _proposalId <= _proposalIdCounter, \\\"Voting: Invalid proposal ID\\\");\\n        _;\\n    }\\n    \\n    modifier onlyProposalCreator(uint256 _proposalId) {\\n        require(proposals[_proposalId].creator == msg.sender, \\\"Voting: Not proposal creator\\\");\\n        _;\\n    }\\n    \\n    modifier proposalActive(uint256 _proposalId) {\\n        require(proposals[_proposalId].status == ProposalStatus.ACTIVE, \\\"Voting: Proposal not active\\\");\\n        require(block.timestamp <= proposals[_proposalId].votingEndTimestamp, \\\"Voting: Voting period ended\\\");\\n        _;\\n    }\\n    \\n    constructor(\\n        address initialOwner,\\n        address _citizenRegistry,\\n        address _reputationSystem,\\n        address _projectRegistry\\n    ) Ownable(initialOwner) {\\n        require(_citizenRegistry != address(0), \\\"Voting: Invalid citizen registry\\\");\\n        require(_reputationSystem != address(0), \\\"Voting: Invalid reputation system\\\");\\n        require(_projectRegistry != address(0), \\\"Voting: Invalid project registry\\\");\\n        \\n        citizenRegistry = CitizenIdentityRegistry(_citizenRegistry);\\n        reputationSystem = ReputationSystem(_reputationSystem);\\n        projectRegistry = GovernmentProjectRegistry(_projectRegistry);\\n    }\\n    \\n    /**\\n     * @dev Create a new governance proposal (simplified to avoid stack too deep)\\n     */\\n    function createProposal(\\n        string memory _title,\\n        string memory _description,\\n        ProposalType _proposalType,\\n        uint256 _votingPeriod,\\n        uint256 _relatedProjectId\\n    ) external onlyRegisteredCitizen nonReentrant {\\n        require(bytes(_title).length > 0, \\\"Voting: Title cannot be empty\\\");\\n        require(bytes(_description).length > 10, \\\"Voting: Description too short\\\");\\n        \\n        // Get creator's citizen ID and check reputation\\n        uint256 creatorCitizenId = 0;\\n        try citizenRegistry.getCitizenByWallet(msg.sender) returns (CitizenIdentityRegistry.CitizenProfile memory profile) {\\n            creatorCitizenId = profile.citizenId;\\n            require(profile.reputationScore >= minimumReputationToPropose, \\\"Voting: Insufficient reputation\\\");\\n        } catch {\\n            revert(\\\"Voting: Failed to get citizen profile\\\");\\n        }\\n        \\n        _proposalIdCounter++;\\n        uint256 newProposalId = _proposalIdCounter;\\n        \\n        proposals[newProposalId] = Proposal({\\n            proposalId: newProposalId,\\n            creatorCitizenId: creatorCitizenId,\\n            creator: msg.sender,\\n            title: _title,\\n            ipfsDescriptionHash: _description,\\n            proposalType: _proposalType,\\n            status: ProposalStatus.ACTIVE,\\n            creationTimestamp: block.timestamp,\\n            votingEndTimestamp: block.timestamp + (_votingPeriod > 0 ? _votingPeriod : defaultVotingPeriod),\\n            executionTimestamp: 0,\\n            yesVotes: 0,\\n            noVotes: 0,\\n            totalVotingPower: 0,\\n            quorumRequired: minimumQuorum,\\n            passingThreshold: defaultPassingThreshold,\\n            executionData: \\\"\\\",\\n            ipfsDocumentHash: \\\"\\\",\\n            isExecuted: false,\\n            relatedProjectId: _relatedProjectId\\n        });\\n        \\n        citizenProposals[msg.sender].push(newProposalId);\\n        typeProposals[uint256(_proposalType)].push(newProposalId);\\n        \\n        emit ProposalCreated(newProposalId, creatorCitizenId, msg.sender, _proposalType, _title);\\n    }\\n    \\n    /**\\n     * @dev Cast vote on a proposal\\n     */\\n    function castVote(\\n        uint256 _proposalId,\\n        bool _support,\\n        string memory _reason\\n    ) external onlyRegisteredCitizen validProposalId(_proposalId) proposalActive(_proposalId) {\\n        // Get voter's citizen ID and reputation\\n        uint256 voterCitizenId = 0;\\n        uint256 voterReputation = 0;\\n        \\n        try citizenRegistry.getCitizenByWallet(msg.sender) returns (CitizenIdentityRegistry.CitizenProfile memory profile) {\\n            voterCitizenId = profile.citizenId;\\n            voterReputation = profile.reputationScore;\\n        } catch {\\n            revert(\\\"Voting: Failed to get citizen profile\\\");\\n        }\\n        \\n        require(voterReputation >= minimumReputationToVote, \\\"Voting: Insufficient reputation to vote\\\");\\n        require(!hasVoted[_proposalId][voterCitizenId], \\\"Voting: Already voted on this proposal\\\");\\n        require(proposals[_proposalId].creatorCitizenId != voterCitizenId, \\\"Voting: Cannot vote on own proposal\\\");\\n        \\n        // Calculate voting power based on reputation\\n        uint256 votingPower = _calculateVotingPower(voterReputation);\\n        \\n        // Record vote\\n        proposalVotes[_proposalId].push(Vote({\\n            citizenId: voterCitizenId,\\n            voter: msg.sender,\\n            support: _support,\\n            votingPower: votingPower,\\n            timestamp: block.timestamp,\\n            reason: _reason\\n        }));\\n        \\n        hasVoted[_proposalId][voterCitizenId] = true;\\n        \\n        // Update proposal vote counts\\n        Proposal storage proposal = proposals[_proposalId];\\n        proposal.totalVotingPower += votingPower;\\n        \\n        if (_support) {\\n            proposal.yesVotes += votingPower;\\n        } else {\\n            proposal.noVotes += votingPower;\\n        }\\n        \\n        // Award reputation for voting participation\\n        bytes32 voteHash = keccak256(abi.encodePacked(\\\"vote\\\", _proposalId));\\n        try reputationSystem.addVotingReputation(voterCitizenId, voteHash) {} catch {}\\n        \\n        emit VoteCast(_proposalId, voterCitizenId, msg.sender, _support, votingPower);\\n        \\n        // Check if proposal can be executed early\\n        _checkProposalExecution(_proposalId);\\n    }\\n    \\n    /**\\n     * @dev Execute proposal after voting period ends\\n     */\\n    function executeProposal(uint256 _proposalId) external validProposalId(_proposalId) {\\n        Proposal storage proposal = proposals[_proposalId];\\n        require(proposal.status == ProposalStatus.ACTIVE, \\\"Voting: Proposal not active\\\");\\n        require(block.timestamp > proposal.votingEndTimestamp || _canExecuteEarly(_proposalId), \\n                \\\"Voting: Voting period not ended and cannot execute early\\\");\\n        require(!proposal.isExecuted, \\\"Voting: Proposal already executed\\\");\\n        \\n        ProposalStatus newStatus = _determineProposalResult(_proposalId);\\n        proposal.status = newStatus;\\n        proposal.executionTimestamp = block.timestamp;\\n        proposal.isExecuted = true;\\n        \\n        emit ProposalExecuted(_proposalId, newStatus, proposal.yesVotes, proposal.noVotes);\\n        \\n        // If proposal passed, execute any on-chain actions\\n        if (newStatus == ProposalStatus.PASSED && proposal.executionData.length > 0) {\\n            _executeProposalActions(_proposalId);\\n        }\\n    }\\n    \\n    // View functions\\n    function getProposal(uint256 _proposalId) external view validProposalId(_proposalId) returns (Proposal memory) {\\n        return proposals[_proposalId];\\n    }\\n    \\n    function getProposalVotes(uint256 _proposalId) external view validProposalId(_proposalId) returns (Vote[] memory) {\\n        return proposalVotes[_proposalId];\\n    }\\n    \\n    function getProposalsByType(ProposalType _proposalType) external view returns (uint256[] memory) {\\n        return typeProposals[uint256(_proposalType)];\\n    }\\n    \\n    function getCitizenProposals(address _citizen) external view returns (uint256[] memory) {\\n        return citizenProposals[_citizen];\\n    }\\n    \\n    function getActiveProposals() external view returns (uint256[] memory) {\\n        uint256 count = 0;\\n        \\n        // Count active proposals\\n        for (uint256 i = 1; i <= _proposalIdCounter; i++) {\\n            if (proposals[i].status == ProposalStatus.ACTIVE && \\n                block.timestamp <= proposals[i].votingEndTimestamp) {\\n                count++;\\n            }\\n        }\\n        \\n        // Create result array\\n        uint256[] memory activeProposals = new uint256[](count);\\n        uint256 index = 0;\\n        \\n        for (uint256 i = 1; i <= _proposalIdCounter; i++) {\\n            if (proposals[i].status == ProposalStatus.ACTIVE && \\n                block.timestamp <= proposals[i].votingEndTimestamp) {\\n                activeProposals[index] = i;\\n                index++;\\n            }\\n        }\\n        \\n        return activeProposals;\\n    }\\n    \\n    function getTotalProposals() external view returns (uint256) {\\n        return _proposalIdCounter;\\n    }\\n    \\n    function getVotingStats() external view returns (\\n        uint256 totalProposals,\\n        uint256 activeProposals,\\n        uint256 passedProposals,\\n        uint256 rejectedProposals\\n    ) {\\n        uint256 active = 0;\\n        uint256 passed = 0;\\n        uint256 rejected = 0;\\n        \\n        for (uint256 i = 1; i <= _proposalIdCounter; i++) {\\n            ProposalStatus status = proposals[i].status;\\n            \\n            if (status == ProposalStatus.ACTIVE && block.timestamp <= proposals[i].votingEndTimestamp) {\\n                active++;\\n            } else if (status == ProposalStatus.PASSED) {\\n                passed++;\\n            } else if (status == ProposalStatus.REJECTED) {\\n                rejected++;\\n            }\\n        }\\n        \\n        return (_proposalIdCounter, active, passed, rejected);\\n    }\\n    \\n    // Internal functions\\n    function _calculateVotingPower(uint256 _reputation) internal pure returns (uint256) {\\n        // Base voting power with reputation multiplier\\n        if (_reputation >= 1000) return 100;      // High reputation\\n        else if (_reputation >= 500) return 50;   // Medium reputation\\n        else if (_reputation >= 100) return 25;   // Basic reputation\\n        else return 10;                           // Minimum voting power\\n    }\\n    \\n    function _checkProposalExecution(uint256 _proposalId) internal {\\n        if (_canExecuteEarly(_proposalId)) {\\n            Proposal storage proposal = proposals[_proposalId];\\n            ProposalStatus newStatus = _determineProposalResult(_proposalId);\\n            proposal.status = newStatus;\\n            proposal.executionTimestamp = block.timestamp;\\n            proposal.isExecuted = true;\\n            \\n            emit ProposalExecuted(_proposalId, newStatus, proposal.yesVotes, proposal.noVotes);\\n        }\\n    }\\n    \\n    function _canExecuteEarly(uint256 _proposalId) internal view returns (bool) {\\n        Proposal storage proposal = proposals[_proposalId];\\n        \\n        // Early execution if quorum met and overwhelming majority\\n        if (proposal.totalVotingPower >= proposal.quorumRequired) {\\n            uint256 yesPercentage = (proposal.yesVotes * 10000) / proposal.totalVotingPower;\\n            return yesPercentage >= 8000; // 80% majority allows early execution\\n        }\\n        \\n        return false;\\n    }\\n    \\n    function _determineProposalResult(uint256 _proposalId) internal view returns (ProposalStatus) {\\n        Proposal storage proposal = proposals[_proposalId];\\n        \\n        // Check quorum\\n        if (proposal.totalVotingPower < proposal.quorumRequired) {\\n            return ProposalStatus.EXPIRED;\\n        }\\n        \\n        // Check passing threshold\\n        uint256 yesPercentage = (proposal.yesVotes * 10000) / proposal.totalVotingPower;\\n        return yesPercentage >= proposal.passingThreshold ? ProposalStatus.PASSED : ProposalStatus.REJECTED;\\n    }\\n    \\n    function _executeProposalActions(uint256 _proposalId) internal {\\n        // Implementation for executing proposal-specific actions\\n        // This could include updating project registry, treasury allocations, etc.\\n        Proposal storage proposal = proposals[_proposalId];\\n        \\n        if (proposal.proposalType == ProposalType.PROJECT_APPROVAL && proposal.relatedProjectId > 0) {\\n            // Could trigger project status update in project registry\\n            // projectRegistry.updateProjectStatus(proposal.relatedProjectId, ProjectStatus.APPROVED);\\n        }\\n    }\\n    \\n    // Admin functions\\n    function updateVotingConfig(\\n        uint256 _defaultVotingPeriod,\\n        uint256 _minimumQuorum,\\n        uint256 _defaultPassingThreshold,\\n        uint256 _minimumReputationToPropose,\\n        uint256 _minimumReputationToVote\\n    ) external onlyOwner {\\n        require(_defaultPassingThreshold >= 5000 && _defaultPassingThreshold <= 10000, \\n                \\\"Voting: Invalid passing threshold\\\");\\n        \\n        defaultVotingPeriod = _defaultVotingPeriod;\\n        minimumQuorum = _minimumQuorum;\\n        defaultPassingThreshold = _defaultPassingThreshold;\\n        minimumReputationToPropose = _minimumReputationToPropose;\\n        minimumReputationToVote = _minimumReputationToVote;\\n    }\\n    \\n    function cancelProposal(uint256 _proposalId) external validProposalId(_proposalId) {\\n        require(\\n            proposals[_proposalId].creator == msg.sender || msg.sender == owner(),\\n            \\\"Voting: Not authorized to cancel\\\"\\n        );\\n        require(proposals[_proposalId].status == ProposalStatus.ACTIVE, \\\"Voting: Proposal not active\\\");\\n        \\n        ProposalStatus oldStatus = proposals[_proposalId].status;\\n        proposals[_proposalId].status = ProposalStatus.CANCELLED;\\n        \\n        emit ProposalStatusChanged(_proposalId, oldStatus, ProposalStatus.CANCELLED);\\n    }\\n    \\n    function updateReputationSystem(address _reputationSystem) external onlyOwner {\\n        require(_reputationSystem != address(0), \\\"Voting: Invalid reputation system\\\");\\n        reputationSystem = ReputationSystem(_reputationSystem);\\n    }\\n    \\n    function updateProjectRegistry(address _projectRegistry) external onlyOwner {\\n        require(_projectRegistry != address(0), \\\"Voting: Invalid project registry\\\");\\n        projectRegistry = GovernmentProjectRegistry(_projectRegistry);\\n    }\\n}\",\"keccak256\":\"0x8833f018351f3ef46ffdf317ec201dd9147e12b514cbc9f576421456a2d1c8d7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0346200023357601f62002dc638819003918201601f191683019291906001600160401b0384118385101762000238578160809284926040968752833981010312620002335762000051816200024e565b90602091620000628383016200024e565b6200007d6060620000758786016200024e565b94016200024e565b6001600160a01b039283169390929084156200021b57816000549360018060a01b0319968088871617600055828a5196167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a36001805562093a80600a556103e8600b556113ec600c556064600d556032600e5516928315620001db575081169283156200018d57169384156200014b5750608052816002541617600255600354161760035551612b6290816200026482396080518181816107dc0152818161132d0152611d820152f35b60649086519062461bcd60e51b825280600483015260248201527f566f74696e673a20496e76616c69642070726f6a6563742072656769737472796044820152fd5b865162461bcd60e51b815260048101879052602160248201527f566f74696e673a20496e76616c69642072657075746174696f6e2073797374656044820152606d60f81b6064820152608490fd5b6064908762461bcd60e51b825280600483015260248201527f566f74696e673a20496e76616c696420636974697a656e2072656769737472796044820152fd5b8651631e4fbdf760e01b815260006004820152602490fd5b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b0382168203620002335756fe61010080604052600436101561001457600080fd5b600090813560e01c908163013cf08b1461219a57508063099ba3e6146121275780630d61b51914611f335780630d68eb9e14611e94578063125b5e9a14611e765780631a5007dd14611e58578063216ed81a14611db1578063386ca89d14611d6c57806347c6614014611bdb57806353b5059414611b585780635584c4f9146119f35780635a33d8dc146119ca57806362aef6f0146112da57806364390ff1146112a85780636587eda11461127f57806366255cda146111e95780636beef7d1146111cb578063715018a61461117157806376804a03146110715780638160f0b5146110535780638da5cb5b1461102c5780639f6703af14610ffa578063a83bf50a14610fdc578063b498c7c01461076c578063b6d5f5181461074e578063bc210810146106f8578063c7f758a8146103ba578063e0a8f6f514610284578063f2fde38b146101f95763f3e6e08a1461016c57600080fd5b346101f65760203660031901126101f657610185612549565b61018d612661565b6001600160a01b031680156101b2576001600160601b0360a01b600354161760035580f35b606460405162461bcd60e51b815260206004820152602060248201527f566f74696e673a20496e76616c69642070726f6a6563742072656769737472796044820152fd5b80fd5b50346101f65760203660031901126101f657610213612549565b61021b612661565b6001600160a01b0390811690811561026b57600054826001600160601b0360a01b821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b604051631e4fbdf760e01b815260048101849052602490fd5b50346101f6576020806003193601126103b65760043590811515806103aa575b6102ad90612965565b818352600581526040832060020154336001600160a01b039182161490811561039d575b501561035a5760407fb0978968e606225988b6464f99ce7e86b0e8770d80eaec1369bb3780e05c6438918385526005815261032160ff6005848820015460081c1661031b81612529565b156129b1565b838552600580825282862001805461ff001981166104001790915582519160049160081c60ff1661035181612529565b8352820152a280f35b6064906040519062461bcd60e51b825280600483015260248201527f566f74696e673a204e6f7420617574686f72697a656420746f2063616e63656c6044820152fd5b90508354163314386102d1565b506004548211156102a4565b5080fd5b50346101f65760203660031901126101f6578060409161024083516103de81612489565b8281528260208201528285820152606080820152606060808201528260a08201528260c08201528260e08201528261010082015282610120820152826101408201528261016082015282610180820152826101a0820152826101c082015260606101e082015260606102008201528261022082015201526004351515806106ea575b61046990612965565b600435815260056020522060116040519161048383612489565b805483526001810154602084015260028101546001600160a01b0316604080850191909152516104c1816104ba81600386016123c2565b03826124c0565b60608401526040516104da816104ba81600486016123c2565b608084015260ff60058201546104f1828216612529565b81811660a0860152610507828260081c16612529565b60081c1660c0840152600681015460e0840152600781015461010084015260088101546101208401526009810154610140840152600a810154610160840152600b810154610180840152600c8101546101a0840152600d8101546101c084015260405161057b816104ba81600e86016123c2565b6101e0840152604051610595816104ba81600f86016123c2565b61020084015260ff60108201541615156102208401520154610240820152604051809160208252805160208301526020810151604083015260018060a01b0360408201511660608301526102406106d16106b961061c61060660608601516102606080890152610280880190612504565b6080860151878203601f190160a0890152612504565b60a085015161062a81612529565b60c087015260c085015161063d81612529565b60e087015260e08501516101008701526101008501516101208701526101208501516101408701526101408501516101608701526101608501516101808701526101808501516101a08701526101a08501516101c08701526101c08501516101e08701526101e0850151601f1987830301610200880152612504565b610200840151858203601f1901610220870152612504565b9161022081015115158285015201516102608301520390f35b506004805490351115610460565b50346101f65760403660031901126101f657610712612549565b6001600160a01b03168152600860205260408120805460243592908310156101f65760206107408484612649565b90546040519160031b1c8152f35b50346101f657806003193601126101f6576020600c54604051908152f35b50346101f65760a03660031901126101f6576004356001600160401b0381116103b65761079d903690600401612602565b6024356001600160401b038111610fd8576107bc903690600401612602565b60056044351015610fd8576040516305c7664d60e31b81523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169190602081602481865afa8015610fcd578590610f8e575b610826915061269a565b600260015414610f7c576002600155825115610f3757600a81511115610ef25783602492604051938480926370cf630f60e11b82523360048301525afa849281610ece575b5061088d5760405162461bcd60e51b81528061088960048201612845565b0390fd5b6101408251920151600d5411610e89576108a860045461288b565b6004819055906064358015610e7d576108c2905b426128b0565b600b54600c5491604051936108d685612489565b85855286602086015233604086015287606086015260808501526108fb604435612529565b60443560a08501528760c08501524260e0850152610100840152866101208401528661014084015286610160840152866101808401526101a08301526101c0820152604051610949816124a5565b8581526101e082015260405161095e816124a5565b858152610200820152846102208201526084356102408201528185526005602052604085209080518255602081015160018301556002820160018060a01b036040830151166001600160601b0360a01b82541617905560608101518051906001600160401b038211610cfb5781906109e6826109dd6003880154612388565b600388016128bd565b602090601f8311600114610e0e578992610e03575b50508160011b916000199060031b1c19161760038301555b60808101518051906001600160401b038211610cfb578190610a4582610a3c6004880154612388565b600488016128bd565b602090601f8311600114610d94578992610d89575b50508160011b916000199060031b1c19161760048301555b60a0810151610a8081612529565b610a8981612529565b60ff80196005850154169116176005830155610ab560c0820151610aac81612529565b60058401612911565b60e08101516006830155610100810151600783015561012081015160088301556101408101516009830155610160810151600a830155610180810151600b8301556101a0810151600c8301556101c0810151600d8301556101e08101518051906001600160401b038211610cfb578190610b3f82610b36600e880154612388565b600e88016128bd565b602090601f8311600114610d1a578992610d0f575b50508160011b916000199060031b1c191617600e8301555b6102008101518051906001600160401b038211610cfb57610b9d82610b94600f870154612388565b600f87016128bd565b602090601f8311600114610c8857918060119492610240948b92610c7d575b50508160011b916000199060031b1c191617600f8501555b60108401610220820151151560ff8019835416911617905501519101553384526008602052610c068160408620612930565b610c11604435612529565b60443584526009602052610c288160408620612930565b7fb1d569dc5621a0a51229b7ac0eff81f3e6df70a3f72fe608aa58f74bb69d7bb6604051610c57604435612529565b60443581526040602082015280610c7333966040830190612504565b0390a46001805580f35b015190503880610bbc565b90600f850189526020892091895b601f1985168110610ce3575092601194926001926102409583601f19811610610cca575b505050811b01600f850155610bd4565b015160001960f88460031b161c19169055388080610cba565b91926020600181928685015181550194019201610c96565b634e487b7160e01b88526041600452602488fd5b015190503880610b54565b9250600e85018952602089209089935b601f1984168510610d6e576001945083601f19811610610d55575b505050811b01600e830155610b6c565b015160001960f88460031b161c19169055388080610d45565b81810151835560209485019460019093019290910190610d2a565b015190503880610a5a565b9250600485018952602089209089935b601f1984168510610de8576001945083601f19811610610dcf575b505050811b016004830155610a72565b015160001960f88460031b161c19169055388080610dbf565b81810151835560209485019460019093019290910190610da4565b0151905038806109fb565b9250600385018952602089209089935b601f1984168510610e62576001945083601f19811610610e49575b505050811b016003830155610a13565b015160001960f88460031b161c19169055388080610e39565b81810151835560209485019460019093019290910190610e1e565b506108c2600a546108bc565b60405162461bcd60e51b815260206004820152601f60248201527f566f74696e673a20496e73756666696369656e742072657075746174696f6e006044820152606490fd5b610eeb9193503d8087833e610ee381836124c0565b810190612736565b913861086b565b60405162461bcd60e51b815260206004820152601d60248201527f566f74696e673a204465736372697074696f6e20746f6f2073686f72740000006044820152606490fd5b60405162461bcd60e51b815260206004820152601d60248201527f566f74696e673a205469746c652063616e6e6f7420626520656d7074790000006044820152606490fd5b604051633ee5aeb560e01b8152600490fd5b506020813d602011610fc5575b81610fa8602093836124c0565b81010312610fc157610fbc6108269161268d565b61081c565b8480fd5b3d9150610f9b565b6040513d87823e3d90fd5b8280fd5b50346101f657806003193601126101f6576020600a54604051908152f35b50346101f6576110093661259f565b919081526009602052604081209081548310156101f65760206107408484612649565b50346101f657806003193601126101f657546040516001600160a01b039091168152602090f35b50346101f657806003193601126101f6576020600b54604051908152f35b50346101f657806003193601126101f6576004548180600180825b858311156110b25750505092608093604051938452602084015260408301526060820152f35b9091928382526005602081815260ff8260408620015460081c16916110d683612529565b8215918261115a575b50501561110057506110f36110f99161288b565b9361288b565b919061108c565b61110d8198929598612529565b80840361112757506111216110f99161288b565b9661288b565b80611136600292999399612529565b14611145575b6110f99061288b565b936111526110f99161288b565b94905061113c565b8786525250604083206007015442111538806110df565b50346101f657806003193601126101f65761118a612661565b600080546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b50346101f657806003193601126101f6576020600d54604051908152f35b50346101f65760203660031901126101f657611203612549565b61120b612661565b6001600160a01b03168015611230576001600160601b0360a01b600254161760025580f35b60405162461bcd60e51b815260206004820152602160248201527f566f74696e673a20496e76616c69642072657075746174696f6e2073797374656044820152606d60f81b6064820152608490fd5b50346101f657806003193601126101f6576002546040516001600160a01b039091168152602090f35b50346101f65760ff60406020926112be3661259f565b9082526007855282822090825284522054166040519015158152f35b50346101f65760603660031901126101f6576024351515602435036101f6576044356001600160401b0381116103b657611318903690600401612602565b6040516305c7664d60e31b81523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690602081602481855afa80156119bf578490611980575b611376915061269a565b600435151580611972575b61138a90612965565b600435835260056020526113ae60ff600560408620015460081c1661031b81612529565b600435835260056020526007604084200154421161192d5782602491604051928380926370cf630f60e11b82523360048301525afa839181611911575b506114095760405162461bcd60e51b81528061088960048201612845565b6101408151910151600e5481106118bc57600435845260076020526040842082855260205260ff6040852054166118685760043584526005602052816001604086200154146118175761145b90612a32565b9160043584526006602052604084206040519161147783612458565b8383523360208401526024351515604084015284606084015242608084015260a0830152805490600160401b8210156117ef57906114ba916001820181556125b5565b919091611803578060a09151835560018301600180841b0360208301511681549060ff851b60408501511515861b16916affffffffffffffffffffff60a81b1617179055606081015160028401556080810151600384015501518051906001600160401b0382116117ef5761153f826115366004860154612388565b600486016128bd565b602090601f83116001146117825760049291879183611777575b50508160011b916000199060031b1c1916179101555b600435835260076020526040832081845260205260408320600160ff198254161790556004358352600560205260408320600b81016115af8482546128b0565b905560243515611762576009016115c78382546128b0565b90555b60405163766f746560e01b60208201526004356024820152602481528060608101106001600160401b0360608301111761174e5760608101604052838151602083012060018060a01b036002541690813b15610fd857621b88c160ea1b60608501528460648501526084840152604460608401918360608601915af1611719575b506040519160243515158352602083015233917fd72a296265de05f7f425107ca376651b68831fa700c5ed272487924e44532dc5604060043592a4611691600435612a81565b6116985780f35b60043581526005602052604081207ffe720701ff1e6911b3b487f3b4c49853b54be0002c601fe540188d7a1e60e16b6116d2600435612ad1565b916116e08360058301612911565b42600882015560108101600160ff19825416179055600a60098201549101549061171360405192839260043596846129fd565b0390a280f35b6001600160401b03606082959395011161173a57606001604052913861164b565b634e487b7160e01b82526041600452602482fd5b634e487b7160e01b84526041600452602484fd5b600a016117708382546128b0565b90556115ca565b015190503880611559565b906004840187526020872091875b601f19851681106117d75750918391600193600495601f198116106117be575b505050811b0191015561156f565b015160001960f88460031b161c191690553880806117b0565b91926020600181928685015181550194019201611790565b634e487b7160e01b86526041600452602486fd5b634e487b7160e01b85526004859052602485fd5b60405162461bcd60e51b815260206004820152602360248201527f566f74696e673a2043616e6e6f7420766f7465206f6e206f776e2070726f706f6044820152621cd85b60ea1b6064820152608490fd5b60405162461bcd60e51b815260206004820152602660248201527f566f74696e673a20416c726561647920766f746564206f6e20746869732070726044820152651bdc1bdcd85b60d21b6064820152608490fd5b60405162461bcd60e51b815260206004820152602760248201527f566f74696e673a20496e73756666696369656e742072657075746174696f6e20604482015266746f20766f746560c81b6064820152608490fd5b6119269192503d8086833e610ee381836124c0565b90386113eb565b60405162461bcd60e51b815260206004820152601b60248201527f566f74696e673a20566f74696e6720706572696f6420656e64656400000000006044820152606490fd5b506004805490351115611381565b506020813d6020116119b7575b8161199a602093836124c0565b810103126119b3576119ae6113769161268d565b61136c565b8380fd5b3d915061198d565b6040513d86823e3d90fd5b50346101f657806003193601126101f6576003546040516001600160a01b039091168152602090f35b50346101f657806003193601126101f657806001600454905b81811115611aee5750611a1e82612a1b565b91611a2c60405193846124c0565b808352611a3b601f1991612a1b565b0160209036828501378360015b83811115611a625760405180611a5e8782612564565b0390f35b808252600580845260ff8160408520015460081c16611a8081612529565b1580611ad7575b611a9b575b50611a969061288b565b611a48565b8596919651821015611ac357818785611a9694611abc941b8901015261288b565b9590611a8c565b634e487b7160e01b83526032600452602483fd5b508183528084526007604084200154421115611a87565b808452600560209080825260ff8160408820015460081c16611b0f81612529565b159182611b41575b5050611b2c575b611b279061288b565b611a0c565b91611b39611b279161288b565b929050611b1e565b838752525060408420600701544211153880611b17565b50346101f6576020806003193601126103b6576004356005811015610fd857611b8081612529565b82526009815260408220916040518092808554928381520194835280832092905b828210611bc457611a5e85611bb8818903826124c0565b60405191829182612564565b835486529485019460019384019390910190611ba1565b50346101f6576020806003193601126103b65760043580151580611d60575b611c0690939293612965565b81526006825260408120805491611c1c83612a1b565b92611c2a60405194856124c0565b8084528484018093835285832083915b838310611ce25750505050604051928484019085855251809152604084019460408260051b8601019392955b828710611c735785850386f35b909192938280611cd2600193603f198a8203018652885180518252858060a01b03848201511684830152604081015115156040830152606080820151908301526080808201519083015260a0809101519160c080928201520190612504565b9601920196019592919092611c66565b60058860019260409a99979a51611cf881612458565b8554815284860154858060a01b0381168483015260ff60a091821c1615156040830152600287015460608301526003870154608083015260405190611d4b82611d448160048c016123c2565b03836124c0565b82015281520192019201919096939596611c3a565b50600454811115611bfa565b50346101f657806003193601126101f6576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50346101f65760a03660031901126101f657604435611dce612661565b61138881101580611e4c575b15611dfd57600435600a55602435600b55600c55606435600d55608435600e5580f35b60405162461bcd60e51b815260206004820152602160248201527f566f74696e673a20496e76616c69642070617373696e67207468726573686f6c6044820152601960fa1b6064820152608490fd5b50612710811115611dda565b50346101f657806003193601126101f6576020600454604051908152f35b50346101f657806003193601126101f6576020600e54604051908152f35b50346101f657611ea33661259f565b9082526006602052604082208054821015610fd857611ec292506125b5565b508054611a5e60046001840154936002810154611ef5600383015492611eee60405180968193016123c2565b03846124c0565b60ff604051968796875260018060a01b038116602088015260a01c16151560408601526060850152608084015260c060a084015260c0830190612504565b50346101f65760203660031901126101f6576004358015158061211b575b611f5a90612965565b80825260056020526040822060058101611f7e60ff825460081c1661031b81612529565b60078201544211801561210c575b156120a157601082019060ff82541661205257600191611fb5611fae86612ad1565b8093612911565b4260088501558260ff19825416179055837ffe720701ff1e6911b3b487f3b4c49853b54be0002c601fe540188d7a1e60e16b6009850154600a8601549061200260405192839287846129fd565b0390a261200e81612529565b14908161203c575b5061201f575080f35b8152600560205261203960ff600560408420015416612529565b80f35b61204a9150600e0154612388565b151538612016565b60405162461bcd60e51b815260206004820152602160248201527f566f74696e673a2050726f706f73616c20616c726561647920657865637574656044820152601960fa1b6064820152608490fd5b60405162461bcd60e51b815260206004820152603860248201527f566f74696e673a20566f74696e6720706572696f64206e6f7420656e6465642060448201527f616e642063616e6e6f742065786563757465206561726c7900000000000000006064820152608490fd5b5061211683612a81565b611f8c565b50600454811115611f51565b50346101f6576020806003193601126103b6576001600160a01b0361214a612549565b1682526008815260408220916040518092808554928381520194835280832092905b82821061218357611a5e85611bb8818903826124c0565b83548652948501946001938401939091019061216c565b82346101f65760203660031901126101f6576004358152600560205260409020805460e052600181015460028201546001600160a01b031660c052918190806121e681600385016123c2565b036121f190826124c0565b604051908161220381600486016123c2565b0361220e90836124c0565b600583015491600684015460078501546008860154600987015490600a88015492600b89015494600c8a015496600d8b01549860405180600e819e0190612254916123c2565b0361225f908d6124c0565b6040519c8d8061227281600f85016123c2565b0361227c916124c0565b601081015460ff16608052601101549d6040518060a05260e051905260a0516020015260c05160a051604001526102608060a0516060015260a051016122c191612504565b60a05180820390608001526122d591612504565b9860ff81166122e381612529565b60a05160a0015260081c60ff166122f981612529565b60a05160c0015260a05160e0015260a051610100015260a051610120015260a051610140015260a051610160015260a051610180015260a0516101a0015260a0516101c0015260a051808203906101e0015261235491612504565b60a05180820390610200015261236991612504565b90608051151560a051610220015260a051610240015260a05180910390f35b90600182811c921680156123b8575b60208310146123a257565b634e487b7160e01b600052602260045260246000fd5b91607f1691612397565b90600092918054916123d383612388565b91828252600193848116908160001461243557506001146123f5575b50505050565b90919394506000526020928360002092846000945b8386106124215750505050010190388080806123ef565b80548587018301529401938590820161240a565b9294505050602093945060ff191683830152151560051b010190388080806123ef565b60c081019081106001600160401b0382111761247357604052565b634e487b7160e01b600052604160045260246000fd5b61026081019081106001600160401b0382111761247357604052565b602081019081106001600160401b0382111761247357604052565b90601f801991011681019081106001600160401b0382111761247357604052565b60005b8381106124f45750506000910152565b81810151838201526020016124e4565b9060209161251d815180928185528580860191016124e1565b601f01601f1916010190565b6005111561253357565b634e487b7160e01b600052602160045260246000fd5b600435906001600160a01b038216820361255f57565b600080fd5b6020908160408183019282815285518094520193019160005b82811061258b575050505090565b83518552938101939281019260010161257d565b604090600319011261255f576004359060243590565b80548210156125d1576000526005602060002091020190600090565b634e487b7160e01b600052603260045260246000fd5b6001600160401b03811161247357601f01601f191660200190565b81601f8201121561255f57803590612619826125e7565b9261262760405194856124c0565b8284526020838301011161255f57816000926020809301838601378301015290565b80548210156125d15760005260206000200190600090565b6000546001600160a01b0316330361267557565b60405163118cdaa760e01b8152336004820152602490fd5b5190811515820361255f57565b156126a157565b60405162461bcd60e51b815260206004820152602260248201527f566f74696e673a204d757374206265207265676973746572656420636974697a60448201526132b760f11b6064820152608490fd5b81601f8201121561255f578051612707816125e7565b9261271560405194856124c0565b8184526020828401011161255f5761273391602080850191016124e1565b90565b60208183031261255f5780516001600160401b039182821161255f570161018092838282031261255f5760405193840184811084821117612473576040528151845260208201516001600160a01b038116810361255f576020850152604082015183811161255f57816127aa9184016126f1565b6040850152606082015183811161255f57816127c79184016126f1565b60608501526080820151608085015260a082015160a085015260c0820151600481101561255f5760c085015260e082015160e0850152610100808301519085015261012061281681840161268d565b908501526101408083015190850152610160928383015190811161255f5761283e92016126f1565b9082015290565b60809060208152602560208201527f566f74696e673a204661696c656420746f2067657420636974697a656e2070726040820152646f66696c6560d81b60608201520190565b600019811461289a5760010190565b634e487b7160e01b600052601160045260246000fd5b9190820180921161289a57565b90601f81116128cb57505050565b600091825260208220906020601f850160051c83019410612907575b601f0160051c01915b8281106128fc57505050565b8181556001016128f0565b90925082906128e7565b9061291b81612529565b61ff0082549160081b169061ff001916179055565b8054600160401b8110156124735761294d91600182018155612649565b819291549060031b91821b91600019901b1916179055565b1561296c57565b60405162461bcd60e51b815260206004820152601b60248201527f566f74696e673a20496e76616c69642070726f706f73616c20494400000000006044820152606490fd5b156129b857565b60405162461bcd60e51b815260206004820152601b60248201527f566f74696e673a2050726f706f73616c206e6f742061637469766500000000006044820152606490fd5b60608101949392604092612a1081612529565b825260208201520152565b6001600160401b0381116124735760051b60200190565b6103e88110612a415750606490565b6101f48110612a505750603290565b606411612a5c57601990565b600a90565b8115612a6b570490565b634e487b7160e01b600052601260045260246000fd5b60005260056020526040600020600b81015490600c810154821015612aa7575050600090565b600901546127109081810291818304149015171561289a57611f4091612acc91612a61565b101590565b60005260056020526040600020600b810154600c8201548110612b255760098201546127109081810291818304149015171561289a57600d91612b1391612a61565b91015411612b2057600190565b600290565b505060039056fea2646970667358221220e0cf7fd0bf3002560c5ee522328dd005fa133b93cae7e253dcf602efa574550764736f6c63430008140033",
  "deployedBytecode": "0x61010080604052600436101561001457600080fd5b600090813560e01c908163013cf08b1461219a57508063099ba3e6146121275780630d61b51914611f335780630d68eb9e14611e94578063125b5e9a14611e765780631a5007dd14611e58578063216ed81a14611db1578063386ca89d14611d6c57806347c6614014611bdb57806353b5059414611b585780635584c4f9146119f35780635a33d8dc146119ca57806362aef6f0146112da57806364390ff1146112a85780636587eda11461127f57806366255cda146111e95780636beef7d1146111cb578063715018a61461117157806376804a03146110715780638160f0b5146110535780638da5cb5b1461102c5780639f6703af14610ffa578063a83bf50a14610fdc578063b498c7c01461076c578063b6d5f5181461074e578063bc210810146106f8578063c7f758a8146103ba578063e0a8f6f514610284578063f2fde38b146101f95763f3e6e08a1461016c57600080fd5b346101f65760203660031901126101f657610185612549565b61018d612661565b6001600160a01b031680156101b2576001600160601b0360a01b600354161760035580f35b606460405162461bcd60e51b815260206004820152602060248201527f566f74696e673a20496e76616c69642070726f6a6563742072656769737472796044820152fd5b80fd5b50346101f65760203660031901126101f657610213612549565b61021b612661565b6001600160a01b0390811690811561026b57600054826001600160601b0360a01b821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b604051631e4fbdf760e01b815260048101849052602490fd5b50346101f6576020806003193601126103b65760043590811515806103aa575b6102ad90612965565b818352600581526040832060020154336001600160a01b039182161490811561039d575b501561035a5760407fb0978968e606225988b6464f99ce7e86b0e8770d80eaec1369bb3780e05c6438918385526005815261032160ff6005848820015460081c1661031b81612529565b156129b1565b838552600580825282862001805461ff001981166104001790915582519160049160081c60ff1661035181612529565b8352820152a280f35b6064906040519062461bcd60e51b825280600483015260248201527f566f74696e673a204e6f7420617574686f72697a656420746f2063616e63656c6044820152fd5b90508354163314386102d1565b506004548211156102a4565b5080fd5b50346101f65760203660031901126101f6578060409161024083516103de81612489565b8281528260208201528285820152606080820152606060808201528260a08201528260c08201528260e08201528261010082015282610120820152826101408201528261016082015282610180820152826101a0820152826101c082015260606101e082015260606102008201528261022082015201526004351515806106ea575b61046990612965565b600435815260056020522060116040519161048383612489565b805483526001810154602084015260028101546001600160a01b0316604080850191909152516104c1816104ba81600386016123c2565b03826124c0565b60608401526040516104da816104ba81600486016123c2565b608084015260ff60058201546104f1828216612529565b81811660a0860152610507828260081c16612529565b60081c1660c0840152600681015460e0840152600781015461010084015260088101546101208401526009810154610140840152600a810154610160840152600b810154610180840152600c8101546101a0840152600d8101546101c084015260405161057b816104ba81600e86016123c2565b6101e0840152604051610595816104ba81600f86016123c2565b61020084015260ff60108201541615156102208401520154610240820152604051809160208252805160208301526020810151604083015260018060a01b0360408201511660608301526102406106d16106b961061c61060660608601516102606080890152610280880190612504565b6080860151878203601f190160a0890152612504565b60a085015161062a81612529565b60c087015260c085015161063d81612529565b60e087015260e08501516101008701526101008501516101208701526101208501516101408701526101408501516101608701526101608501516101808701526101808501516101a08701526101a08501516101c08701526101c08501516101e08701526101e0850151601f1987830301610200880152612504565b610200840151858203601f1901610220870152612504565b9161022081015115158285015201516102608301520390f35b506004805490351115610460565b50346101f65760403660031901126101f657610712612549565b6001600160a01b03168152600860205260408120805460243592908310156101f65760206107408484612649565b90546040519160031b1c8152f35b50346101f657806003193601126101f6576020600c54604051908152f35b50346101f65760a03660031901126101f6576004356001600160401b0381116103b65761079d903690600401612602565b6024356001600160401b038111610fd8576107bc903690600401612602565b60056044351015610fd8576040516305c7664d60e31b81523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169190602081602481865afa8015610fcd578590610f8e575b610826915061269a565b600260015414610f7c576002600155825115610f3757600a81511115610ef25783602492604051938480926370cf630f60e11b82523360048301525afa849281610ece575b5061088d5760405162461bcd60e51b81528061088960048201612845565b0390fd5b6101408251920151600d5411610e89576108a860045461288b565b6004819055906064358015610e7d576108c2905b426128b0565b600b54600c5491604051936108d685612489565b85855286602086015233604086015287606086015260808501526108fb604435612529565b60443560a08501528760c08501524260e0850152610100840152866101208401528661014084015286610160840152866101808401526101a08301526101c0820152604051610949816124a5565b8581526101e082015260405161095e816124a5565b858152610200820152846102208201526084356102408201528185526005602052604085209080518255602081015160018301556002820160018060a01b036040830151166001600160601b0360a01b82541617905560608101518051906001600160401b038211610cfb5781906109e6826109dd6003880154612388565b600388016128bd565b602090601f8311600114610e0e578992610e03575b50508160011b916000199060031b1c19161760038301555b60808101518051906001600160401b038211610cfb578190610a4582610a3c6004880154612388565b600488016128bd565b602090601f8311600114610d94578992610d89575b50508160011b916000199060031b1c19161760048301555b60a0810151610a8081612529565b610a8981612529565b60ff80196005850154169116176005830155610ab560c0820151610aac81612529565b60058401612911565b60e08101516006830155610100810151600783015561012081015160088301556101408101516009830155610160810151600a830155610180810151600b8301556101a0810151600c8301556101c0810151600d8301556101e08101518051906001600160401b038211610cfb578190610b3f82610b36600e880154612388565b600e88016128bd565b602090601f8311600114610d1a578992610d0f575b50508160011b916000199060031b1c191617600e8301555b6102008101518051906001600160401b038211610cfb57610b9d82610b94600f870154612388565b600f87016128bd565b602090601f8311600114610c8857918060119492610240948b92610c7d575b50508160011b916000199060031b1c191617600f8501555b60108401610220820151151560ff8019835416911617905501519101553384526008602052610c068160408620612930565b610c11604435612529565b60443584526009602052610c288160408620612930565b7fb1d569dc5621a0a51229b7ac0eff81f3e6df70a3f72fe608aa58f74bb69d7bb6604051610c57604435612529565b60443581526040602082015280610c7333966040830190612504565b0390a46001805580f35b015190503880610bbc565b90600f850189526020892091895b601f1985168110610ce3575092601194926001926102409583601f19811610610cca575b505050811b01600f850155610bd4565b015160001960f88460031b161c19169055388080610cba565b91926020600181928685015181550194019201610c96565b634e487b7160e01b88526041600452602488fd5b015190503880610b54565b9250600e85018952602089209089935b601f1984168510610d6e576001945083601f19811610610d55575b505050811b01600e830155610b6c565b015160001960f88460031b161c19169055388080610d45565b81810151835560209485019460019093019290910190610d2a565b015190503880610a5a565b9250600485018952602089209089935b601f1984168510610de8576001945083601f19811610610dcf575b505050811b016004830155610a72565b015160001960f88460031b161c19169055388080610dbf565b81810151835560209485019460019093019290910190610da4565b0151905038806109fb565b9250600385018952602089209089935b601f1984168510610e62576001945083601f19811610610e49575b505050811b016003830155610a13565b015160001960f88460031b161c19169055388080610e39565b81810151835560209485019460019093019290910190610e1e565b506108c2600a546108bc565b60405162461bcd60e51b815260206004820152601f60248201527f566f74696e673a20496e73756666696369656e742072657075746174696f6e006044820152606490fd5b610eeb9193503d8087833e610ee381836124c0565b810190612736565b913861086b565b60405162461bcd60e51b815260206004820152601d60248201527f566f74696e673a204465736372697074696f6e20746f6f2073686f72740000006044820152606490fd5b60405162461bcd60e51b815260206004820152601d60248201527f566f74696e673a205469746c652063616e6e6f7420626520656d7074790000006044820152606490fd5b604051633ee5aeb560e01b8152600490fd5b506020813d602011610fc5575b81610fa8602093836124c0565b81010312610fc157610fbc6108269161268d565b61081c565b8480fd5b3d9150610f9b565b6040513d87823e3d90fd5b8280fd5b50346101f657806003193601126101f6576020600a54604051908152f35b50346101f6576110093661259f565b919081526009602052604081209081548310156101f65760206107408484612649565b50346101f657806003193601126101f657546040516001600160a01b039091168152602090f35b50346101f657806003193601126101f6576020600b54604051908152f35b50346101f657806003193601126101f6576004548180600180825b858311156110b25750505092608093604051938452602084015260408301526060820152f35b9091928382526005602081815260ff8260408620015460081c16916110d683612529565b8215918261115a575b50501561110057506110f36110f99161288b565b9361288b565b919061108c565b61110d8198929598612529565b80840361112757506111216110f99161288b565b9661288b565b80611136600292999399612529565b14611145575b6110f99061288b565b936111526110f99161288b565b94905061113c565b8786525250604083206007015442111538806110df565b50346101f657806003193601126101f65761118a612661565b600080546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b50346101f657806003193601126101f6576020600d54604051908152f35b50346101f65760203660031901126101f657611203612549565b61120b612661565b6001600160a01b03168015611230576001600160601b0360a01b600254161760025580f35b60405162461bcd60e51b815260206004820152602160248201527f566f74696e673a20496e76616c69642072657075746174696f6e2073797374656044820152606d60f81b6064820152608490fd5b50346101f657806003193601126101f6576002546040516001600160a01b039091168152602090f35b50346101f65760ff60406020926112be3661259f565b9082526007855282822090825284522054166040519015158152f35b50346101f65760603660031901126101f6576024351515602435036101f6576044356001600160401b0381116103b657611318903690600401612602565b6040516305c7664d60e31b81523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690602081602481855afa80156119bf578490611980575b611376915061269a565b600435151580611972575b61138a90612965565b600435835260056020526113ae60ff600560408620015460081c1661031b81612529565b600435835260056020526007604084200154421161192d5782602491604051928380926370cf630f60e11b82523360048301525afa839181611911575b506114095760405162461bcd60e51b81528061088960048201612845565b6101408151910151600e5481106118bc57600435845260076020526040842082855260205260ff6040852054166118685760043584526005602052816001604086200154146118175761145b90612a32565b9160043584526006602052604084206040519161147783612458565b8383523360208401526024351515604084015284606084015242608084015260a0830152805490600160401b8210156117ef57906114ba916001820181556125b5565b919091611803578060a09151835560018301600180841b0360208301511681549060ff851b60408501511515861b16916affffffffffffffffffffff60a81b1617179055606081015160028401556080810151600384015501518051906001600160401b0382116117ef5761153f826115366004860154612388565b600486016128bd565b602090601f83116001146117825760049291879183611777575b50508160011b916000199060031b1c1916179101555b600435835260076020526040832081845260205260408320600160ff198254161790556004358352600560205260408320600b81016115af8482546128b0565b905560243515611762576009016115c78382546128b0565b90555b60405163766f746560e01b60208201526004356024820152602481528060608101106001600160401b0360608301111761174e5760608101604052838151602083012060018060a01b036002541690813b15610fd857621b88c160ea1b60608501528460648501526084840152604460608401918360608601915af1611719575b506040519160243515158352602083015233917fd72a296265de05f7f425107ca376651b68831fa700c5ed272487924e44532dc5604060043592a4611691600435612a81565b6116985780f35b60043581526005602052604081207ffe720701ff1e6911b3b487f3b4c49853b54be0002c601fe540188d7a1e60e16b6116d2600435612ad1565b916116e08360058301612911565b42600882015560108101600160ff19825416179055600a60098201549101549061171360405192839260043596846129fd565b0390a280f35b6001600160401b03606082959395011161173a57606001604052913861164b565b634e487b7160e01b82526041600452602482fd5b634e487b7160e01b84526041600452602484fd5b600a016117708382546128b0565b90556115ca565b015190503880611559565b906004840187526020872091875b601f19851681106117d75750918391600193600495601f198116106117be575b505050811b0191015561156f565b015160001960f88460031b161c191690553880806117b0565b91926020600181928685015181550194019201611790565b634e487b7160e01b86526041600452602486fd5b634e487b7160e01b85526004859052602485fd5b60405162461bcd60e51b815260206004820152602360248201527f566f74696e673a2043616e6e6f7420766f7465206f6e206f776e2070726f706f6044820152621cd85b60ea1b6064820152608490fd5b60405162461bcd60e51b815260206004820152602660248201527f566f74696e673a20416c726561647920766f746564206f6e20746869732070726044820152651bdc1bdcd85b60d21b6064820152608490fd5b60405162461bcd60e51b815260206004820152602760248201527f566f74696e673a20496e73756666696369656e742072657075746174696f6e20604482015266746f20766f746560c81b6064820152608490fd5b6119269192503d8086833e610ee381836124c0565b90386113eb565b60405162461bcd60e51b815260206004820152601b60248201527f566f74696e673a20566f74696e6720706572696f6420656e64656400000000006044820152606490fd5b506004805490351115611381565b506020813d6020116119b7575b8161199a602093836124c0565b810103126119b3576119ae6113769161268d565b61136c565b8380fd5b3d915061198d565b6040513d86823e3d90fd5b50346101f657806003193601126101f6576003546040516001600160a01b039091168152602090f35b50346101f657806003193601126101f657806001600454905b81811115611aee5750611a1e82612a1b565b91611a2c60405193846124c0565b808352611a3b601f1991612a1b565b0160209036828501378360015b83811115611a625760405180611a5e8782612564565b0390f35b808252600580845260ff8160408520015460081c16611a8081612529565b1580611ad7575b611a9b575b50611a969061288b565b611a48565b8596919651821015611ac357818785611a9694611abc941b8901015261288b565b9590611a8c565b634e487b7160e01b83526032600452602483fd5b508183528084526007604084200154421115611a87565b808452600560209080825260ff8160408820015460081c16611b0f81612529565b159182611b41575b5050611b2c575b611b279061288b565b611a0c565b91611b39611b279161288b565b929050611b1e565b838752525060408420600701544211153880611b17565b50346101f6576020806003193601126103b6576004356005811015610fd857611b8081612529565b82526009815260408220916040518092808554928381520194835280832092905b828210611bc457611a5e85611bb8818903826124c0565b60405191829182612564565b835486529485019460019384019390910190611ba1565b50346101f6576020806003193601126103b65760043580151580611d60575b611c0690939293612965565b81526006825260408120805491611c1c83612a1b565b92611c2a60405194856124c0565b8084528484018093835285832083915b838310611ce25750505050604051928484019085855251809152604084019460408260051b8601019392955b828710611c735785850386f35b909192938280611cd2600193603f198a8203018652885180518252858060a01b03848201511684830152604081015115156040830152606080820151908301526080808201519083015260a0809101519160c080928201520190612504565b9601920196019592919092611c66565b60058860019260409a99979a51611cf881612458565b8554815284860154858060a01b0381168483015260ff60a091821c1615156040830152600287015460608301526003870154608083015260405190611d4b82611d448160048c016123c2565b03836124c0565b82015281520192019201919096939596611c3a565b50600454811115611bfa565b50346101f657806003193601126101f6576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50346101f65760a03660031901126101f657604435611dce612661565b61138881101580611e4c575b15611dfd57600435600a55602435600b55600c55606435600d55608435600e5580f35b60405162461bcd60e51b815260206004820152602160248201527f566f74696e673a20496e76616c69642070617373696e67207468726573686f6c6044820152601960fa1b6064820152608490fd5b50612710811115611dda565b50346101f657806003193601126101f6576020600454604051908152f35b50346101f657806003193601126101f6576020600e54604051908152f35b50346101f657611ea33661259f565b9082526006602052604082208054821015610fd857611ec292506125b5565b508054611a5e60046001840154936002810154611ef5600383015492611eee60405180968193016123c2565b03846124c0565b60ff604051968796875260018060a01b038116602088015260a01c16151560408601526060850152608084015260c060a084015260c0830190612504565b50346101f65760203660031901126101f6576004358015158061211b575b611f5a90612965565b80825260056020526040822060058101611f7e60ff825460081c1661031b81612529565b60078201544211801561210c575b156120a157601082019060ff82541661205257600191611fb5611fae86612ad1565b8093612911565b4260088501558260ff19825416179055837ffe720701ff1e6911b3b487f3b4c49853b54be0002c601fe540188d7a1e60e16b6009850154600a8601549061200260405192839287846129fd565b0390a261200e81612529565b14908161203c575b5061201f575080f35b8152600560205261203960ff600560408420015416612529565b80f35b61204a9150600e0154612388565b151538612016565b60405162461bcd60e51b815260206004820152602160248201527f566f74696e673a2050726f706f73616c20616c726561647920657865637574656044820152601960fa1b6064820152608490fd5b60405162461bcd60e51b815260206004820152603860248201527f566f74696e673a20566f74696e6720706572696f64206e6f7420656e6465642060448201527f616e642063616e6e6f742065786563757465206561726c7900000000000000006064820152608490fd5b5061211683612a81565b611f8c565b50600454811115611f51565b50346101f6576020806003193601126103b6576001600160a01b0361214a612549565b1682526008815260408220916040518092808554928381520194835280832092905b82821061218357611a5e85611bb8818903826124c0565b83548652948501946001938401939091019061216c565b82346101f65760203660031901126101f6576004358152600560205260409020805460e052600181015460028201546001600160a01b031660c052918190806121e681600385016123c2565b036121f190826124c0565b604051908161220381600486016123c2565b0361220e90836124c0565b600583015491600684015460078501546008860154600987015490600a88015492600b89015494600c8a015496600d8b01549860405180600e819e0190612254916123c2565b0361225f908d6124c0565b6040519c8d8061227281600f85016123c2565b0361227c916124c0565b601081015460ff16608052601101549d6040518060a05260e051905260a0516020015260c05160a051604001526102608060a0516060015260a051016122c191612504565b60a05180820390608001526122d591612504565b9860ff81166122e381612529565b60a05160a0015260081c60ff166122f981612529565b60a05160c0015260a05160e0015260a051610100015260a051610120015260a051610140015260a051610160015260a051610180015260a0516101a0015260a0516101c0015260a051808203906101e0015261235491612504565b60a05180820390610200015261236991612504565b90608051151560a051610220015260a051610240015260a05180910390f35b90600182811c921680156123b8575b60208310146123a257565b634e487b7160e01b600052602260045260246000fd5b91607f1691612397565b90600092918054916123d383612388565b91828252600193848116908160001461243557506001146123f5575b50505050565b90919394506000526020928360002092846000945b8386106124215750505050010190388080806123ef565b80548587018301529401938590820161240a565b9294505050602093945060ff191683830152151560051b010190388080806123ef565b60c081019081106001600160401b0382111761247357604052565b634e487b7160e01b600052604160045260246000fd5b61026081019081106001600160401b0382111761247357604052565b602081019081106001600160401b0382111761247357604052565b90601f801991011681019081106001600160401b0382111761247357604052565b60005b8381106124f45750506000910152565b81810151838201526020016124e4565b9060209161251d815180928185528580860191016124e1565b601f01601f1916010190565b6005111561253357565b634e487b7160e01b600052602160045260246000fd5b600435906001600160a01b038216820361255f57565b600080fd5b6020908160408183019282815285518094520193019160005b82811061258b575050505090565b83518552938101939281019260010161257d565b604090600319011261255f576004359060243590565b80548210156125d1576000526005602060002091020190600090565b634e487b7160e01b600052603260045260246000fd5b6001600160401b03811161247357601f01601f191660200190565b81601f8201121561255f57803590612619826125e7565b9261262760405194856124c0565b8284526020838301011161255f57816000926020809301838601378301015290565b80548210156125d15760005260206000200190600090565b6000546001600160a01b0316330361267557565b60405163118cdaa760e01b8152336004820152602490fd5b5190811515820361255f57565b156126a157565b60405162461bcd60e51b815260206004820152602260248201527f566f74696e673a204d757374206265207265676973746572656420636974697a60448201526132b760f11b6064820152608490fd5b81601f8201121561255f578051612707816125e7565b9261271560405194856124c0565b8184526020828401011161255f5761273391602080850191016124e1565b90565b60208183031261255f5780516001600160401b039182821161255f570161018092838282031261255f5760405193840184811084821117612473576040528151845260208201516001600160a01b038116810361255f576020850152604082015183811161255f57816127aa9184016126f1565b6040850152606082015183811161255f57816127c79184016126f1565b60608501526080820151608085015260a082015160a085015260c0820151600481101561255f5760c085015260e082015160e0850152610100808301519085015261012061281681840161268d565b908501526101408083015190850152610160928383015190811161255f5761283e92016126f1565b9082015290565b60809060208152602560208201527f566f74696e673a204661696c656420746f2067657420636974697a656e2070726040820152646f66696c6560d81b60608201520190565b600019811461289a5760010190565b634e487b7160e01b600052601160045260246000fd5b9190820180921161289a57565b90601f81116128cb57505050565b600091825260208220906020601f850160051c83019410612907575b601f0160051c01915b8281106128fc57505050565b8181556001016128f0565b90925082906128e7565b9061291b81612529565b61ff0082549160081b169061ff001916179055565b8054600160401b8110156124735761294d91600182018155612649565b819291549060031b91821b91600019901b1916179055565b1561296c57565b60405162461bcd60e51b815260206004820152601b60248201527f566f74696e673a20496e76616c69642070726f706f73616c20494400000000006044820152606490fd5b156129b857565b60405162461bcd60e51b815260206004820152601b60248201527f566f74696e673a2050726f706f73616c206e6f742061637469766500000000006044820152606490fd5b60608101949392604092612a1081612529565b825260208201520152565b6001600160401b0381116124735760051b60200190565b6103e88110612a415750606490565b6101f48110612a505750603290565b606411612a5c57601990565b600a90565b8115612a6b570490565b634e487b7160e01b600052601260045260246000fd5b60005260056020526040600020600b81015490600c810154821015612aa7575050600090565b600901546127109081810291818304149015171561289a57611f4091612acc91612a61565b101590565b60005260056020526040600020600b810154600c8201548110612b255760098201546127109081810291818304149015171561289a57600d91612b1391612a61565b91015411612b2057600190565b600290565b505060039056fea2646970667358221220e0cf7fd0bf3002560c5ee522328dd005fa133b93cae7e253dcf602efa574550764736f6c63430008140033",
  "devdoc": {
    "author": "CitiProof Team",
    "details": "Enables community voting on governance matters",
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "castVote(uint256,bool,string)": {
        "details": "Cast vote on a proposal"
      },
      "createProposal(string,string,uint8,uint256,uint256)": {
        "details": "Create a new governance proposal (simplified to avoid stack too deep)"
      },
      "executeProposal(uint256)": {
        "details": "Execute proposal after voting period ends"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "VotingGovernanceSystem",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/VotingGovernanceSystem.sol:VotingGovernanceSystem",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 188,
        "contract": "contracts/VotingGovernanceSystem.sol:VotingGovernanceSystem",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 10199,
        "contract": "contracts/VotingGovernanceSystem.sol:VotingGovernanceSystem",
        "label": "reputationSystem",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ReputationSystem)7058"
      },
      {
        "astId": 10202,
        "contract": "contracts/VotingGovernanceSystem.sol:VotingGovernanceSystem",
        "label": "projectRegistry",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(GovernmentProjectRegistry)4141"
      },
      {
        "astId": 10270,
        "contract": "contracts/VotingGovernanceSystem.sol:VotingGovernanceSystem",
        "label": "_proposalIdCounter",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 10275,
        "contract": "contracts/VotingGovernanceSystem.sol:VotingGovernanceSystem",
        "label": "proposals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(Proposal)10255_storage)"
      },
      {
        "astId": 10281,
        "contract": "contracts/VotingGovernanceSystem.sol:VotingGovernanceSystem",
        "label": "proposalVotes",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_array(t_struct(Vote)10268_storage)dyn_storage)"
      },
      {
        "astId": 10287,
        "contract": "contracts/VotingGovernanceSystem.sol:VotingGovernanceSystem",
        "label": "hasVoted",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 10292,
        "contract": "contracts/VotingGovernanceSystem.sol:VotingGovernanceSystem",
        "label": "citizenProposals",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 10297,
        "contract": "contracts/VotingGovernanceSystem.sol:VotingGovernanceSystem",
        "label": "typeProposals",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 10300,
        "contract": "contracts/VotingGovernanceSystem.sol:VotingGovernanceSystem",
        "label": "defaultVotingPeriod",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 10303,
        "contract": "contracts/VotingGovernanceSystem.sol:VotingGovernanceSystem",
        "label": "minimumQuorum",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 10306,
        "contract": "contracts/VotingGovernanceSystem.sol:VotingGovernanceSystem",
        "label": "defaultPassingThreshold",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 10309,
        "contract": "contracts/VotingGovernanceSystem.sol:VotingGovernanceSystem",
        "label": "minimumReputationToPropose",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 10312,
        "contract": "contracts/VotingGovernanceSystem.sol:VotingGovernanceSystem",
        "label": "minimumReputationToVote",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Vote)10268_storage)dyn_storage": {
        "base": "t_struct(Vote)10268_storage",
        "encoding": "dynamic_array",
        "label": "struct VotingGovernanceSystem.Vote[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(GovernmentProjectRegistry)4141": {
        "encoding": "inplace",
        "label": "contract GovernmentProjectRegistry",
        "numberOfBytes": "20"
      },
      "t_contract(ReputationSystem)7058": {
        "encoding": "inplace",
        "label": "contract ReputationSystem",
        "numberOfBytes": "20"
      },
      "t_enum(ProposalStatus)10214": {
        "encoding": "inplace",
        "label": "enum VotingGovernanceSystem.ProposalStatus",
        "numberOfBytes": "1"
      },
      "t_enum(ProposalType)10208": {
        "encoding": "inplace",
        "label": "enum VotingGovernanceSystem.ProposalType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_array(t_struct(Vote)10268_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct VotingGovernanceSystem.Vote[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Vote)10268_storage)dyn_storage"
      },
      "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_uint256,t_struct(Proposal)10255_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct VotingGovernanceSystem.Proposal)",
        "numberOfBytes": "32",
        "value": "t_struct(Proposal)10255_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Proposal)10255_storage": {
        "encoding": "inplace",
        "label": "struct VotingGovernanceSystem.Proposal",
        "members": [
          {
            "astId": 10216,
            "contract": "contracts/VotingGovernanceSystem.sol:VotingGovernanceSystem",
            "label": "proposalId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 10218,
            "contract": "contracts/VotingGovernanceSystem.sol:VotingGovernanceSystem",
            "label": "creatorCitizenId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 10220,
            "contract": "contracts/VotingGovernanceSystem.sol:VotingGovernanceSystem",
            "label": "creator",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 10222,
            "contract": "contracts/VotingGovernanceSystem.sol:VotingGovernanceSystem",
            "label": "title",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 10224,
            "contract": "contracts/VotingGovernanceSystem.sol:VotingGovernanceSystem",
            "label": "ipfsDescriptionHash",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 10227,
            "contract": "contracts/VotingGovernanceSystem.sol:VotingGovernanceSystem",
            "label": "proposalType",
            "offset": 0,
            "slot": "5",
            "type": "t_enum(ProposalType)10208"
          },
          {
            "astId": 10230,
            "contract": "contracts/VotingGovernanceSystem.sol:VotingGovernanceSystem",
            "label": "status",
            "offset": 1,
            "slot": "5",
            "type": "t_enum(ProposalStatus)10214"
          },
          {
            "astId": 10232,
            "contract": "contracts/VotingGovernanceSystem.sol:VotingGovernanceSystem",
            "label": "creationTimestamp",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 10234,
            "contract": "contracts/VotingGovernanceSystem.sol:VotingGovernanceSystem",
            "label": "votingEndTimestamp",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 10236,
            "contract": "contracts/VotingGovernanceSystem.sol:VotingGovernanceSystem",
            "label": "executionTimestamp",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 10238,
            "contract": "contracts/VotingGovernanceSystem.sol:VotingGovernanceSystem",
            "label": "yesVotes",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 10240,
            "contract": "contracts/VotingGovernanceSystem.sol:VotingGovernanceSystem",
            "label": "noVotes",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 10242,
            "contract": "contracts/VotingGovernanceSystem.sol:VotingGovernanceSystem",
            "label": "totalVotingPower",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          },
          {
            "astId": 10244,
            "contract": "contracts/VotingGovernanceSystem.sol:VotingGovernanceSystem",
            "label": "quorumRequired",
            "offset": 0,
            "slot": "12",
            "type": "t_uint256"
          },
          {
            "astId": 10246,
            "contract": "contracts/VotingGovernanceSystem.sol:VotingGovernanceSystem",
            "label": "passingThreshold",
            "offset": 0,
            "slot": "13",
            "type": "t_uint256"
          },
          {
            "astId": 10248,
            "contract": "contracts/VotingGovernanceSystem.sol:VotingGovernanceSystem",
            "label": "executionData",
            "offset": 0,
            "slot": "14",
            "type": "t_bytes_storage"
          },
          {
            "astId": 10250,
            "contract": "contracts/VotingGovernanceSystem.sol:VotingGovernanceSystem",
            "label": "ipfsDocumentHash",
            "offset": 0,
            "slot": "15",
            "type": "t_string_storage"
          },
          {
            "astId": 10252,
            "contract": "contracts/VotingGovernanceSystem.sol:VotingGovernanceSystem",
            "label": "isExecuted",
            "offset": 0,
            "slot": "16",
            "type": "t_bool"
          },
          {
            "astId": 10254,
            "contract": "contracts/VotingGovernanceSystem.sol:VotingGovernanceSystem",
            "label": "relatedProjectId",
            "offset": 0,
            "slot": "17",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "576"
      },
      "t_struct(Vote)10268_storage": {
        "encoding": "inplace",
        "label": "struct VotingGovernanceSystem.Vote",
        "members": [
          {
            "astId": 10257,
            "contract": "contracts/VotingGovernanceSystem.sol:VotingGovernanceSystem",
            "label": "citizenId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 10259,
            "contract": "contracts/VotingGovernanceSystem.sol:VotingGovernanceSystem",
            "label": "voter",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 10261,
            "contract": "contracts/VotingGovernanceSystem.sol:VotingGovernanceSystem",
            "label": "support",
            "offset": 20,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 10263,
            "contract": "contracts/VotingGovernanceSystem.sol:VotingGovernanceSystem",
            "label": "votingPower",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 10265,
            "contract": "contracts/VotingGovernanceSystem.sol:VotingGovernanceSystem",
            "label": "timestamp",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 10267,
            "contract": "contracts/VotingGovernanceSystem.sol:VotingGovernanceSystem",
            "label": "reason",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}