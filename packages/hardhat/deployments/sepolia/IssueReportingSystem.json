{
  "address": "0x59a10e9f83641e83F9761A5Cc4A7307016D3F8C0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "initialOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_citizenRegistry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_reputationSystem",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "reportId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "evidenceHash",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "submittedBy",
          "type": "address"
        }
      ],
      "name": "EvidenceAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "reportId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "assignedTo",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "assignedBy",
          "type": "address"
        }
      ],
      "name": "IssueAssigned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "reportId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "duplicateOfReportId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "markedBy",
          "type": "address"
        }
      ],
      "name": "IssueDuplicate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "reportId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "citizenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "reporter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum IssueReportingSystem.IssueCategory",
          "name": "category",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "enum IssueReportingSystem.IssueSeverity",
          "name": "severity",
          "type": "uint8"
        }
      ],
      "name": "IssueReported",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "reportId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "resolvedBy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "resolutionNotes",
          "type": "string"
        }
      ],
      "name": "IssueResolved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "reportId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum IssueReportingSystem.IssueStatus",
          "name": "previousStatus",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "enum IssueReportingSystem.IssueStatus",
          "name": "newStatus",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "updatedBy",
          "type": "address"
        }
      ],
      "name": "IssueStatusUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "reportId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "citizenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isSupporting",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "voterReputation",
          "type": "uint256"
        }
      ],
      "name": "IssueVerificationVote",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_reportId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_evidenceHash",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_ipfsDescriptionHash",
          "type": "string"
        }
      ],
      "name": "addEvidence",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_reportId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_assignee",
          "type": "address"
        }
      ],
      "name": "assignIssue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_entity",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_authorized",
          "type": "bool"
        }
      ],
      "name": "authorizeGovernmentEntity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "authorizedGovernmentEntities",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "categoryReports",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "citizenRegistry",
      "outputs": [
        {
          "internalType": "contract CitizenIdentityRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "citizenReports",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "duplicateThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_reportId",
          "type": "uint256"
        },
        {
          "internalType": "enum IssueReportingSystem.IssueStatus",
          "name": "_status",
          "type": "uint8"
        }
      ],
      "name": "emergencyUpdateReportStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_citizen",
          "type": "address"
        }
      ],
      "name": "getCitizenReports",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_reportId",
          "type": "uint256"
        }
      ],
      "name": "getReport",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "reportId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "citizenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "reporter",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "title",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "ipfsDescriptionHash",
              "type": "string"
            },
            {
              "internalType": "enum IssueReportingSystem.IssueCategory",
              "name": "category",
              "type": "uint8"
            },
            {
              "internalType": "enum IssueReportingSystem.IssueSeverity",
              "name": "severity",
              "type": "uint8"
            },
            {
              "internalType": "enum IssueReportingSystem.IssueStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "ipfsLocationDataHash",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "submitTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastUpdateTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "verificationScore",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "supportCount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "assignedTo",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "ipfsResolutionNotesHash",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "resolutionTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isAnonymous",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "duplicateOfReportId",
              "type": "uint256"
            },
            {
              "internalType": "string[]",
              "name": "tags",
              "type": "string[]"
            }
          ],
          "internalType": "struct IssueReportingSystem.IssueReport",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_reportId",
          "type": "uint256"
        }
      ],
      "name": "getReportEvidence",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "evidenceHash",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "ipfsDescriptionHash",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "submittedBy",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isVerified",
              "type": "bool"
            }
          ],
          "internalType": "struct IssueReportingSystem.Evidence[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReportStats",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalReports",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "verifiedReports",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "resolvedReports",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pendingReports",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_reportId",
          "type": "uint256"
        }
      ],
      "name": "getReportVerifications",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "citizenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "voter",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isSupporting",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "ipfsCommentsHash",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "voterReputationAtTime",
              "type": "uint256"
            }
          ],
          "internalType": "struct IssueReportingSystem.VerificationVote[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IssueReportingSystem.IssueCategory",
          "name": "_category",
          "type": "uint8"
        }
      ],
      "name": "getReportsByCategory",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IssueReportingSystem.IssueStatus",
          "name": "_status",
          "type": "uint8"
        }
      ],
      "name": "getReportsByStatus",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalReports",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "hasSupportedReport",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "hasVotedOnReport",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "locationReports",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_reportId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_originalReportId",
          "type": "uint256"
        }
      ],
      "name": "markAsDuplicate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumVerificationScore",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "reportEvidence",
      "outputs": [
        {
          "internalType": "string",
          "name": "evidenceHash",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "ipfsDescriptionHash",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "submittedBy",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isVerified",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "reportVerifications",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "citizenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isSupporting",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "ipfsCommentsHash",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "voterReputationAtTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "reports",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "reportId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "citizenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "reporter",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "ipfsDescriptionHash",
          "type": "string"
        },
        {
          "internalType": "enum IssueReportingSystem.IssueCategory",
          "name": "category",
          "type": "uint8"
        },
        {
          "internalType": "enum IssueReportingSystem.IssueSeverity",
          "name": "severity",
          "type": "uint8"
        },
        {
          "internalType": "enum IssueReportingSystem.IssueStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "ipfsLocationDataHash",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "submitTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastUpdateTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "verificationScore",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "supportCount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "assignedTo",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "ipfsResolutionNotesHash",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "resolutionTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isAnonymous",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "duplicateOfReportId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reputationSystem",
      "outputs": [
        {
          "internalType": "contract ReputationSystem",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_title",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_ipfsDescriptionHash",
          "type": "string"
        },
        {
          "internalType": "enum IssueReportingSystem.IssueCategory",
          "name": "_category",
          "type": "uint8"
        },
        {
          "internalType": "enum IssueReportingSystem.IssueSeverity",
          "name": "_severity",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "_ipfsLocationDataHash",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_evidenceHash",
          "type": "string"
        },
        {
          "internalType": "string[]",
          "name": "_tags",
          "type": "string[]"
        },
        {
          "internalType": "bool",
          "name": "_isAnonymous",
          "type": "bool"
        }
      ],
      "name": "submitIssueReport",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_reportId",
          "type": "uint256"
        },
        {
          "internalType": "enum IssueReportingSystem.IssueStatus",
          "name": "_newStatus",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "_ipfsNotesHash",
          "type": "string"
        }
      ],
      "name": "updateIssueStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_reputationSystem",
          "type": "address"
        }
      ],
      "name": "updateReputationSystem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minimumScore",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_verificationThreshold",
          "type": "uint256"
        }
      ],
      "name": "updateVerificationThresholds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "verificationThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_reportId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isSupporting",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "_ipfsCommentsHash",
          "type": "string"
        }
      ],
      "name": "verifyReport",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc684075188d7adb62ce40daf01af9d2c151c0f4479e6dbaf913c217073fbce7e",
  "receipt": {
    "to": null,
    "from": "0x847118E06a68716b385a86a50250C598D33Ca68C",
    "contractAddress": "0x59a10e9f83641e83F9761A5Cc4A7307016D3F8C0",
    "transactionIndex": 147,
    "gasUsed": "3719174",
    "logsBloom": "0x
    "blockHash": "0x3b5869aa5eba9ca5303f649e48567022e013563057a1f56907b03dfa83fdc846",
    "transactionHash": "0xc684075188d7adb62ce40daf01af9d2c151c0f4479e6dbaf913c217073fbce7e",
    "logs": [
      {
        "transactionIndex": 147,
        "blockNumber": 9142959,
        "transactionHash": "0xc684075188d7adb62ce40daf01af9d2c151c0f4479e6dbaf913c217073fbce7e",
        "address": "0x59a10e9f83641e83F9761A5Cc4A7307016D3F8C0",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000847118e06a68716b385a86a50250c598d33ca68c"
        ],
        "data": "0x",
        "logIndex": 119,
        "blockHash": "0x3b5869aa5eba9ca5303f649e48567022e013563057a1f56907b03dfa83fdc846"
      }
    ],
    "blockNumber": 9142959,
    "cumulativeGasUsed": "17093445",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x847118E06a68716b385a86a50250C598D33Ca68C",
    "0x9F4Bc4cb48e60871768b4cFB9CF9C53381063652",
    "0x0Be2398A11E351903d7528533F2b5d544301510c"
  ],
  "numDeployments": 1,
  "solcInputHash": "2510a4953b833be54b78475d9a98dd2b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_citizenRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_reputationSystem\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"reportId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"evidenceHash\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"submittedBy\",\"type\":\"address\"}],\"name\":\"EvidenceAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"reportId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assignedTo\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assignedBy\",\"type\":\"address\"}],\"name\":\"IssueAssigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"reportId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"duplicateOfReportId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"markedBy\",\"type\":\"address\"}],\"name\":\"IssueDuplicate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"reportId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"citizenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum IssueReportingSystem.IssueCategory\",\"name\":\"category\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum IssueReportingSystem.IssueSeverity\",\"name\":\"severity\",\"type\":\"uint8\"}],\"name\":\"IssueReported\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"reportId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"resolvedBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"resolutionNotes\",\"type\":\"string\"}],\"name\":\"IssueResolved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"reportId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum IssueReportingSystem.IssueStatus\",\"name\":\"previousStatus\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum IssueReportingSystem.IssueStatus\",\"name\":\"newStatus\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"updatedBy\",\"type\":\"address\"}],\"name\":\"IssueStatusUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"reportId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"citizenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isSupporting\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"voterReputation\",\"type\":\"uint256\"}],\"name\":\"IssueVerificationVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reportId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_evidenceHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_ipfsDescriptionHash\",\"type\":\"string\"}],\"name\":\"addEvidence\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reportId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_assignee\",\"type\":\"address\"}],\"name\":\"assignIssue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_entity\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_authorized\",\"type\":\"bool\"}],\"name\":\"authorizeGovernmentEntity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedGovernmentEntities\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"categoryReports\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"citizenRegistry\",\"outputs\":[{\"internalType\":\"contract CitizenIdentityRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"citizenReports\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"duplicateThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reportId\",\"type\":\"uint256\"},{\"internalType\":\"enum IssueReportingSystem.IssueStatus\",\"name\":\"_status\",\"type\":\"uint8\"}],\"name\":\"emergencyUpdateReportStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_citizen\",\"type\":\"address\"}],\"name\":\"getCitizenReports\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reportId\",\"type\":\"uint256\"}],\"name\":\"getReport\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"reportId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"citizenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ipfsDescriptionHash\",\"type\":\"string\"},{\"internalType\":\"enum IssueReportingSystem.IssueCategory\",\"name\":\"category\",\"type\":\"uint8\"},{\"internalType\":\"enum IssueReportingSystem.IssueSeverity\",\"name\":\"severity\",\"type\":\"uint8\"},{\"internalType\":\"enum IssueReportingSystem.IssueStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"ipfsLocationDataHash\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"submitTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationScore\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supportCount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"assignedTo\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"ipfsResolutionNotesHash\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"resolutionTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isAnonymous\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"duplicateOfReportId\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"tags\",\"type\":\"string[]\"}],\"internalType\":\"struct IssueReportingSystem.IssueReport\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reportId\",\"type\":\"uint256\"}],\"name\":\"getReportEvidence\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"evidenceHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ipfsDescriptionHash\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"submittedBy\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isVerified\",\"type\":\"bool\"}],\"internalType\":\"struct IssueReportingSystem.Evidence[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReportStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalReports\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verifiedReports\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resolvedReports\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingReports\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reportId\",\"type\":\"uint256\"}],\"name\":\"getReportVerifications\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"citizenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isSupporting\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"ipfsCommentsHash\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"voterReputationAtTime\",\"type\":\"uint256\"}],\"internalType\":\"struct IssueReportingSystem.VerificationVote[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IssueReportingSystem.IssueCategory\",\"name\":\"_category\",\"type\":\"uint8\"}],\"name\":\"getReportsByCategory\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IssueReportingSystem.IssueStatus\",\"name\":\"_status\",\"type\":\"uint8\"}],\"name\":\"getReportsByStatus\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalReports\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"hasSupportedReport\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"hasVotedOnReport\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"locationReports\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reportId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_originalReportId\",\"type\":\"uint256\"}],\"name\":\"markAsDuplicate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumVerificationScore\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"reportEvidence\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"evidenceHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ipfsDescriptionHash\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"submittedBy\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isVerified\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"reportVerifications\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"citizenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isSupporting\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"ipfsCommentsHash\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"voterReputationAtTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"reports\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reportId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"citizenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ipfsDescriptionHash\",\"type\":\"string\"},{\"internalType\":\"enum IssueReportingSystem.IssueCategory\",\"name\":\"category\",\"type\":\"uint8\"},{\"internalType\":\"enum IssueReportingSystem.IssueSeverity\",\"name\":\"severity\",\"type\":\"uint8\"},{\"internalType\":\"enum IssueReportingSystem.IssueStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"ipfsLocationDataHash\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"submitTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationScore\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supportCount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"assignedTo\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"ipfsResolutionNotesHash\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"resolutionTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isAnonymous\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"duplicateOfReportId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reputationSystem\",\"outputs\":[{\"internalType\":\"contract ReputationSystem\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_ipfsDescriptionHash\",\"type\":\"string\"},{\"internalType\":\"enum IssueReportingSystem.IssueCategory\",\"name\":\"_category\",\"type\":\"uint8\"},{\"internalType\":\"enum IssueReportingSystem.IssueSeverity\",\"name\":\"_severity\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_ipfsLocationDataHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_evidenceHash\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"_tags\",\"type\":\"string[]\"},{\"internalType\":\"bool\",\"name\":\"_isAnonymous\",\"type\":\"bool\"}],\"name\":\"submitIssueReport\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reportId\",\"type\":\"uint256\"},{\"internalType\":\"enum IssueReportingSystem.IssueStatus\",\"name\":\"_newStatus\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_ipfsNotesHash\",\"type\":\"string\"}],\"name\":\"updateIssueStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reputationSystem\",\"type\":\"address\"}],\"name\":\"updateReputationSystem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumScore\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_verificationThreshold\",\"type\":\"uint256\"}],\"name\":\"updateVerificationThresholds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verificationThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reportId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isSupporting\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"_ipfsCommentsHash\",\"type\":\"string\"}],\"name\":\"verifyReport\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"CitiProof Team\",\"details\":\"Manages citizen-submitted reports and verification process\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{\"addEvidence(uint256,string,string)\":{\"details\":\"Add evidence to existing report\"},\"assignIssue(uint256,address)\":{\"details\":\"Assign issue to government entity\"},\"markAsDuplicate(uint256,uint256)\":{\"details\":\"Mark report as duplicate\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"submitIssueReport(string,string,uint8,uint8,string,string,string[],bool)\":{\"details\":\"Submit a new issue report\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateIssueStatus(uint256,uint8,string)\":{\"details\":\"Update issue status (government entities only)\"},\"verifyReport(uint256,bool,string)\":{\"details\":\"Vote to verify/support an issue report\"}},\"title\":\"IssueReportingSystem\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/IssueReportingSystem.sol\":\"IssueReportingSystem\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/CitizenIdentityRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n/**\\n * @title CitizenIdentityRegistry\\n * @dev Manages verified citizen identities and their verification levels\\n * @author CitiProof Team\\n */\\ncontract CitizenIdentityRegistry is Ownable, ReentrancyGuard {\\n    // Counter for citizen IDs (using simple uint256 instead of Counters)\\n    uint256 private _citizenIdCounter;\\n\\n    // Verification levels\\n    enum VerificationLevel {\\n        UNVERIFIED,    // Default state\\n        BASIC,         // Basic wallet connection + EFP\\n        VERIFIED,      // Enhanced verification (50+ EFP followers)\\n        PREMIUM        // Government-verified or high reputation\\n    }\\n\\n    // Citizen profile structure\\n    struct CitizenProfile {\\n        uint256 citizenId;\\n        address walletAddress;\\n        string ensName;              // ENS name if available\\n        string efpTokenId;           // EFP list token ID\\n        uint256 efpFollowers;        // EFP follower count\\n        uint256 efpFollowing;        // EFP following count\\n        VerificationLevel verificationLevel;\\n        uint256 registrationTimestamp;\\n        uint256 lastUpdateTimestamp;\\n        bool isActive;\\n        uint256 reputationScore;     // Link to reputation contract\\n        string ipfsMetadata;         // Additional profile data on IPFS\\n    }\\n\\n    // Storage mappings\\n    mapping(address => uint256) public walletToCitizenId;\\n    mapping(uint256 => CitizenProfile) public citizens;\\n    mapping(string => uint256) public ensNameToCitizenId;\\n    mapping(string => bool) public registeredEnsNames;\\n\\n    // Events\\n    event CitizenRegistered(\\n        uint256 indexed citizenId,\\n        address indexed walletAddress,\\n        string ensName,\\n        VerificationLevel verificationLevel\\n    );\\n\\n    event CitizenVerificationUpdated(\\n        uint256 indexed citizenId,\\n        address indexed walletAddress,\\n        VerificationLevel oldLevel,\\n        VerificationLevel newLevel\\n    );\\n\\n    event CitizenProfileUpdated(\\n        uint256 indexed citizenId,\\n        address indexed walletAddress,\\n        string ensName,\\n        string efpTokenId\\n    );\\n\\n    event CitizenDeactivated(\\n        uint256 indexed citizenId,\\n        address indexed walletAddress,\\n        address indexed deactivatedBy\\n    );\\n\\n    // Modifiers\\n    modifier onlyRegisteredCitizen() {\\n        require(walletToCitizenId[msg.sender] != 0, \\\"CitizenRegistry: Caller is not a registered citizen\\\");\\n        require(citizens[walletToCitizenId[msg.sender]].isActive, \\\"CitizenRegistry: Citizen account is not active\\\");\\n        _;\\n    }\\n\\n    modifier validCitizenId(uint256 _citizenId) {\\n        require(_citizenId > 0 && _citizenId <= _citizenIdCounter, \\\"CitizenRegistry: Invalid citizen ID\\\");\\n        _;\\n    }\\n\\n    modifier onlyActiveCitizen(uint256 _citizenId) {\\n        require(citizens[_citizenId].isActive, \\\"CitizenRegistry: Citizen is not active\\\");\\n        _;\\n    }\\n\\n    constructor(address initialOwner) Ownable(initialOwner) {}\\n\\n    /**\\n     * @dev Register a new citizen with flexible requirements\\n     * @param _ensName ENS name (can be empty string for wallet-only registration)\\n     * @param _efpTokenId EFP list token ID (can be empty string)\\n     * @param _efpFollowers Number of EFP followers (0 allowed for new users)\\n     * @param _efpFollowing Number of EFP following (0 allowed for new users)\\n     * @param _ipfsMetadata IPFS hash for additional profile data\\n     */\\n    function registerCitizen(\\n        string memory _ensName,\\n        string memory _efpTokenId,\\n        uint256 _efpFollowers,\\n        uint256 _efpFollowing,\\n        string memory _ipfsMetadata\\n    ) external nonReentrant {\\n        require(walletToCitizenId[msg.sender] == 0, \\\"CitizenRegistry: Wallet already registered\\\");\\n        \\n        // Check if ENS name is already taken (if provided)\\n        if (bytes(_ensName).length > 0) {\\n            require(!registeredEnsNames[_ensName], \\\"CitizenRegistry: ENS name already registered\\\");\\n        }\\n\\n        // Increment citizen ID counter\\n        _citizenIdCounter++;\\n        uint256 newCitizenId = _citizenIdCounter;\\n\\n        // Determine verification level based on EFP data\\n        VerificationLevel verificationLevel = _determineVerificationLevel(_efpFollowers, _efpFollowing);\\n\\n        // Create citizen profile\\n        citizens[newCitizenId] = CitizenProfile({\\n            citizenId: newCitizenId,\\n            walletAddress: msg.sender,\\n            ensName: _ensName,\\n            efpTokenId: _efpTokenId,\\n            efpFollowers: _efpFollowers,\\n            efpFollowing: _efpFollowing,\\n            verificationLevel: verificationLevel,\\n            registrationTimestamp: block.timestamp,\\n            lastUpdateTimestamp: block.timestamp,\\n            isActive: true,\\n            reputationScore: 0, // Will be updated by reputation contract\\n            ipfsMetadata: _ipfsMetadata\\n        });\\n\\n        // Update mappings\\n        walletToCitizenId[msg.sender] = newCitizenId;\\n        if (bytes(_ensName).length > 0) {\\n            ensNameToCitizenId[_ensName] = newCitizenId;\\n            registeredEnsNames[_ensName] = true;\\n        }\\n\\n        emit CitizenRegistered(newCitizenId, msg.sender, _ensName, verificationLevel);\\n    }\\n\\n    /**\\n     * @dev Simplified registration for wallet-only users (hackathon-friendly)\\n     * Automatically generates ENS subdomain and placeholder EFP data\\n     */\\n    function registerCitizenSimple() external nonReentrant {\\n        require(walletToCitizenId[msg.sender] == 0, \\\"CitizenRegistry: Wallet already registered\\\");\\n\\n        // Generate automatic ENS subdomain using last 6 chars of address\\n        string memory addressSuffix = Strings.toHexString(uint160(msg.sender) & 0xFFFFFF, 3);\\n        string memory autoEnsName = string(abi.encodePacked(\\\"citizen\\\", addressSuffix, \\\".citiproof.eth\\\"));\\n        \\n        // Ensure generated name is unique (highly unlikely to collide)\\n        require(!registeredEnsNames[autoEnsName], \\\"CitizenRegistry: Generated ENS name collision\\\");\\n\\n        // Create with minimal verification data (can be updated later)\\n        _citizenIdCounter++;\\n        uint256 newCitizenId = _citizenIdCounter;\\n\\n        citizens[newCitizenId] = CitizenProfile({\\n            citizenId: newCitizenId,\\n            walletAddress: msg.sender,\\n            ensName: autoEnsName,\\n            efpTokenId: \\\"\\\", // Can be added later\\n            efpFollowers: 0,\\n            efpFollowing: 0,\\n            verificationLevel: VerificationLevel.UNVERIFIED,\\n            registrationTimestamp: block.timestamp,\\n            lastUpdateTimestamp: block.timestamp,\\n            isActive: true,\\n            reputationScore: 0,\\n            ipfsMetadata: \\\"\\\"\\n        });\\n\\n        // Update mappings\\n        walletToCitizenId[msg.sender] = newCitizenId;\\n        ensNameToCitizenId[autoEnsName] = newCitizenId;\\n        registeredEnsNames[autoEnsName] = true;\\n\\n        emit CitizenRegistered(newCitizenId, msg.sender, autoEnsName, VerificationLevel.UNVERIFIED);\\n    }\\n\\n    /**\\n     * @dev Update citizen's EFP verification data\\n     * @param _efpTokenId New EFP token ID\\n     * @param _efpFollowers Updated follower count\\n     * @param _efpFollowing Updated following count\\n     */\\n    function updateEFPVerification(\\n        string memory _efpTokenId,\\n        uint256 _efpFollowers,\\n        uint256 _efpFollowing\\n    ) external onlyRegisteredCitizen {\\n        uint256 citizenId = walletToCitizenId[msg.sender];\\n        CitizenProfile storage citizen = citizens[citizenId];\\n\\n        VerificationLevel oldLevel = citizen.verificationLevel;\\n        VerificationLevel newLevel = _determineVerificationLevel(_efpFollowers, _efpFollowing);\\n\\n        // Update EFP data\\n        citizen.efpTokenId = _efpTokenId;\\n        citizen.efpFollowers = _efpFollowers;\\n        citizen.efpFollowing = _efpFollowing;\\n        citizen.verificationLevel = newLevel;\\n        citizen.lastUpdateTimestamp = block.timestamp;\\n\\n        if (oldLevel != newLevel) {\\n            emit CitizenVerificationUpdated(citizenId, msg.sender, oldLevel, newLevel);\\n        }\\n\\n        emit CitizenProfileUpdated(citizenId, msg.sender, citizen.ensName, _efpTokenId);\\n    }\\n\\n    /**\\n     * @dev Update citizen's ENS name\\n     * @param _ensName New ENS name\\n     */\\n    function updateENSName(string memory _ensName) external onlyRegisteredCitizen {\\n        require(bytes(_ensName).length > 0, \\\"CitizenRegistry: ENS name cannot be empty\\\");\\n        require(!registeredEnsNames[_ensName], \\\"CitizenRegistry: ENS name already registered\\\");\\n\\n        uint256 citizenId = walletToCitizenId[msg.sender];\\n        CitizenProfile storage citizen = citizens[citizenId];\\n\\n        // Remove old ENS name from registry\\n        if (bytes(citizen.ensName).length > 0) {\\n            registeredEnsNames[citizen.ensName] = false;\\n            delete ensNameToCitizenId[citizen.ensName];\\n        }\\n\\n        // Set new ENS name\\n        citizen.ensName = _ensName;\\n        citizen.lastUpdateTimestamp = block.timestamp;\\n        ensNameToCitizenId[_ensName] = citizenId;\\n        registeredEnsNames[_ensName] = true;\\n\\n        emit CitizenProfileUpdated(citizenId, msg.sender, _ensName, citizen.efpTokenId);\\n    }\\n\\n    /**\\n     * @dev Update reputation score (only called by reputation contract)\\n     * @param _citizenId Citizen ID\\n     * @param _reputationScore New reputation score\\n     */\\n    function updateReputationScore(\\n        uint256 _citizenId,\\n        uint256 _reputationScore\\n    ) external validCitizenId(_citizenId) {\\n        // TODO: Add access control for reputation contract\\n        // require(msg.sender == reputationContract, \\\"CitizenRegistry: Only reputation contract can update scores\\\");\\n        \\n        citizens[_citizenId].reputationScore = _reputationScore;\\n        citizens[_citizenId].lastUpdateTimestamp = block.timestamp;\\n\\n        // Check if reputation score qualifies for premium verification\\n        if (_reputationScore >= 1000 && citizens[_citizenId].verificationLevel != VerificationLevel.PREMIUM) {\\n            VerificationLevel oldLevel = citizens[_citizenId].verificationLevel;\\n            citizens[_citizenId].verificationLevel = VerificationLevel.PREMIUM;\\n            emit CitizenVerificationUpdated(\\n                _citizenId, \\n                citizens[_citizenId].walletAddress, \\n                oldLevel, \\n                VerificationLevel.PREMIUM\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Deactivate a citizen account (admin function)\\n     * @param _citizenId Citizen ID to deactivate\\n     */\\n    function deactivateCitizen(uint256 _citizenId) external onlyOwner validCitizenId(_citizenId) {\\n        citizens[_citizenId].isActive = false;\\n        citizens[_citizenId].lastUpdateTimestamp = block.timestamp;\\n\\n        emit CitizenDeactivated(\\n            _citizenId,\\n            citizens[_citizenId].walletAddress,\\n            msg.sender\\n        );\\n    }\\n\\n    /**\\n     * @dev Reactivate a citizen account (admin function)\\n     * @param _citizenId Citizen ID to reactivate\\n     */\\n    function reactivateCitizen(uint256 _citizenId) external onlyOwner validCitizenId(_citizenId) {\\n        citizens[_citizenId].isActive = true;\\n        citizens[_citizenId].lastUpdateTimestamp = block.timestamp;\\n    }\\n\\n    // View functions\\n    function getCitizen(uint256 _citizenId) external view validCitizenId(_citizenId) returns (CitizenProfile memory) {\\n        return citizens[_citizenId];\\n    }\\n\\n    function getCitizenByWallet(address _wallet) external view returns (CitizenProfile memory) {\\n        uint256 citizenId = walletToCitizenId[_wallet];\\n        require(citizenId != 0, \\\"CitizenRegistry: Wallet not registered\\\");\\n        return citizens[citizenId];\\n    }\\n\\n    function getCitizenByENS(string memory _ensName) external view returns (CitizenProfile memory) {\\n        uint256 citizenId = ensNameToCitizenId[_ensName];\\n        require(citizenId != 0, \\\"CitizenRegistry: ENS name not registered\\\");\\n        return citizens[citizenId];\\n    }\\n\\n    function isCitizenRegistered(address _wallet) external view returns (bool) {\\n        return walletToCitizenId[_wallet] != 0 && citizens[walletToCitizenId[_wallet]].isActive;\\n    }\\n\\n    function getTotalCitizens() external view returns (uint256) {\\n        return _citizenIdCounter;\\n    }\\n\\n    function getVerificationLevel(address _wallet) external view returns (VerificationLevel) {\\n        uint256 citizenId = walletToCitizenId[_wallet];\\n        require(citizenId != 0, \\\"CitizenRegistry: Wallet not registered\\\");\\n        return citizens[citizenId].verificationLevel;\\n    }\\n\\n    function isENSNameAvailable(string memory _ensName) external view returns (bool) {\\n        return !registeredEnsNames[_ensName];\\n    }\\n\\n    // Internal functions\\n    function _determineVerificationLevel(uint256 _followers, uint256 _following) internal pure returns (VerificationLevel) {\\n        if (_followers == 0 && _following == 0) {\\n            return VerificationLevel.UNVERIFIED;\\n        } else if (_followers < 50) {\\n            return VerificationLevel.BASIC;\\n        } else {\\n            return VerificationLevel.VERIFIED;\\n        }\\n    }\\n\\n    // Batch operations for efficiency\\n    function getCitizensBatch(uint256[] memory _citizenIds) \\n        external \\n        view \\n        returns (CitizenProfile[] memory) \\n    {\\n        CitizenProfile[] memory profiles = new CitizenProfile[](_citizenIds.length);\\n        for (uint256 i = 0; i < _citizenIds.length; i++) {\\n            if (_citizenIds[i] > 0 && _citizenIds[i] <= _citizenIdCounter) {\\n                profiles[i] = citizens[_citizenIds[i]];\\n            }\\n        }\\n        return profiles;\\n    }\\n\\n    function getActiveCitizensCount() external view returns (uint256) {\\n        uint256 activeCount = 0;\\n        for (uint256 i = 1; i <= _citizenIdCounter; i++) {\\n            if (citizens[i].isActive) {\\n                activeCount++;\\n            }\\n        }\\n        return activeCount;\\n    }\\n}\",\"keccak256\":\"0x558f50048caa6b475ee31972fae16eee3985777f19dbd9882a6d86277223d533\",\"license\":\"MIT\"},\"contracts/IssueReportingSystem.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"./CitizenIdentityRegistry.sol\\\";\\nimport \\\"./ReputationSystem.sol\\\";\\n\\n/**\\n * @title IssueReportingSystem\\n * @dev Manages citizen-submitted reports and verification process\\n * @author CitiProof Team\\n */\\ncontract IssueReportingSystem is Ownable, ReentrancyGuard {\\n    \\n    CitizenIdentityRegistry public immutable citizenRegistry;\\n    ReputationSystem public reputationSystem;\\n    \\n    // Issue severity levels\\n    enum IssueSeverity {\\n        LOW,        // Minor issues, cosmetic problems\\n        MEDIUM,     // Moderate impact on community\\n        HIGH,       // Significant impact, urgent attention needed\\n        CRITICAL    // Emergency, immediate action required\\n    }\\n    \\n    // Issue status tracking\\n    enum IssueStatus {\\n        SUBMITTED,      // Newly submitted by citizen\\n        UNDER_REVIEW,   // Being reviewed by authorities\\n        VERIFIED,       // Confirmed as legitimate issue\\n        IN_PROGRESS,    // Work started to address the issue\\n        RESOLVED,       // Issue has been addressed\\n        REJECTED,       // Issue deemed invalid/false\\n        DUPLICATE       // Duplicate of existing issue\\n    }\\n    \\n    // Issue categories\\n    enum IssueCategory {\\n        INFRASTRUCTURE,     // Roads, bridges, utilities\\n        PUBLIC_SAFETY,      // Crime, dangerous conditions\\n        ENVIRONMENT,        // Pollution, waste management\\n        CORRUPTION,         // Government misconduct, fraud\\n        SERVICE_QUALITY,    // Poor government services\\n        BUDGET_MISUSE,      // Improper use of public funds\\n        TRANSPARENCY,       // Lack of information disclosure\\n        OTHER\\n    }\\n    \\n    // Evidence structure\\n    struct Evidence {\\n        string evidenceHash; // IPFS hash\\n        string ipfsDescriptionHash; // IPFS hash for evidence description\\n        uint256 timestamp;\\n        address submittedBy;\\n        bool isVerified;\\n    }\\n    \\n    // Issue report structure\\n    struct IssueReport {\\n        uint256 reportId;\\n        uint256 citizenId;\\n        address reporter;\\n        string title; // Keep on-chain for indexing\\n        string ipfsDescriptionHash; // IPFS hash for detailed description\\n        IssueCategory category;\\n        IssueSeverity severity;\\n        IssueStatus status;\\n        string ipfsLocationDataHash; // IPFS hash for location details\\n        uint256 submitTimestamp;\\n        uint256 lastUpdateTimestamp;\\n        uint256 verificationScore; // Weighted verification score\\n        uint256 supportCount; // Number of citizens supporting this report\\n        address assignedTo; // Government entity assigned to handle\\n        string ipfsResolutionNotesHash; // IPFS hash for resolution details\\n        uint256 resolutionTimestamp;\\n        bool isAnonymous;\\n        uint256 duplicateOfReportId; // If marked as duplicate\\n        string[] tags; // Searchable tags (keep on-chain for filtering)\\n    }\\n    \\n    // Verification vote structure\\n    struct VerificationVote {\\n        uint256 citizenId;\\n        address voter;\\n        bool isSupporting; // true = supports report validity, false = disputes\\n        string ipfsCommentsHash; // IPFS hash for detailed comments\\n        uint256 timestamp;\\n        uint256 voterReputationAtTime; // Voter's reputation when vote was cast\\n    }\\n    \\n    // Storage\\n    uint256 private _reportIdCounter;\\n    mapping(uint256 => IssueReport) public reports;\\n    mapping(uint256 => Evidence[]) public reportEvidence; // reportId => Evidence[]\\n    mapping(uint256 => VerificationVote[]) public reportVerifications; // reportId => VerificationVote[]\\n    mapping(uint256 => mapping(uint256 => bool)) public hasVotedOnReport; // reportId => citizenId => voted\\n    mapping(uint256 => mapping(uint256 => bool)) public hasSupportedReport; // reportId => citizenId => supported\\n    mapping(address => bool) public authorizedGovernmentEntities;\\n    mapping(uint256 => uint256[]) public categoryReports; // category => reportIds\\n    mapping(address => uint256[]) public citizenReports; // citizen address => reportIds\\n    mapping(bytes32 => uint256[]) public locationReports; // location hash => reportIds\\n    \\n    // Configuration\\n    uint256 public minimumVerificationScore = 100; // Minimum score to mark as verified\\n    uint256 public verificationThreshold = 3; // Minimum verification votes needed\\n    uint256 public duplicateThreshold = 80; // Similarity threshold for duplicates (in percentage)\\n    \\n    // Events\\n    event IssueReported(\\n        uint256 indexed reportId,\\n        uint256 indexed citizenId,\\n        address indexed reporter,\\n        IssueCategory category,\\n        IssueSeverity severity\\n    );\\n    \\n    event IssueStatusUpdated(\\n        uint256 indexed reportId,\\n        IssueStatus previousStatus,\\n        IssueStatus newStatus,\\n        address indexed updatedBy\\n    );\\n    \\n    event IssueVerificationVote(\\n        uint256 indexed reportId,\\n        uint256 indexed citizenId,\\n        address indexed voter,\\n        bool isSupporting,\\n        uint256 voterReputation\\n    );\\n    \\n    event EvidenceAdded(\\n        uint256 indexed reportId,\\n        string evidenceHash,\\n        address indexed submittedBy\\n    );\\n    \\n    event IssueAssigned(\\n        uint256 indexed reportId,\\n        address indexed assignedTo,\\n        address indexed assignedBy\\n    );\\n    \\n    event IssueResolved(\\n        uint256 indexed reportId,\\n        address indexed resolvedBy,\\n        string resolutionNotes\\n    );\\n    \\n    event IssueDuplicate(\\n        uint256 indexed reportId,\\n        uint256 indexed duplicateOfReportId,\\n        address indexed markedBy\\n    );\\n    \\n    // Modifiers\\n    modifier onlyRegisteredCitizen() {\\n        require(citizenRegistry.isCitizenRegistered(msg.sender), \\n                \\\"IssueReporting: Must be registered citizen\\\");\\n        _;\\n    }\\n    \\n    modifier onlyAuthorizedGovernment() {\\n        require(authorizedGovernmentEntities[msg.sender], \\n                \\\"IssueReporting: Not authorized government entity\\\");\\n        _;\\n    }\\n    \\n    modifier validReportId(uint256 _reportId) {\\n        require(_reportId > 0 && _reportId <= _reportIdCounter, \\n                \\\"IssueReporting: Invalid report ID\\\");\\n        _;\\n    }\\n    \\n    modifier onlyReportOwnerOrGov(uint256 _reportId) {\\n        require(\\n            reports[_reportId].reporter == msg.sender || \\n            authorizedGovernmentEntities[msg.sender] || \\n            msg.sender == owner(),\\n            \\\"IssueReporting: Not authorized to modify this report\\\"\\n        );\\n        _;\\n    }\\n    \\n    constructor(\\n        address initialOwner,\\n        address _citizenRegistry,\\n        address _reputationSystem\\n    ) Ownable(initialOwner) {\\n        require(_citizenRegistry != address(0), \\\"IssueReporting: Invalid citizen registry\\\");\\n        require(_reputationSystem != address(0), \\\"IssueReporting: Invalid reputation system\\\");\\n        \\n        citizenRegistry = CitizenIdentityRegistry(_citizenRegistry);\\n        reputationSystem = ReputationSystem(_reputationSystem);\\n    }\\n    \\n    /**\\n     * @dev Submit a new issue report\\n     */\\n    function submitIssueReport(\\n        string memory _title,\\n        string memory _ipfsDescriptionHash,\\n        IssueCategory _category,\\n        IssueSeverity _severity,\\n        string memory _ipfsLocationDataHash,\\n        string memory _evidenceHash,\\n        string[] memory _tags,\\n        bool _isAnonymous\\n    ) external onlyRegisteredCitizen nonReentrant {\\n        require(bytes(_title).length > 0, \\\"IssueReporting: Title cannot be empty\\\");\\n        require(bytes(_ipfsDescriptionHash).length > 0, \\\"IssueReporting: IPFS description hash required\\\");\\n        require(_tags.length <= 10, \\\"IssueReporting: Too many tags\\\");\\n        \\n        // Get citizen ID - using try/catch for safety\\n        uint256 citizenId = 0;\\n        try citizenRegistry.getCitizenByWallet(msg.sender) returns (CitizenIdentityRegistry.CitizenProfile memory profile) {\\n            citizenId = profile.citizenId;\\n        } catch {\\n            revert(\\\"IssueReporting: Failed to get citizen ID\\\");\\n        }\\n        \\n        _reportIdCounter++;\\n        uint256 newReportId = _reportIdCounter;\\n        \\n        // Create report\\n        reports[newReportId] = IssueReport({\\n            reportId: newReportId,\\n            citizenId: citizenId,\\n            reporter: _isAnonymous ? address(0) : msg.sender,\\n            title: _title,\\n            ipfsDescriptionHash: _ipfsDescriptionHash,\\n            category: _category,\\n            severity: _severity,\\n            status: IssueStatus.SUBMITTED,\\n            ipfsLocationDataHash: _ipfsLocationDataHash,\\n            submitTimestamp: block.timestamp,\\n            lastUpdateTimestamp: block.timestamp,\\n            verificationScore: 0,\\n            supportCount: 0,\\n            assignedTo: address(0),\\n            ipfsResolutionNotesHash: \\\"\\\",\\n            resolutionTimestamp: 0,\\n            isAnonymous: _isAnonymous,\\n            duplicateOfReportId: 0,\\n            tags: _tags\\n        });\\n        \\n        // Add to mappings\\n        categoryReports[uint256(_category)].push(newReportId);\\n        if (!_isAnonymous) {\\n            citizenReports[msg.sender].push(newReportId);\\n        }\\n        \\n        // Add location to mapping if provided\\n        if (bytes(_ipfsLocationDataHash).length > 0) {\\n            bytes32 locationHash = keccak256(abi.encodePacked(_ipfsLocationDataHash));\\n            locationReports[locationHash].push(newReportId);\\n        }\\n        \\n        // Add evidence if provided\\n        if (bytes(_evidenceHash).length > 0) {\\n            reportEvidence[newReportId].push(Evidence({\\n                evidenceHash: _evidenceHash,\\n                ipfsDescriptionHash: \\\"\\\", // Can be added later\\n                timestamp: block.timestamp,\\n                submittedBy: msg.sender,\\n                isVerified: false\\n            }));\\n            \\n            emit EvidenceAdded(newReportId, _evidenceHash, msg.sender);\\n        }\\n        \\n        emit IssueReported(newReportId, citizenId, _isAnonymous ? address(0) : msg.sender, _category, _severity);\\n    }\\n    \\n    /**\\n     * @dev Add evidence to existing report\\n     */\\n    function addEvidence(\\n        uint256 _reportId,\\n        string memory _evidenceHash,\\n        string memory _ipfsDescriptionHash\\n    ) external onlyRegisteredCitizen validReportId(_reportId) {\\n        require(bytes(_evidenceHash).length > 0, \\\"IssueReporting: Evidence hash cannot be empty\\\");\\n        require(bytes(_ipfsDescriptionHash).length > 0, \\\"IssueReporting: IPFS description hash required\\\");\\n        \\n        IssueReport storage report = reports[_reportId];\\n        require(report.status != IssueStatus.RESOLVED && report.status != IssueStatus.REJECTED, \\n                \\\"IssueReporting: Cannot add evidence to closed report\\\");\\n        \\n        reportEvidence[_reportId].push(Evidence({\\n            evidenceHash: _evidenceHash,\\n            ipfsDescriptionHash: _ipfsDescriptionHash,\\n            timestamp: block.timestamp,\\n            submittedBy: msg.sender,\\n            isVerified: false\\n        }));\\n        \\n        report.lastUpdateTimestamp = block.timestamp;\\n        \\n        emit EvidenceAdded(_reportId, _evidenceHash, msg.sender);\\n    }\\n    \\n    /**\\n     * @dev Vote to verify/support an issue report\\n     */\\n    function verifyReport(\\n        uint256 _reportId,\\n        bool _isSupporting,\\n        string memory _ipfsCommentsHash\\n    ) external onlyRegisteredCitizen validReportId(_reportId) {\\n        // Get citizen ID - using try/catch for safety\\n        uint256 citizenId = 0;\\n        try citizenRegistry.getCitizenByWallet(msg.sender) returns (CitizenIdentityRegistry.CitizenProfile memory profile) {\\n            citizenId = profile.citizenId;\\n        } catch {\\n            revert(\\\"IssueReporting: Failed to get citizen ID\\\");\\n        }\\n        require(!hasVotedOnReport[_reportId][citizenId], \\\"IssueReporting: Already voted on this report\\\");\\n        require(reports[_reportId].citizenId != citizenId, \\\"IssueReporting: Cannot vote on own report\\\");\\n        \\n        IssueReport storage report = reports[_reportId];\\n        require(report.status == IssueStatus.SUBMITTED || report.status == IssueStatus.UNDER_REVIEW, \\n                \\\"IssueReporting: Report not open for verification\\\");\\n        \\n        // Get voter's current reputation score\\n        uint256 voterReputation = 100; // Default reputation\\n        try reputationSystem.getReputationScore(citizenId) returns (uint256 reputation) {\\n            voterReputation = reputation;\\n        } catch {}\\n        \\n        // Record verification vote\\n        reportVerifications[_reportId].push(VerificationVote({\\n            citizenId: citizenId,\\n            voter: msg.sender,\\n            isSupporting: _isSupporting,\\n            ipfsCommentsHash: _ipfsCommentsHash,\\n            timestamp: block.timestamp,\\n            voterReputationAtTime: voterReputation\\n        }));\\n        \\n        hasVotedOnReport[_reportId][citizenId] = true;\\n        \\n        // Update verification score (weighted by reputation)\\n        uint256 voteWeight = _calculateVoteWeight(voterReputation);\\n        if (_isSupporting) {\\n            report.verificationScore += voteWeight;\\n            report.supportCount++;\\n        } else {\\n            // Negative votes reduce the score\\n            if (report.verificationScore >= voteWeight) {\\n                report.verificationScore -= voteWeight;\\n            } else {\\n                report.verificationScore = 0;\\n            }\\n        }\\n        \\n        report.lastUpdateTimestamp = block.timestamp;\\n        \\n        // Auto-verify if thresholds are met\\n        if (report.verificationScore >= minimumVerificationScore && \\n            reportVerifications[_reportId].length >= verificationThreshold &&\\n            report.status == IssueStatus.SUBMITTED) {\\n            \\n            report.status = IssueStatus.VERIFIED;\\n            emit IssueStatusUpdated(_reportId, IssueStatus.SUBMITTED, IssueStatus.VERIFIED, address(this));\\n            \\n            // Award reputation to reporter if verified\\n            bytes32 reportHash = keccak256(abi.encodePacked(\\\"report\\\", _reportId));\\n            try reputationSystem.addIssueReportReputation(report.citizenId, reportHash) {} catch {}\\n        }\\n        \\n        emit IssueVerificationVote(_reportId, citizenId, msg.sender, _isSupporting, voterReputation);\\n    }\\n    \\n    /**\\n     * @dev Update issue status (government entities only)\\n     */\\n    function updateIssueStatus(\\n        uint256 _reportId,\\n        IssueStatus _newStatus,\\n        string memory _ipfsNotesHash\\n    ) external onlyAuthorizedGovernment validReportId(_reportId) {\\n        IssueReport storage report = reports[_reportId];\\n        IssueStatus previousStatus = report.status;\\n        \\n        require(previousStatus != _newStatus, \\\"IssueReporting: Status unchanged\\\");\\n        require(_isValidStatusTransition(previousStatus, _newStatus), \\n                \\\"IssueReporting: Invalid status transition\\\");\\n        \\n        report.status = _newStatus;\\n        report.lastUpdateTimestamp = block.timestamp;\\n        \\n        // Handle resolution\\n        if (_newStatus == IssueStatus.RESOLVED) {\\n            report.ipfsResolutionNotesHash = _ipfsNotesHash;\\n            report.resolutionTimestamp = block.timestamp;\\n        }\\n        \\n        // Handle assignment\\n        if (_newStatus == IssueStatus.IN_PROGRESS && report.assignedTo == address(0)) {\\n            report.assignedTo = msg.sender;\\n            emit IssueAssigned(_reportId, msg.sender, msg.sender);\\n        }\\n        \\n        // Penalize false reports\\n        if (_newStatus == IssueStatus.REJECTED && report.citizenId != 0) {\\n            bytes32 reportHash = keccak256(abi.encodePacked(\\\"false_report\\\", _reportId));\\n            try reputationSystem.penalizeFalseReport(report.citizenId, reportHash) {} catch {}\\n        }\\n        \\n        emit IssueStatusUpdated(_reportId, previousStatus, _newStatus, msg.sender);\\n        \\n        if (_newStatus == IssueStatus.RESOLVED) {\\n            emit IssueResolved(_reportId, msg.sender, _ipfsNotesHash);\\n        }\\n    }\\n    \\n    /**\\n     * @dev Assign issue to government entity\\n     */\\n    function assignIssue(\\n        uint256 _reportId,\\n        address _assignee\\n    ) external onlyAuthorizedGovernment validReportId(_reportId) {\\n        require(authorizedGovernmentEntities[_assignee], \\\"IssueReporting: Assignee not authorized\\\");\\n        \\n        IssueReport storage report = reports[_reportId];\\n        require(report.status == IssueStatus.VERIFIED || report.status == IssueStatus.UNDER_REVIEW, \\n                \\\"IssueReporting: Report must be verified or under review\\\");\\n        \\n        report.assignedTo = _assignee;\\n        report.lastUpdateTimestamp = block.timestamp;\\n        \\n        emit IssueAssigned(_reportId, _assignee, msg.sender);\\n    }\\n    \\n    /**\\n     * @dev Mark report as duplicate\\n     */\\n    function markAsDuplicate(\\n        uint256 _reportId,\\n        uint256 _originalReportId\\n    ) external onlyAuthorizedGovernment validReportId(_reportId) validReportId(_originalReportId) {\\n        require(_reportId != _originalReportId, \\\"IssueReporting: Cannot mark as duplicate of itself\\\");\\n        require(reports[_originalReportId].status != IssueStatus.REJECTED, \\n                \\\"IssueReporting: Original report is rejected\\\");\\n        \\n        IssueReport storage report = reports[_reportId];\\n        IssueStatus previousStatus = report.status;\\n        \\n        report.status = IssueStatus.DUPLICATE;\\n        report.duplicateOfReportId = _originalReportId;\\n        report.lastUpdateTimestamp = block.timestamp;\\n        \\n        // Increase support count for original report\\n        reports[_originalReportId].supportCount++;\\n        \\n        emit IssueStatusUpdated(_reportId, previousStatus, IssueStatus.DUPLICATE, msg.sender);\\n        emit IssueDuplicate(_reportId, _originalReportId, msg.sender);\\n    }\\n    \\n    // View functions\\n    function getReport(uint256 _reportId) external view validReportId(_reportId) returns (IssueReport memory) {\\n        return reports[_reportId];\\n    }\\n    \\n    function getReportEvidence(uint256 _reportId) external view validReportId(_reportId) returns (Evidence[] memory) {\\n        return reportEvidence[_reportId];\\n    }\\n    \\n    function getReportVerifications(uint256 _reportId) external view validReportId(_reportId) returns (VerificationVote[] memory) {\\n        return reportVerifications[_reportId];\\n    }\\n    \\n    function getReportsByCategory(IssueCategory _category) external view returns (uint256[] memory) {\\n        return categoryReports[uint256(_category)];\\n    }\\n    \\n    function getCitizenReports(address _citizen) external view returns (uint256[] memory) {\\n        return citizenReports[_citizen];\\n    }\\n    \\n    function getReportsByStatus(IssueStatus _status) external view returns (uint256[] memory) {\\n        uint256 count = 0;\\n        \\n        // Count reports with status\\n        for (uint256 i = 1; i <= _reportIdCounter; i++) {\\n            if (reports[i].status == _status) {\\n                count++;\\n            }\\n        }\\n        \\n        // Create result array\\n        uint256[] memory result = new uint256[](count);\\n        uint256 index = 0;\\n        \\n        for (uint256 i = 1; i <= _reportIdCounter; i++) {\\n            if (reports[i].status == _status) {\\n                result[index] = i;\\n                index++;\\n            }\\n        }\\n        \\n        return result;\\n    }\\n    \\n    function getReportStats() external view returns (\\n        uint256 totalReports,\\n        uint256 verifiedReports,\\n        uint256 resolvedReports,\\n        uint256 pendingReports\\n    ) {\\n        uint256 verified = 0;\\n        uint256 resolved = 0;\\n        uint256 pending = 0;\\n        \\n        for (uint256 i = 1; i <= _reportIdCounter; i++) {\\n            IssueStatus status = reports[i].status;\\n            \\n            if (status == IssueStatus.VERIFIED) verified++;\\n            else if (status == IssueStatus.RESOLVED) resolved++;\\n            else if (status == IssueStatus.SUBMITTED || status == IssueStatus.UNDER_REVIEW || status == IssueStatus.IN_PROGRESS) {\\n                pending++;\\n            }\\n        }\\n        \\n        return (_reportIdCounter, verified, resolved, pending);\\n    }\\n    \\n    function getTotalReports() external view returns (uint256) {\\n        return _reportIdCounter;\\n    }\\n    \\n    // Internal functions\\n    function _calculateVoteWeight(uint256 _reputation) internal pure returns (uint256) {\\n        // Base weight of 10, with bonus based on reputation\\n        // Higher reputation citizens have more influence\\n        if (_reputation >= 1000) return 50;      // High reputation\\n        else if (_reputation >= 500) return 30; // Medium reputation\\n        else if (_reputation >= 100) return 20; // Basic reputation\\n        else return 10;                          // New/low reputation\\n    }\\n    \\n    function _isValidStatusTransition(IssueStatus _from, IssueStatus _to) internal pure returns (bool) {\\n        if (_from == IssueStatus.SUBMITTED) {\\n            return _to == IssueStatus.UNDER_REVIEW || _to == IssueStatus.VERIFIED || \\n                   _to == IssueStatus.REJECTED || _to == IssueStatus.DUPLICATE;\\n        } else if (_from == IssueStatus.UNDER_REVIEW) {\\n            return _to == IssueStatus.VERIFIED || _to == IssueStatus.REJECTED || \\n                   _to == IssueStatus.DUPLICATE || _to == IssueStatus.IN_PROGRESS;\\n        } else if (_from == IssueStatus.VERIFIED) {\\n            return _to == IssueStatus.IN_PROGRESS || _to == IssueStatus.REJECTED;\\n        } else if (_from == IssueStatus.IN_PROGRESS) {\\n            return _to == IssueStatus.RESOLVED || _to == IssueStatus.UNDER_REVIEW;\\n        }\\n        return false; // RESOLVED, REJECTED, DUPLICATE are final states\\n    }\\n    \\n    // Admin functions\\n    function authorizeGovernmentEntity(address _entity, bool _authorized) external onlyOwner {\\n        require(_entity != address(0), \\\"IssueReporting: Invalid entity address\\\");\\n        authorizedGovernmentEntities[_entity] = _authorized;\\n    }\\n    \\n    function updateVerificationThresholds(\\n        uint256 _minimumScore,\\n        uint256 _verificationThreshold\\n    ) external onlyOwner {\\n        require(_minimumScore > 0, \\\"IssueReporting: Minimum score must be positive\\\");\\n        require(_verificationThreshold > 0, \\\"IssueReporting: Verification threshold must be positive\\\");\\n        \\n        minimumVerificationScore = _minimumScore;\\n        verificationThreshold = _verificationThreshold;\\n    }\\n    \\n    function updateReputationSystem(address _reputationSystem) external onlyOwner {\\n        require(_reputationSystem != address(0), \\\"IssueReporting: Invalid reputation system\\\");\\n        reputationSystem = ReputationSystem(_reputationSystem);\\n    }\\n    \\n    function emergencyUpdateReportStatus(\\n        uint256 _reportId,\\n        IssueStatus _status\\n    ) external onlyOwner validReportId(_reportId) {\\n        IssueStatus previousStatus = reports[_reportId].status;\\n        reports[_reportId].status = _status;\\n        reports[_reportId].lastUpdateTimestamp = block.timestamp;\\n        \\n        emit IssueStatusUpdated(_reportId, previousStatus, _status, msg.sender);\\n    }\\n}\",\"keccak256\":\"0x7c2f8918644271217613a24668d309a8bcd3a685fd473cede5151b6699e3e729\",\"license\":\"MIT\"},\"contracts/ReputationSystem.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"./CitizenIdentityRegistry.sol\\\";\\n\\n/**\\n * @title ReputationSystem\\n * @dev Manages citizen reputation scores based on verified activities\\n * @author CitiProof Team\\n */\\ncontract ReputationSystem is Ownable, ReentrancyGuard {\\n    \\n    // Reference to CitizenIdentityRegistry\\n    CitizenIdentityRegistry public immutable citizenRegistry;\\n\\n    // Reputation scoring configuration\\n    struct ReputationConfig {\\n        uint256 issueReportReward;      // Points for verified issue reports\\n        uint256 verificationReward;     // Points for successful verifications\\n        uint256 votingReward;          // Points for participation in voting\\n        uint256 projectCompletionReward; // Points for project milestone completion\\n        uint256 falseReportPenalty;    // Penalty for false/spam reports\\n        uint256 maxDailyEarnings;      // Max points per day to prevent gaming\\n        uint256 decayRate;             // Daily reputation decay (in basis points)\\n        uint256 minimumDecayThreshold; // Minimum reputation before decay applies\\n    }\\n\\n    ReputationConfig public config;\\n\\n    // Reputation tracking\\n    struct ReputationData {\\n        uint256 totalScore;\\n        uint256 lastUpdateTimestamp;\\n        uint256 dailyEarnings;\\n        uint256 lastEarningsReset;\\n        mapping(bytes32 => bool) actionCompleted; // Prevent double rewards\\n        uint256 totalReports;\\n        uint256 verifiedReports;\\n        uint256 totalVerifications;\\n        uint256 successfulVerifications;\\n        uint256 votingParticipation;\\n    }\\n\\n    // Storage\\n    mapping(uint256 => ReputationData) private reputationData; // citizenId => ReputationData\\n    mapping(address => bool) public authorizedContracts; // Contracts allowed to update reputation\\n\\n    // Events\\n    event ReputationUpdated(\\n        uint256 indexed citizenId,\\n        address indexed citizen,\\n        uint256 oldScore,\\n        uint256 newScore,\\n        string reason\\n    );\\n\\n    event ReputationConfigUpdated(\\n        uint256 issueReportReward,\\n        uint256 verificationReward,\\n        uint256 votingReward,\\n        uint256 projectCompletionReward\\n    );\\n\\n    event ContractAuthorized(address indexed contractAddress, bool authorized);\\n\\n    // Modifiers\\n    modifier onlyAuthorizedContract() {\\n        require(authorizedContracts[msg.sender], \\\"ReputationSystem: Caller not authorized\\\");\\n        _;\\n    }\\n\\n    modifier validCitizenId(uint256 _citizenId) {\\n        require(_citizenId > 0, \\\"ReputationSystem: Invalid citizen ID\\\");\\n        // Additional validation by getting citizen profile\\n        try citizenRegistry.getCitizen(_citizenId) returns (CitizenIdentityRegistry.CitizenProfile memory profile) {\\n            require(profile.isActive, \\\"ReputationSystem: Citizen not active\\\");\\n        } catch {\\n            revert(\\\"ReputationSystem: Citizen does not exist\\\");\\n        }\\n        _;\\n    }\\n\\n    constructor(\\n        address initialOwner,\\n        address _citizenRegistry\\n    ) Ownable(initialOwner) {\\n        require(_citizenRegistry != address(0), \\\"ReputationSystem: Invalid citizen registry address\\\");\\n        citizenRegistry = CitizenIdentityRegistry(_citizenRegistry);\\n\\n        // Initialize default configuration\\n        config = ReputationConfig({\\n            issueReportReward: 50,        // 50 points per verified report\\n            verificationReward: 25,       // 25 points per verification\\n            votingReward: 10,            // 10 points per vote\\n            projectCompletionReward: 100, // 100 points per project milestone\\n            falseReportPenalty: 75,      // -75 points for false reports\\n            maxDailyEarnings: 200,       // Max 200 points per day\\n            decayRate: 10,               // 0.1% daily decay (10 basis points)\\n            minimumDecayThreshold: 100   // No decay below 100 points\\n        });\\n    }\\n\\n    /**\\n     * @dev Add reputation points for verified issue report\\n     */\\n    function addIssueReportReputation(uint256 _citizenId, bytes32 _reportId) \\n        external \\n        onlyAuthorizedContract \\n        validCitizenId(_citizenId) \\n    {\\n        bytes32 actionId = keccak256(abi.encodePacked(\\\"issue_report\\\", _reportId));\\n        require(!reputationData[_citizenId].actionCompleted[actionId], \\n                \\\"ReputationSystem: Reward already claimed for this report\\\");\\n\\n        _addReputation(_citizenId, config.issueReportReward, \\\"Verified issue report\\\");\\n        reputationData[_citizenId].actionCompleted[actionId] = true;\\n        reputationData[_citizenId].totalReports++;\\n        reputationData[_citizenId].verifiedReports++;\\n    }\\n\\n    /**\\n     * @dev Add reputation points for successful verification\\n     */\\n    function addVerificationReputation(uint256 _citizenId, bytes32 _verificationId) \\n        external \\n        onlyAuthorizedContract \\n        validCitizenId(_citizenId) \\n    {\\n        bytes32 actionId = keccak256(abi.encodePacked(\\\"verification\\\", _verificationId));\\n        require(!reputationData[_citizenId].actionCompleted[actionId], \\n                \\\"ReputationSystem: Reward already claimed for this verification\\\");\\n\\n        _addReputation(_citizenId, config.verificationReward, \\\"Successful verification\\\");\\n        reputationData[_citizenId].actionCompleted[actionId] = true;\\n        reputationData[_citizenId].totalVerifications++;\\n        reputationData[_citizenId].successfulVerifications++;\\n    }\\n\\n    /**\\n     * @dev Add reputation points for voting participation\\n     */\\n    function addVotingReputation(uint256 _citizenId, bytes32 _voteId) \\n        external \\n        onlyAuthorizedContract \\n        validCitizenId(_citizenId) \\n    {\\n        bytes32 actionId = keccak256(abi.encodePacked(\\\"vote\\\", _voteId));\\n        require(!reputationData[_citizenId].actionCompleted[actionId], \\n                \\\"ReputationSystem: Reward already claimed for this vote\\\");\\n\\n        _addReputation(_citizenId, config.votingReward, \\\"Voting participation\\\");\\n        reputationData[_citizenId].actionCompleted[actionId] = true;\\n        reputationData[_citizenId].votingParticipation++;\\n    }\\n\\n    /**\\n     * @dev Add reputation points for project completion\\n     */\\n    function addProjectCompletionReputation(uint256 _citizenId, bytes32 _projectId) \\n        external \\n        onlyAuthorizedContract \\n        validCitizenId(_citizenId) \\n    {\\n        bytes32 actionId = keccak256(abi.encodePacked(\\\"project\\\", _projectId));\\n        require(!reputationData[_citizenId].actionCompleted[actionId], \\n                \\\"ReputationSystem: Reward already claimed for this project\\\");\\n\\n        _addReputation(_citizenId, config.projectCompletionReward, \\\"Project milestone completion\\\");\\n        reputationData[_citizenId].actionCompleted[actionId] = true;\\n    }\\n\\n    /**\\n     * @dev Penalize reputation for false reports\\n     */\\n    function penalizeFalseReport(uint256 _citizenId, bytes32 _reportId) \\n        external \\n        onlyAuthorizedContract \\n        validCitizenId(_citizenId) \\n    {\\n        bytes32 actionId = keccak256(abi.encodePacked(\\\"false_report\\\", _reportId));\\n        require(!reputationData[_citizenId].actionCompleted[actionId], \\n                \\\"ReputationSystem: Penalty already applied for this report\\\");\\n\\n        _subtractReputation(_citizenId, config.falseReportPenalty, \\\"False report penalty\\\");\\n        reputationData[_citizenId].actionCompleted[actionId] = true;\\n        reputationData[_citizenId].totalReports++;\\n        // Note: verifiedReports count remains unchanged\\n    }\\n\\n    /**\\n     * @dev Apply daily reputation decay to prevent inflation\\n     */\\n    function applyDailyDecay(uint256[] calldata _citizenIds) external {\\n        for (uint256 i = 0; i < _citizenIds.length; i++) {\\n            _applyDecay(_citizenIds[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function to add reputation with daily limits\\n     */\\n    function _addReputation(uint256 _citizenId, uint256 _points, string memory _reason) internal {\\n        ReputationData storage data = reputationData[_citizenId];\\n        \\n        // Reset daily earnings if it's a new day\\n        if (block.timestamp > data.lastEarningsReset + 1 days) {\\n            data.dailyEarnings = 0;\\n            data.lastEarningsReset = block.timestamp;\\n        }\\n\\n        // Check daily earning limits\\n        uint256 actualPoints = _points;\\n        if (data.dailyEarnings + _points > config.maxDailyEarnings) {\\n            actualPoints = config.maxDailyEarnings > data.dailyEarnings ? \\n                           config.maxDailyEarnings - data.dailyEarnings : 0;\\n        }\\n\\n        if (actualPoints > 0) {\\n            uint256 oldScore = data.totalScore;\\n            data.totalScore += actualPoints;\\n            data.dailyEarnings += actualPoints;\\n            data.lastUpdateTimestamp = block.timestamp;\\n\\n            // Update citizen registry with new score\\n            citizenRegistry.updateReputationScore(_citizenId, data.totalScore);\\n\\n            // Get citizen address from registry\\n            address citizenAddress = address(0);\\n            try citizenRegistry.getCitizen(_citizenId) returns (CitizenIdentityRegistry.CitizenProfile memory profile) {\\n                citizenAddress = profile.walletAddress;\\n            } catch {}\\n            \\n            emit ReputationUpdated(_citizenId, citizenAddress, oldScore, data.totalScore, _reason);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function to subtract reputation\\n     */\\n    function _subtractReputation(uint256 _citizenId, uint256 _points, string memory _reason) internal {\\n        ReputationData storage data = reputationData[_citizenId];\\n        uint256 oldScore = data.totalScore;\\n        \\n        // Ensure reputation doesn't go below 0\\n        if (data.totalScore >= _points) {\\n            data.totalScore -= _points;\\n        } else {\\n            data.totalScore = 0;\\n        }\\n        \\n        data.lastUpdateTimestamp = block.timestamp;\\n\\n        // Update citizen registry with new score\\n        citizenRegistry.updateReputationScore(_citizenId, data.totalScore);\\n\\n        // Get citizen address from registry\\n        address citizenAddress = address(0);\\n        try citizenRegistry.getCitizen(_citizenId) returns (CitizenIdentityRegistry.CitizenProfile memory profile) {\\n            citizenAddress = profile.walletAddress;\\n        } catch {}\\n        emit ReputationUpdated(_citizenId, citizenAddress, oldScore, data.totalScore, _reason);\\n    }\\n\\n    /**\\n     * @dev Apply reputation decay for inactive users\\n     */\\n    function _applyDecay(uint256 _citizenId) internal validCitizenId(_citizenId) {\\n        ReputationData storage data = reputationData[_citizenId];\\n        \\n        // Only apply decay if above minimum threshold and it's been at least a day\\n        if (data.totalScore > config.minimumDecayThreshold && \\n            block.timestamp > data.lastUpdateTimestamp + 1 days) {\\n            \\n            uint256 daysSinceUpdate = (block.timestamp - data.lastUpdateTimestamp) / 1 days;\\n            uint256 decayAmount = (data.totalScore * config.decayRate * daysSinceUpdate) / 10000;\\n            \\n            if (decayAmount > 0) {\\n                _subtractReputation(_citizenId, decayAmount, \\\"Daily reputation decay\\\");\\n            }\\n        }\\n    }\\n\\n    // View functions\\n    function getReputationScore(uint256 _citizenId) external view validCitizenId(_citizenId) returns (uint256) {\\n        return reputationData[_citizenId].totalScore;\\n    }\\n\\n    function getReputationStats(uint256 _citizenId) \\n        external \\n        view \\n        validCitizenId(_citizenId) \\n        returns (\\n            uint256 totalScore,\\n            uint256 totalReports,\\n            uint256 verifiedReports,\\n            uint256 totalVerifications,\\n            uint256 successfulVerifications,\\n            uint256 votingParticipation,\\n            uint256 lastUpdateTimestamp\\n        ) \\n    {\\n        ReputationData storage data = reputationData[_citizenId];\\n        return (\\n            data.totalScore,\\n            data.totalReports,\\n            data.verifiedReports,\\n            data.totalVerifications,\\n            data.successfulVerifications,\\n            data.votingParticipation,\\n            data.lastUpdateTimestamp\\n        );\\n    }\\n\\n    function getDailyEarningsInfo(uint256 _citizenId) \\n        external \\n        view \\n        validCitizenId(_citizenId) \\n        returns (uint256 dailyEarnings, uint256 remainingEarnings, uint256 lastReset) \\n    {\\n        ReputationData storage data = reputationData[_citizenId];\\n        uint256 remaining = config.maxDailyEarnings > data.dailyEarnings ? \\n                           config.maxDailyEarnings - data.dailyEarnings : 0;\\n        \\n        return (data.dailyEarnings, remaining, data.lastEarningsReset);\\n    }\\n\\n    function getTopReputationCitizens(uint256 _limit) \\n        external \\n        view \\n        returns (uint256[] memory citizenIds, uint256[] memory scores) \\n    {\\n        uint256 totalCitizens = citizenRegistry.getTotalCitizens();\\n        if (_limit > totalCitizens) _limit = totalCitizens;\\n        \\n        citizenIds = new uint256[](_limit);\\n        scores = new uint256[](_limit);\\n        uint256 count = 0;\\n        \\n        // Simple implementation - collect first _limit active citizens with scores\\n        for (uint256 i = 1; i <= totalCitizens && count < _limit; i++) {\\n            try citizenRegistry.getCitizen(i) returns (CitizenIdentityRegistry.CitizenProfile memory profile) {\\n                if (profile.isActive) {\\n                    citizenIds[count] = i;\\n                    scores[count] = reputationData[i].totalScore;\\n                    count++;\\n                }\\n            } catch {\\n                // Skip invalid citizens\\n                continue;\\n            }\\n        }\\n        \\n        return (citizenIds, scores);\\n    }\\n\\n    // Admin functions\\n    function updateConfig(\\n        uint256 _issueReportReward,\\n        uint256 _verificationReward,\\n        uint256 _votingReward,\\n        uint256 _projectCompletionReward,\\n        uint256 _falseReportPenalty,\\n        uint256 _maxDailyEarnings,\\n        uint256 _decayRate,\\n        uint256 _minimumDecayThreshold\\n    ) external onlyOwner {\\n        config.issueReportReward = _issueReportReward;\\n        config.verificationReward = _verificationReward;\\n        config.votingReward = _votingReward;\\n        config.projectCompletionReward = _projectCompletionReward;\\n        config.falseReportPenalty = _falseReportPenalty;\\n        config.maxDailyEarnings = _maxDailyEarnings;\\n        config.decayRate = _decayRate;\\n        config.minimumDecayThreshold = _minimumDecayThreshold;\\n\\n        emit ReputationConfigUpdated(\\n            _issueReportReward,\\n            _verificationReward,\\n            _votingReward,\\n            _projectCompletionReward\\n        );\\n    }\\n\\n    function authorizeContract(address _contract, bool _authorized) external onlyOwner {\\n        require(_contract != address(0), \\\"ReputationSystem: Invalid contract address\\\");\\n        authorizedContracts[_contract] = _authorized;\\n        emit ContractAuthorized(_contract, _authorized);\\n    }\\n\\n    function emergencyResetReputation(uint256 _citizenId, uint256 _newScore) external onlyOwner {\\n        ReputationData storage data = reputationData[_citizenId];\\n        uint256 oldScore = data.totalScore;\\n        data.totalScore = _newScore;\\n        data.lastUpdateTimestamp = block.timestamp;\\n\\n        citizenRegistry.updateReputationScore(_citizenId, _newScore);\\n\\n        // Get citizen address from registry\\n        address citizenAddress = address(0);\\n        try citizenRegistry.getCitizen(_citizenId) returns (CitizenIdentityRegistry.CitizenProfile memory profile) {\\n            citizenAddress = profile.walletAddress;\\n        } catch {}\\n        emit ReputationUpdated(_citizenId, citizenAddress, oldScore, _newScore, \\\"Emergency reset\\\");\\n    }\\n}\",\"keccak256\":\"0xc87bcb575a1e90e3ac3b3b48c43182947583e9abb388d712ee93ae8bb354f140\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a034620001e557601f620041c338819003918201601f191683019291906001600160401b03841183851017620001ea578160609284926040968752833981010312620001e557620000518162000200565b6200006c83620000646020850162000200565b930162000200565b6001600160a01b0391821691908215620001cd57816000549460018060a01b031994808688161760005582885197167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3600180556064600d556003600e556050600f55169384156200017a5750169182156200012457608052600254161760025551613fad90816200021682396080518181816108dd0152818161096301528181611cf0015281816127000152612ea10152f35b835162461bcd60e51b815260206004820152602960248201527f49737375655265706f7274696e673a20496e76616c69642072657075746174696044820152686f6e2073797374656d60b81b6064820152608490fd5b62461bcd60e51b815260206004820152602860248201527f49737375655265706f7274696e673a20496e76616c696420636974697a656e20604482015267726567697374727960c01b6064820152608490fd5b8451631e4fbdf760e01b815260006004820152602490fd5b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b0382168203620001e55756fe60a080604052600436101561001357600080fd5b600090813560e01c9081630dc86153146133ff57508063167feb09146133e157806316d367ba14612fd15780632faebcaf14612ed0578063386ca89d14612e8b5780633ea38b4d14612de95780634a69b281146126b15780634e7f9b19146122b75780635f76c222146122445780636587eda11461221b57806366255cda1461217d5780636a609b2614612135578063715018a6146120db57806375c98b7f146120a9578063828e64e7146120775780638da5cb5b14612050578063953186c314612008578063990e423c14611f74578063a14a989b14611f35578063a4f5683014611c83578063a59c87f214611b1c578063a8d170eb14611998578063ab54095d14611966578063b07c4c0c14611872578063bcd568bf1461168c578063c942adf7146114e9578063d26590e81461079d578063d4e995001461077f578063e6bc558f146106cd578063ec130a011461064f578063ec7e67b3146104cb578063f2fde38b14610440578063f508303114610391578063f65fb58d146101c25763fd896a5d146101a257600080fd5b346101bf57806003193601126101bf576020600f54604051908152f35b80fd5b50346101bf5760403660031901126101bf576004356024356001600160a01b0381169081900361038c57338352600960205261020460ff604085205416613dab565b81151580610380575b61021690613d55565b808352600960205260ff6040842054161561032b5781835260046020526040832060ff600582015460101c166007811015610317576002811490811561030c575b50156102a157600b810180546001600160a01b031916831790554260089091015533917fd49c36cc7da63ae5b954a4580097678b5331b42f1df7e13ce39a6a73e0e5f43d8480a480f35b60405162461bcd60e51b815260206004820152603760248201527f49737375655265706f7274696e673a205265706f7274206d757374206265207660448201527f65726966696564206f7220756e646572207265766965770000000000000000006064820152608490fd5b600191501438610257565b634e487b7160e01b85526021600452602485fd5b60405162461bcd60e51b815260206004820152602760248201527f49737375655265706f7274696e673a2041737369676e6565206e6f74206175746044820152661a1bdc9a5e995960ca1b6064820152608490fd5b5060035482111561020d565b600080fd5b50346101bf5760403660031901126101bf57602435600435600782101561043c576103ba613791565b80151580610430575b6103cc90613d55565b808352600460205261041960056040852001926103f18160ff865460101c1695613a7d565b828552600460205242600860408720015561040f60405180956136e8565b60208401906136e8565b600080516020613f5883398151915260403393a380f35b506003548111156103c3565b8280fd5b50346101bf5760203660031901126101bf5761045a6136f5565b610462613791565b6001600160a01b039081169081156104b257600054826001600160601b0360a01b821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b604051631e4fbdf760e01b815260048101849052602490fd5b50346101bf5760208060031936011261064b576004358015158061063f575b6104f690939293613d55565b8152600582526040812080549161050c8361377a565b9261051a60405194856134cc565b8084528484018093835285832083915b8383106105d45750505050604051928484019085855251809152604084019460408260051b8601019392955b8287106105635785850386f35b909192938280600192603f1989820301855287519061059d61058d835160a080855284019061369a565b848401518382038685015261369a565b91604081015160408301526060868060a01b0381830151169083015260808091015115159101529601920196019592919092610556565b60048860019260409a99979a516105ea8161347b565b6105f3866135d1565b81526106008587016135d1565b838201526002860154604082015260ff6003870154868060a01b038116606084015260a01c16151560808201528152019201920191909693959661052a565b506003548111156104ea565b5080fd5b50346101bf5760208060031936011261064b57600435600881101561043c578252600a815260408220916040518092808554928381520194835280832092905b8282106106b6576106b2856106a6818903826134cc565b6040519182918261370b565b0390f35b83548652948501946001938401939091019061068f565b50346101bf5760403660031901126101bf576106e76136f5565b6106ef6136bf565b906106f8613791565b6001600160a01b031690811561072b576107289183526009602052604083209060ff801983541691151516179055565b80f35b60405162461bcd60e51b815260206004820152602660248201527f49737375655265706f7274696e673a20496e76616c696420656e74697479206160448201526564647265737360d01b6064820152608490fd5b50346101bf57806003193601126101bf576020600354604051908152f35b50346101bf576101003660031901126101bf576004356001600160401b03811161064b576107cf903690600401613508565b6024356001600160401b03811161043c576107ee903690600401613508565b906008604435101561043c576004606435101561043c576084356001600160401b0381116114e557610824903690600401613508565b60a4356001600160401b0381116114e157610843903690600401613508565b906001600160401b0360c435116114e15736602360c4350112156114e15760c43560040135926108728461377a565b9361088060405195866134cc565b80855260208501903660248260051b60c4350101116114dd57602460c43501915b60248260051b60c435010183106114a65750505060e435151560e4350361038c576040516305c7664d60e31b81523360048201526020816024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa801561149b57879061145c575b61091e91506137ca565b60026001541461144a5760026001558051156113f75761094085511515613829565b600a8451116113b2576040516370cf630f60e11b815233600482015286816024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa87918161138e575b506109b75760405162461bcd60e51b8152806109b3600482016139e0565b0390fd5b51936109c4600354613a29565b958660035560e4356000146113875787925b604051936109e38561345f565b888552602085018890526001600160a01b0316604085015260608401526080830152610a1460443560a08401613a4e565b610a2360643560c08401613a5a565b8660e08301528261010083015242610120830152426101408301528661016083015286610180830152866101a0830152604051610a5f816134b1565b8781526101c0830152866101e083015260e4351515610200830152866102208301526102408201528486526004602052604086209080518255602081015160018301556002820160018060a01b036040830151166001600160601b0360a01b82541617905560608101518051906001600160401b038211611144578190610ae96003860154613597565b601f8111611354575b50602090601f83116001146112e5578a926112da575b50508160011b916000199060031b1c19161760038301555b60808101518051906001600160401b038211611144578190610b456004860154613597565b601f81116112a7575b50602090601f8311600114611238578a9261122d575b50508160011b916000199060031b1c19161760048301555b60a0810151600881101561120557600583015460c083015160048110156112195761ff0060ff9160081b1692169061ffff19161717600583015560e0810151600781101561120557610bd19060058401613a7d565b6101008101518051906001600160401b038211611144578190610bf76006860154613597565b601f81116111d2575b50602090601f8311600114611163578a92611158575b50508160011b916000199060031b1c19161760068301555b610120810151600783015561014081015160088301556101608101516009830155610180810151600a830155600b820160018060a01b036101a0830151166001600160601b0360a01b8254161790556101c08101518051906001600160401b03821161114457610ca1600c850154613597565b601f8111611111575b50602090601f83116001146110a0576102409392918a9183611095575b50508160011b916000199060031b1c191617600c8401555b6101e0810151600d840155610d0a6102008201511515600e85019060ff801983541691151516179055565b610220810151600f840155015190815191600160401b8311611081576010820154836010840155808410611009575b50602060109101910187526020872087915b838310610edb57505050506044358552600a602052610d6d8460408720613a9e565b60e43515610ec1575b805180610e79575b50508051610ded575b5060e43515610de65782915b7f4ee7a73978d157e8150458ce2475e461e9b6eae750c9b19519b3571312304a1d6040805194610dc5866044356136ce565b610dd4602087016064356136db565b6001600160a01b031694a46001805580f35b3391610d93565b8284526005602052610e376040852060405190610e098261347b565b838252604051610e18816134b1565b8781526020830152426040830152336060830152866080830152613ad3565b827fb6cbb9f073834f986e9320b944e45c97cf52cca1982fae05334e1a66fde79c4e6040516020815280610e703395602083019061369a565b0390a338610d87565b610ea36020809383610e9660405195869385850198899101613677565b81010380845201826134cc565b5190208452600c602052610eba8360408620613a9e565b3880610d7e565b338552600b602052610ed68460408720613a9e565b610d76565b80518051906001600160401b038211610ff557610ef88454613597565b601f8111610fba575b506020908b601f8411600114610f4d57928060209360019693879692610f42575b5050600019600383901b1c191690841b1785555b01920192019190610d4b565b015190503880610f22565b85905260208c2091908c5b601f1985168110610fa2575083602093600196938796938794601f19811610610f89575b505050811b018555610f36565b015160001960f88460031b161c19169055388080610f7c565b91926020600181928685015181550194019201610f58565b610fe590858d5260208d20601f850160051c81019160208610610feb575b601f0160051c0190613a66565b38610f01565b9091508190610fd8565b634e487b7160e01b8b52604160045260248bfd5b60108301895260208920908482015b8183018110611028575050610d39565b808b61103660019354613597565b80611044575b505001611018565b601f8111841461105c575050600081555b8b3861103c565b828252611077601f60208420920160051c8201858301613a66565b6000835555611055565b634e487b7160e01b88526041600452602488fd5b015190503880610cc7565b90600c85018a5260208a20918a5b601f19851681106110f957509183916001936102409695601f198116106110e0575b505050811b01600c840155610cdf565b015160001960f88460031b161c191690553880806110d0565b919260206001819286850151815501940192016110ae565b61113e90600c86018b5260208b20601f850160051c81019160208610610feb57601f0160051c0190613a66565b38610caa565b634e487b7160e01b89526041600452602489fd5b015190503880610c16565b9250600685018a5260208a20908a935b601f19841685106111b7576001945083601f1981161061119e575b505050811b016006830155610c2e565b015160001960f88460031b161c1916905538808061118e565b81810151835560209485019460019093019290910190611173565b6111ff90600687018c5260208c20601f850160051c81019160208610610feb57601f0160051c0190613a66565b38610c00565b634e487b7160e01b88526021600452602488fd5b634e487b7160e01b8a52602160045260248afd5b015190503880610b64565b9250600485018a5260208a20908a935b601f198416851061128c576001945083601f19811610611273575b505050811b016004830155610b7c565b015160001960f88460031b161c19169055388080611263565b81810151835560209485019460019093019290910190611248565b6112d490600487018c5260208c20601f850160051c81019160208610610feb57601f0160051c0190613a66565b38610b4e565b015190503880610b08565b9250600385018a5260208a20908a935b601f1984168510611339576001945083601f19811610611320575b505050811b016003830155610b20565b015160001960f88460031b161c19169055388080611310565b818101518355602094850194600190930192909101906112f5565b61138190600387018c5260208c20601f850160051c81019160208610610feb57601f0160051c0190613a66565b38610af2565b33926109d6565b6113ab9192503d808a833e6113a381836134cc565b8101906138d1565b9038610995565b60405162461bcd60e51b815260206004820152601d60248201527f49737375655265706f7274696e673a20546f6f206d616e7920746167730000006044820152606490fd5b60405162461bcd60e51b815260206004820152602560248201527f49737375655265706f7274696e673a205469746c652063616e6e6f7420626520604482015264656d70747960d81b6064820152608490fd5b604051633ee5aeb560e01b8152600490fd5b506020813d602011611493575b81611476602093836134cc565b8101031261148f5761148a61091e916137bd565b610914565b8680fd5b3d9150611469565b6040513d89823e3d90fd5b6001600160401b038335116114d9576020806024926114cc3685883560c4350101613508565b81520193019290506108a1565b8880fd5b8780fd5b8480fd5b8380fd5b50346101bf5760203660031901126101bf57600480358252602052604090208054600182015460028301549092906001600160a01b039081169061152f600384016135d1565b61153b600485016135d1565b6005850154929061154e600687016135d1565b93600787015494600888015491600989015493600a8a015495600b8b01541696600c8b0161157b906135d1565b99600d8c01549d600e8d015460ff169c600f01549d604051806080525260805160200152608051604001526102408060805160600152608051016115be9161369a565b60805180820390608001526115d29161369a565b9060805160a00160ff8216906115e7916136ce565b60805160c0018160081c60ff16906115fe916136db565b60805160e0019060101c60ff1690611615916136e8565b60805180820390610100015261162a9161369a565b9460805161012001526080516101400152608051610160015260805161018001526080516101a00152608051808203906101c001526116689161369a565b926080516101e0015215156080516102000152608051610220015260805180910390f35b50346101bf5761169b3661354f565b3383526020600981526116b460ff604086205416613dab565b82151580611866575b6116c690613d55565b8115158061185a575b6116d890613d55565b8183146117fb578184526004815260ff600560408620015460101c166007811015610317576005146117a357600660ff91848652600481526117626040872060058101908154916206000062ff000019841617905586600f82015560084291015585885260048352600a60408920016117518154613a29565b905560405194859160101c166136e8565b82015282600080516020613f5883398151915260403393a333917fa005e5fff27b506d49f9a658033bd1e877684476fe95823d3ed7330dcb063e918480a480f35b6084906040519062461bcd60e51b82526004820152602b60248201527f49737375655265706f7274696e673a204f726967696e616c207265706f72742060448201526a1a5cc81c995a9958dd195960aa1b6064820152fd5b6084906040519062461bcd60e51b82526004820152603260248201527f49737375655265706f7274696e673a2043616e6e6f74206d61726b20617320646044820152713ab83634b1b0ba329037b31034ba39b2b63360711b6064820152fd5b506003548211156116cf565b506003548311156116bd565b50346101bf576118813661354f565b9061188a613791565b801561190a57811561189f57600d55600e5580f35b60405162461bcd60e51b815260206004820152603760248201527f49737375655265706f7274696e673a20566572696669636174696f6e2074687260448201527f6573686f6c64206d75737420626520706f7369746976650000000000000000006064820152608490fd5b60405162461bcd60e51b815260206004820152602e60248201527f49737375655265706f7274696e673a204d696e696d756d2073636f7265206d7560448201526d737420626520706f73697469766560901b6064820152608490fd5b50346101bf5760ff604060209261197c3661354f565b9082526007855282822090825284522054166040519015158152f35b50346101bf5760208060031936011261064b5760043580151580611b10575b6119c390939293613d55565b815260068252604081208054916119d98361377a565b926119e760405194856134cc565b8084528484018093835285832083915b838310611aa15750505050604051928484019085855251809152604084019460408260051b8601019392955b828710611a305785850386f35b909192938280600192603f1989820301855287519081518152848060a01b03838301511683820152604082015115156040820152611a7d6060808401519060c0809185015283019061369a565b916080808201519083015260a0809101519101529601920196019592919092611a23565b60058860019260409a99979a51611ab781613444565b8554815284860154858060a01b0381168483015260ff60a091821c1615156040830152611ae6600288016135d1565b606083015260038701546080830152600487015490820152815201920192019190969395966119f7565b506003548111156119b7565b50346101bf57602090816003193601126101bf576004356007928382101593846114e55783600193600354945b85811115611c235750611b5b8661377a565b95611b6960405197886134cc565b808752611b78601f199161377a565b013685880137819660015b86811115611b9957604051806106b28a8261370b565b8084526004865260058260ff8260408820015460101c1690611c0f5786811015611c0f578414611bd3575b50611bce90613a29565b611b83565b8899919951821015611bfb57818a88611bce94611bf4941b8c010152613a29565b9890611bc4565b634e487b7160e01b85526032600452602485fd5b634e487b7160e01b86526021600452602486fd5b80835260048552604083206005015460101c60ff1688611c6f5784811015611c6f578214611c5a575b611c5590613a29565b611b49565b95611c67611c5591613a29565b969050611c4c565b634e487b7160e01b84526021600452602484fd5b50346101bf5760603660031901126101bf576001600160401b036004356024358281116114e557611cb8903690600401613508565b916044359081116114e557611cd1903690600401613508565b6040516305c7664d60e31b8152336004820152602093919084816024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa8015611f2a578690611ef0575b611d3191506137ca565b82151580611ee4575b611d4390613d55565b815115611e8957611d5681511515613829565b82855260048452604085209060ff600583015460101c166007811015611e755760048114159081611e69575b5015611e075791611e0191611de87fb6cbb9f073834f986e9320b944e45c97cf52cca1982fae05334e1a66fde79c4e94868952600588526040892060405191611dca8361347b565b85835289830152426040830152336060830152896080830152613ad3565b600842910155604051918291868352339683019061369a565b0390a380f35b60405162461bcd60e51b815260048101869052603460248201527f49737375655265706f7274696e673a2043616e6e6f74206164642065766964656044820152731b98d9481d1bc818db1bdcd959081c995c1bdc9d60621b6064820152608490fd5b60059150141538611d82565b634e487b7160e01b87526021600452602487fd5b60405162461bcd60e51b815260048101859052602d60248201527f49737375655265706f7274696e673a2045766964656e6365206861736820636160448201526c6e6e6f7420626520656d70747960981b6064820152608490fd5b50600354831115611d3a565b508481813d8311611f23575b611f0681836134cc565b81010312611f1f57611f1a611d31916137bd565b611d27565b8580fd5b503d611efc565b6040513d88823e3d90fd5b50346101bf5760203660031901126101bf5760209060ff906040906001600160a01b03611f606136f5565b168152600984522054166040519015158152f35b50346101bf57611f833661354f565b908252600660205260408220805482101561043c57611fa2925061375e565b508054600182015491611fb7600282016135d1565b611ff9600460038401549301549160ff604051968796875260018060a01b038116602088015260a01c161515604086015260c0606086015260c085019061369a565b91608084015260a08301520390f35b50346101bf5760403660031901126101bf57602435906004358152600c602052604081209081548310156101bf5760206120428484613746565b90546040519160031b1c8152f35b50346101bf57806003193601126101bf57546040516001600160a01b039091168152602090f35b50346101bf5760ff604060209261208d3661354f565b9082526008855282822090825284522054166040519015158152f35b50346101bf576120b83661354f565b91908152600a602052604081209081548310156101bf5760206120428484613746565b50346101bf57806003193601126101bf576120f4613791565b600080546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b50346101bf5760403660031901126101bf5761214f6136f5565b6001600160a01b03168152600b60205260408120805460243592908310156101bf5760206120428484613746565b50346101bf5760203660031901126101bf576121976136f5565b61219f613791565b6001600160a01b031680156121c4576001600160601b0360a01b600254161760025580f35b60405162461bcd60e51b815260206004820152602960248201527f49737375655265706f7274696e673a20496e76616c69642072657075746174696044820152686f6e2073797374656d60b81b6064820152608490fd5b50346101bf57806003193601126101bf576002546040516001600160a01b039091168152602090f35b50346101bf5760208060031936011261064b576001600160a01b036122676136f5565b168252600b815260408220916040518092808554928381520194835280832092905b8282106122a0576106b2856106a6818903826134cc565b835486529485019460019384019390910190612289565b50346101bf5760203660031901126101bf5760606102406040516122da8161345f565b83815283602082015283604082015282808201528260808201528360a08201528360c08201528360e08201528261010082015283610120820152836101408201528361016082015283610180820152836101a0820152826101c0820152836101e082015283610200820152836102208201520152600435801515806126a5575b61236390613d55565b81526004602052604081206040519061237b8261345f565b805482526001810154602083015260028101546001600160a01b031660408301526123a8600382016135d1565b60608301526123b9600482016135d1565b608083015260058101546123d360ff821660a08501613a4e565b6123e660ff8260081c1660c08501613a5a565b600760ff8260101c16101561268f5760101c60ff1660e0830152829061240e600682016135d1565b610100840152600781015461012084015260088101546101408401526009810154610160840152600a810154610180840152600b8101546001600160a01b03166101a0840152612460600c82016135d1565b6101c0840152600d8101546101e084015260ff600e820154161515610200840152600f810154610220840152601081015461249a8161377a565b916124a860405193846134cc565b81835260100183526020808420849184015b83831061266c575050505061024083015260405191829160208352815160208401526020820151604084015260018060a01b0360408301511660608401526102406125e061258461253561251f606087015161026060808a015261028089019061369a565b6080870151888203601f190160a08a015261369a565b61254760a087015160c08901906136ce565b61255960c087015160e08901906136db565b61256c60e08701516101008901906136e8565b610100860151878203601f190161012089015261369a565b6101208501516101408701526101408501516101608701526101608501516101808701526101808501516101a087015260018060a01b036101a0860151166101c08701526101c0850151601f19878303016101e088015261369a565b926101e0810151610200860152610200810151151561022086015261022081015182860152015191601f1984820301610260850152825190818152602081016020808460051b840101950193915b83831061263b5786860387f35b91939550919360208061265a600193601f19868203018752895161369a565b9701930193019092869594929361262e565b60016020819261267e859a999a6135d1565b8152019201920191909594956124ba565b634e487b7160e01b600052602160045260246000fd5b5060035481111561235a565b50346101bf5760603660031901126101bf576126cb6136bf565b6044356001600160401b03811161043c576126ea903690600401613508565b6040516305c7664d60e31b8152336004820152837f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316602083602481845afa928315612dde578293612d9e575b5061274b6024936137ca565b600435151580612d90575b61275f90613d55565b6040516370cf630f60e11b815233600482015292839182905afa849181612d74575b5061279f5760405162461bcd60e51b8152806109b3600482016139e0565b5190600435845260076020526040842082855260205260ff604085205416612d1a576004358452600460205281600160408620015414612cc357600435845260046020526040842060ff600582015460101c166007811015611c0f578015908115612cb8575b5015612c5a57600254604051635eade58560e11b81526004810185905260649391602090829060249082906001600160a01b03165afa879181612c26575b50612c1e575b506004358652600660205260408620906040519061286682613444565b85825233602083015260408201928715158452606083019182524260808401528560a0840152805490600160401b821015612c0a57906128ab9160018201815561375e565b939093612bf657825184556020830151600185018054925160ff60a01b90151560a01b166001600160a01b039092166001600160a81b031990931692909217179055518051906001600160401b0382116111445761290c6002850154613597565b601f8111612bc3575b50602090601f8311600114612b515791806004949260a0948c92612b46575b50508160011b916000199060031b1c19161760028501555b608081015160038501550151910155600435855260076020526040852083865260205260408520600160ff1982541617905561298782613e10565b8415612b1857600982018054918201809211612b04579086929155600a81016129b08154613a29565b90555b4260088201556009810154600d54111580612aea575b80612aca575b612a10575b50506040519215158352602083015233917fff62ed7b0cb21b7e0a88ea8ad0e749a54224768e17bb84ddc068a95646d693e4604060043592a480f35b6202000062ff00001960058301541617600582015560405160008152600260208201523090600080516020613f58833981519152604060043592a36040516020810190651c995c1bdc9d60d21b8252600435602682015260268152612a7481613496565b5190206001808060a01b036002541692015490823b156114e557604484928360405195869485936368efb2a360e01b8552600485015260248401525af1156129d457612abf9061341b565b6114e55783386129d4565b50905060ff600582015460101c166007811015611c0f57908591156129cf565b50600435825260066020526040822054600e5411156129c9565b634e487b7160e01b87526011600452602487fd5b60098201805487908311612b3b57508054918203918211612b04575584906129b3565b9291508290556129b3565b015190503880612934565b90600285018a5260208a20918a5b601f1985168110612bab5750926004949260019260a09583601f19811610612b92575b505050811b01600285015561294c565b015160001960f88460031b161c19169055388080612b82565b91926020600181928685015181550194019201612b5f565b612bf090600286018b5260208b20601f850160051c81019160208610610feb57601f0160051c0190613a66565b38612915565b634e487b7160e01b89526004899052602489fd5b634e487b7160e01b8a52604160045260248afd5b925038612849565b9091506020813d602011612c52575b81612c42602093836134cc565b810103126114dd57519038612843565b3d9150612c35565b60405162461bcd60e51b815260206004820152603060248201527f49737375655265706f7274696e673a205265706f7274206e6f74206f70656e2060448201526f3337b9103b32b934b334b1b0ba34b7b760811b6064820152608490fd5b600191501438612805565b60405162461bcd60e51b815260206004820152602960248201527f49737375655265706f7274696e673a2043616e6e6f7420766f7465206f6e206f6044820152681ddb881c995c1bdc9d60ba1b6064820152608490fd5b60405162461bcd60e51b815260206004820152602c60248201527f49737375655265706f7274696e673a20416c726561647920766f746564206f6e60448201526b081d1a1a5cc81c995c1bdc9d60a21b6064820152608490fd5b612d899192503d8087833e6113a381836134cc565b9038612781565b506003546004351115612756565b92506020833d602011612dd6575b81612db9602093836134cc565b8101031261064b5761274b612dcf6024946137bd565b935061273f565b3d9150612dac565b6040513d84823e3d90fd5b50346101bf57612df83661354f565b919081526005602052604081209081548310156101bf57612e57612e1c8484613565565b50612e26816135d1565b9060ff612e35600183016135d1565b612e65600360028501549401549160405196879660a0885260a088019061369a565b90868203602088015261369a565b60408501939093526001600160a01b038116606085015260a01c16151560808301520390f35b50346101bf57806003193601126101bf576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50346101bf57806003193601126101bf578081829060019283946003908154955b86881115612f175750505060809450604051938452602084015260408301526060820152f35b909192878352600460205260ff600560408520015460101c166007811015611c6f5760028103612f5d5750612f4e612f5491613a29565b97613a29565b96929190612ef1565b9097949060048103612f7c5750612f76612f5491613a29565b94613a29565b90949080159060008215612fc7575b8215612fb7575b5050612fa2575b612f5490613a29565b94612faf612f5491613a29565b959050612f99565b909150611c6f5784143880612f92565b8482149250612f8b565b50346101bf5760603660031901126101bf57600760243510156101bf576001600160401b0360443581811161043c5761300e903690600401613508565b90338352600960205261302760ff604085205416613dab565b6004351515806133d3575b61303b90613d55565b6004358352600460205260408320600581019160ff835460101c16926007841015611c0f57602435841461338f5761307560243585613e3f565b15613338576130879060243590613a7d565b426008830155600460243514613224575b506003602435148061320f575b6131cb575b600560243514806131be575b61313b575b506130c960405180926136e8565b6130d8602082016024356136e8565b3390600080516020613f58833981519152604060043592a36004602435146130fe575080f35b60405190602082527f0b016fad77ff660ae7dfcd2cca6925781c2fc757458d3cc018a008c4d6aecf2d339280611e0160043594602083019061369a565b8360405160208101906b19985b1cd957dc995c1bdc9d60a21b8252600435602c820152602c815261316b81613496565b5190206001808060a01b0360025416930154833b1561043c57604490836040519586948593634161521160e01b8552600485015260248401525af1156130bb576131b79093919361341b565b91386130bb565b50600181015415156130b6565b600b8101336001600160601b0360a01b82541617905533336004357fd49c36cc7da63ae5b954a4580097678b5331b42f1df7e13ce39a6a73e0e5f43d8780a46130aa565b50600b8101546001600160a01b0316156130a5565b83519081116133245761323a600c830154613597565b601f81116132f1575b50806020601f821160011461328757869161327c575b508160011b916000199060031b1c191617600c8201555b42600d82015538613098565b905084015138613259565b9150600c830186526020862086925b601f19831684106132d9576001935082601f198116106132c0575b5050811b01600c820155613270565b86015160001960f88460031b161c1916905538806132b1565b86810151825560209384019360019092019101613296565b61331e90600c8401875260208720601f840160051c81019160208510610feb57601f0160051c0190613a66565b38613243565b634e487b7160e01b85526041600452602485fd5b60405162461bcd60e51b815260206004820152602960248201527f49737375655265706f7274696e673a20496e76616c69642073746174757320746044820152683930b739b4ba34b7b760b91b6064820152608490fd5b606460405162461bcd60e51b815260206004820152602060248201527f49737375655265706f7274696e673a2053746174757320756e6368616e6765646044820152fd5b506003546004351115613032565b50346101bf57806003193601126101bf576020600e54604051908152f35b90503461064b578160031936011261064b57602090600d548152f35b6001600160401b03811161342e57604052565b634e487b7160e01b600052604160045260246000fd5b60c081019081106001600160401b0382111761342e57604052565b61026081019081106001600160401b0382111761342e57604052565b60a081019081106001600160401b0382111761342e57604052565b606081019081106001600160401b0382111761342e57604052565b602081019081106001600160401b0382111761342e57604052565b90601f801991011681019081106001600160401b0382111761342e57604052565b6001600160401b03811161342e57601f01601f191660200190565b81601f8201121561038c5780359061351f826134ed565b9261352d60405194856134cc565b8284526020838301011161038c57816000926020809301838601378301015290565b604090600319011261038c576004359060243590565b80548210156135815760005260206000209060021b0190600090565b634e487b7160e01b600052603260045260246000fd5b90600182811c921680156135c7575b60208310146135b157565b634e487b7160e01b600052602260045260246000fd5b91607f16916135a6565b90604051918260008254926135e584613597565b9081845260019485811690816000146136545750600114613611575b505061360f925003836134cc565b565b9093915060005260209081600020936000915b81831061363c57505061360f93508201013880613601565b85548884018501529485019487945091830191613624565b91505061360f94506020925060ff191682840152151560051b8201013880613601565b60005b83811061368a5750506000910152565b818101518382015260200161367a565b906020916136b381518092818552858086019101613677565b601f01601f1916010190565b60243590811515820361038c57565b90600882101561268f5752565b90600482101561268f5752565b90600782101561268f5752565b600435906001600160a01b038216820361038c57565b6020908160408183019282815285518094520193019160005b828110613732575050505090565b835185529381019392810192600101613724565b80548210156135815760005260206000200190600090565b8054821015613581576000526005602060002091020190600090565b6001600160401b03811161342e5760051b60200190565b6000546001600160a01b031633036137a557565b60405163118cdaa760e01b8152336004820152602490fd5b5190811515820361038c57565b156137d157565b60405162461bcd60e51b815260206004820152602a60248201527f49737375655265706f7274696e673a204d75737420626520726567697374657260448201526932b21031b4ba34bd32b760b11b6064820152608490fd5b1561383057565b60405162461bcd60e51b815260206004820152602e60248201527f49737375655265706f7274696e673a2049504653206465736372697074696f6e60448201526d081a185cda081c995c5d5a5c995960921b6064820152608490fd5b81601f8201121561038c5780516138a2816134ed565b926138b060405194856134cc565b8184526020828401011161038c576138ce9160208085019101613677565b90565b60208183031261038c5780516001600160401b039182821161038c570161018092838282031261038c576040519384018481108482111761342e576040528151845260208201516001600160a01b038116810361038c576020850152604082015183811161038c578161394591840161388c565b6040850152606082015183811161038c578161396291840161388c565b60608501526080820151608085015260a082015160a085015260c0820151600481101561038c5760c085015260e082015160e085015261010080830151908501526101206139b18184016137bd565b908501526101408083015190850152610160928383015190811161038c576139d9920161388c565b9082015290565b60809060208152602860208201527f49737375655265706f7274696e673a204661696c656420746f206765742063696040820152671d1a5e995b88125160c21b60608201520190565b6000198114613a385760010190565b634e487b7160e01b600052601160045260246000fd5b600882101561268f5752565b600482101561268f5752565b818110613a71575050565b60008155600101613a66565b90600781101561268f5762ff000082549160101b169062ff00001916179055565b8054600160401b81101561342e57613abb91600182018155613746565b819291549060031b91821b91600019901b1916179055565b8054600160401b81101561342e57613af2906001928382018155613565565b919091613d3f578251908151906001600160401b039182811161342e5780613b1a8654613597565b94601f95868111613d0f575b50602090868311600114613cac57600092613ca1575b5050600019600383901b1c191690821b1784555b808401926020860151805193841161342e57613b6c8554613597565b828111613c67575b506020918411600114613bf75792808061360f98979460809794600397600094613bec575b50501b9160001990861b1c19161790555b6040840151600282015560608401519101805492909301516001600160a81b03199092166001600160a01b03919091161790151560a01b60ff60a01b16179055565b015192503880613b99565b90601f9392931983169185600052816000209260005b818110613c5157509260039592859261360f9a99966080999610613c39575b505050811b019055613baa565b015160001983881b60f8161c19169055388080613c2c565b8284015185559386019360209384019301613c0d565b613c92908660005260206000208480880160051c82019260208910613c98575b0160051c0190613a66565b38613b74565b92508192613c87565b015190503880613b3c565b90849350601f1983169188600052816000209260005b818110613cf757508411613cde575b505050811b018455613b50565b015160001960f88460031b161c19169055388080613cd1565b82840151855587969094019360209384019301613cc2565b613d39908860005260206000208880860160051c82019260208710613c98570160051c0190613a66565b38613b26565b634e487b7160e01b600052600060045260246000fd5b15613d5c57565b60405162461bcd60e51b815260206004820152602160248201527f49737375655265706f7274696e673a20496e76616c6964207265706f727420496044820152601160fa1b6064820152608490fd5b15613db257565b60405162461bcd60e51b815260206004820152603060248201527f49737375655265706f7274696e673a204e6f7420617574686f72697a6564206760448201526f6f7665726e6d656e7420656e7469747960801b6064820152608490fd5b6103e88110613e1f5750603290565b6101f48110613e2e5750601e90565b606411613e3a57601490565b600a90565b600781101561268f5780613ea357506007811015908161268f5760018114918215613e95575b8215613e84575b8215613e7757505090565b90915061268f5760061490565b80925061268f576005811491613e6c565b506002811491506000613e65565b60018103613f0157506007811015908161268f5760028114918215613ef3575b8215613ee2575b8215613ed557505090565b90915061268f5760031490565b80925061268f576006811491613eca565b506005811491506000613ec3565b60028103613f2a5750600781101561268f5760038114908115613f22575090565b600591501490565b600314613f375750600090565b600781101561268f5760048114908115613f4f575090565b60019150149056fe8b504293715d2c43c9dbf9a406b420e5aba114de01db5851dd41f24471d682d9a2646970667358221220af82c17f642a4824100fd60ab230f6a4b1d092f605a2369f9c249f78516daabe64736f6c63430008140033",
  "deployedBytecode": "0x60a080604052600436101561001357600080fd5b600090813560e01c9081630dc86153146133ff57508063167feb09146133e157806316d367ba14612fd15780632faebcaf14612ed0578063386ca89d14612e8b5780633ea38b4d14612de95780634a69b281146126b15780634e7f9b19146122b75780635f76c222146122445780636587eda11461221b57806366255cda1461217d5780636a609b2614612135578063715018a6146120db57806375c98b7f146120a9578063828e64e7146120775780638da5cb5b14612050578063953186c314612008578063990e423c14611f74578063a14a989b14611f35578063a4f5683014611c83578063a59c87f214611b1c578063a8d170eb14611998578063ab54095d14611966578063b07c4c0c14611872578063bcd568bf1461168c578063c942adf7146114e9578063d26590e81461079d578063d4e995001461077f578063e6bc558f146106cd578063ec130a011461064f578063ec7e67b3146104cb578063f2fde38b14610440578063f508303114610391578063f65fb58d146101c25763fd896a5d146101a257600080fd5b346101bf57806003193601126101bf576020600f54604051908152f35b80fd5b50346101bf5760403660031901126101bf576004356024356001600160a01b0381169081900361038c57338352600960205261020460ff604085205416613dab565b81151580610380575b61021690613d55565b808352600960205260ff6040842054161561032b5781835260046020526040832060ff600582015460101c166007811015610317576002811490811561030c575b50156102a157600b810180546001600160a01b031916831790554260089091015533917fd49c36cc7da63ae5b954a4580097678b5331b42f1df7e13ce39a6a73e0e5f43d8480a480f35b60405162461bcd60e51b815260206004820152603760248201527f49737375655265706f7274696e673a205265706f7274206d757374206265207660448201527f65726966696564206f7220756e646572207265766965770000000000000000006064820152608490fd5b600191501438610257565b634e487b7160e01b85526021600452602485fd5b60405162461bcd60e51b815260206004820152602760248201527f49737375655265706f7274696e673a2041737369676e6565206e6f74206175746044820152661a1bdc9a5e995960ca1b6064820152608490fd5b5060035482111561020d565b600080fd5b50346101bf5760403660031901126101bf57602435600435600782101561043c576103ba613791565b80151580610430575b6103cc90613d55565b808352600460205261041960056040852001926103f18160ff865460101c1695613a7d565b828552600460205242600860408720015561040f60405180956136e8565b60208401906136e8565b600080516020613f5883398151915260403393a380f35b506003548111156103c3565b8280fd5b50346101bf5760203660031901126101bf5761045a6136f5565b610462613791565b6001600160a01b039081169081156104b257600054826001600160601b0360a01b821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b604051631e4fbdf760e01b815260048101849052602490fd5b50346101bf5760208060031936011261064b576004358015158061063f575b6104f690939293613d55565b8152600582526040812080549161050c8361377a565b9261051a60405194856134cc565b8084528484018093835285832083915b8383106105d45750505050604051928484019085855251809152604084019460408260051b8601019392955b8287106105635785850386f35b909192938280600192603f1989820301855287519061059d61058d835160a080855284019061369a565b848401518382038685015261369a565b91604081015160408301526060868060a01b0381830151169083015260808091015115159101529601920196019592919092610556565b60048860019260409a99979a516105ea8161347b565b6105f3866135d1565b81526106008587016135d1565b838201526002860154604082015260ff6003870154868060a01b038116606084015260a01c16151560808201528152019201920191909693959661052a565b506003548111156104ea565b5080fd5b50346101bf5760208060031936011261064b57600435600881101561043c578252600a815260408220916040518092808554928381520194835280832092905b8282106106b6576106b2856106a6818903826134cc565b6040519182918261370b565b0390f35b83548652948501946001938401939091019061068f565b50346101bf5760403660031901126101bf576106e76136f5565b6106ef6136bf565b906106f8613791565b6001600160a01b031690811561072b576107289183526009602052604083209060ff801983541691151516179055565b80f35b60405162461bcd60e51b815260206004820152602660248201527f49737375655265706f7274696e673a20496e76616c696420656e74697479206160448201526564647265737360d01b6064820152608490fd5b50346101bf57806003193601126101bf576020600354604051908152f35b50346101bf576101003660031901126101bf576004356001600160401b03811161064b576107cf903690600401613508565b6024356001600160401b03811161043c576107ee903690600401613508565b906008604435101561043c576004606435101561043c576084356001600160401b0381116114e557610824903690600401613508565b60a4356001600160401b0381116114e157610843903690600401613508565b906001600160401b0360c435116114e15736602360c4350112156114e15760c43560040135926108728461377a565b9361088060405195866134cc565b80855260208501903660248260051b60c4350101116114dd57602460c43501915b60248260051b60c435010183106114a65750505060e435151560e4350361038c576040516305c7664d60e31b81523360048201526020816024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa801561149b57879061145c575b61091e91506137ca565b60026001541461144a5760026001558051156113f75761094085511515613829565b600a8451116113b2576040516370cf630f60e11b815233600482015286816024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa87918161138e575b506109b75760405162461bcd60e51b8152806109b3600482016139e0565b0390fd5b51936109c4600354613a29565b958660035560e4356000146113875787925b604051936109e38561345f565b888552602085018890526001600160a01b0316604085015260608401526080830152610a1460443560a08401613a4e565b610a2360643560c08401613a5a565b8660e08301528261010083015242610120830152426101408301528661016083015286610180830152866101a0830152604051610a5f816134b1565b8781526101c0830152866101e083015260e4351515610200830152866102208301526102408201528486526004602052604086209080518255602081015160018301556002820160018060a01b036040830151166001600160601b0360a01b82541617905560608101518051906001600160401b038211611144578190610ae96003860154613597565b601f8111611354575b50602090601f83116001146112e5578a926112da575b50508160011b916000199060031b1c19161760038301555b60808101518051906001600160401b038211611144578190610b456004860154613597565b601f81116112a7575b50602090601f8311600114611238578a9261122d575b50508160011b916000199060031b1c19161760048301555b60a0810151600881101561120557600583015460c083015160048110156112195761ff0060ff9160081b1692169061ffff19161717600583015560e0810151600781101561120557610bd19060058401613a7d565b6101008101518051906001600160401b038211611144578190610bf76006860154613597565b601f81116111d2575b50602090601f8311600114611163578a92611158575b50508160011b916000199060031b1c19161760068301555b610120810151600783015561014081015160088301556101608101516009830155610180810151600a830155600b820160018060a01b036101a0830151166001600160601b0360a01b8254161790556101c08101518051906001600160401b03821161114457610ca1600c850154613597565b601f8111611111575b50602090601f83116001146110a0576102409392918a9183611095575b50508160011b916000199060031b1c191617600c8401555b6101e0810151600d840155610d0a6102008201511515600e85019060ff801983541691151516179055565b610220810151600f840155015190815191600160401b8311611081576010820154836010840155808410611009575b50602060109101910187526020872087915b838310610edb57505050506044358552600a602052610d6d8460408720613a9e565b60e43515610ec1575b805180610e79575b50508051610ded575b5060e43515610de65782915b7f4ee7a73978d157e8150458ce2475e461e9b6eae750c9b19519b3571312304a1d6040805194610dc5866044356136ce565b610dd4602087016064356136db565b6001600160a01b031694a46001805580f35b3391610d93565b8284526005602052610e376040852060405190610e098261347b565b838252604051610e18816134b1565b8781526020830152426040830152336060830152866080830152613ad3565b827fb6cbb9f073834f986e9320b944e45c97cf52cca1982fae05334e1a66fde79c4e6040516020815280610e703395602083019061369a565b0390a338610d87565b610ea36020809383610e9660405195869385850198899101613677565b81010380845201826134cc565b5190208452600c602052610eba8360408620613a9e565b3880610d7e565b338552600b602052610ed68460408720613a9e565b610d76565b80518051906001600160401b038211610ff557610ef88454613597565b601f8111610fba575b506020908b601f8411600114610f4d57928060209360019693879692610f42575b5050600019600383901b1c191690841b1785555b01920192019190610d4b565b015190503880610f22565b85905260208c2091908c5b601f1985168110610fa2575083602093600196938796938794601f19811610610f89575b505050811b018555610f36565b015160001960f88460031b161c19169055388080610f7c565b91926020600181928685015181550194019201610f58565b610fe590858d5260208d20601f850160051c81019160208610610feb575b601f0160051c0190613a66565b38610f01565b9091508190610fd8565b634e487b7160e01b8b52604160045260248bfd5b60108301895260208920908482015b8183018110611028575050610d39565b808b61103660019354613597565b80611044575b505001611018565b601f8111841461105c575050600081555b8b3861103c565b828252611077601f60208420920160051c8201858301613a66565b6000835555611055565b634e487b7160e01b88526041600452602488fd5b015190503880610cc7565b90600c85018a5260208a20918a5b601f19851681106110f957509183916001936102409695601f198116106110e0575b505050811b01600c840155610cdf565b015160001960f88460031b161c191690553880806110d0565b919260206001819286850151815501940192016110ae565b61113e90600c86018b5260208b20601f850160051c81019160208610610feb57601f0160051c0190613a66565b38610caa565b634e487b7160e01b89526041600452602489fd5b015190503880610c16565b9250600685018a5260208a20908a935b601f19841685106111b7576001945083601f1981161061119e575b505050811b016006830155610c2e565b015160001960f88460031b161c1916905538808061118e565b81810151835560209485019460019093019290910190611173565b6111ff90600687018c5260208c20601f850160051c81019160208610610feb57601f0160051c0190613a66565b38610c00565b634e487b7160e01b88526021600452602488fd5b634e487b7160e01b8a52602160045260248afd5b015190503880610b64565b9250600485018a5260208a20908a935b601f198416851061128c576001945083601f19811610611273575b505050811b016004830155610b7c565b015160001960f88460031b161c19169055388080611263565b81810151835560209485019460019093019290910190611248565b6112d490600487018c5260208c20601f850160051c81019160208610610feb57601f0160051c0190613a66565b38610b4e565b015190503880610b08565b9250600385018a5260208a20908a935b601f1984168510611339576001945083601f19811610611320575b505050811b016003830155610b20565b015160001960f88460031b161c19169055388080611310565b818101518355602094850194600190930192909101906112f5565b61138190600387018c5260208c20601f850160051c81019160208610610feb57601f0160051c0190613a66565b38610af2565b33926109d6565b6113ab9192503d808a833e6113a381836134cc565b8101906138d1565b9038610995565b60405162461bcd60e51b815260206004820152601d60248201527f49737375655265706f7274696e673a20546f6f206d616e7920746167730000006044820152606490fd5b60405162461bcd60e51b815260206004820152602560248201527f49737375655265706f7274696e673a205469746c652063616e6e6f7420626520604482015264656d70747960d81b6064820152608490fd5b604051633ee5aeb560e01b8152600490fd5b506020813d602011611493575b81611476602093836134cc565b8101031261148f5761148a61091e916137bd565b610914565b8680fd5b3d9150611469565b6040513d89823e3d90fd5b6001600160401b038335116114d9576020806024926114cc3685883560c4350101613508565b81520193019290506108a1565b8880fd5b8780fd5b8480fd5b8380fd5b50346101bf5760203660031901126101bf57600480358252602052604090208054600182015460028301549092906001600160a01b039081169061152f600384016135d1565b61153b600485016135d1565b6005850154929061154e600687016135d1565b93600787015494600888015491600989015493600a8a015495600b8b01541696600c8b0161157b906135d1565b99600d8c01549d600e8d015460ff169c600f01549d604051806080525260805160200152608051604001526102408060805160600152608051016115be9161369a565b60805180820390608001526115d29161369a565b9060805160a00160ff8216906115e7916136ce565b60805160c0018160081c60ff16906115fe916136db565b60805160e0019060101c60ff1690611615916136e8565b60805180820390610100015261162a9161369a565b9460805161012001526080516101400152608051610160015260805161018001526080516101a00152608051808203906101c001526116689161369a565b926080516101e0015215156080516102000152608051610220015260805180910390f35b50346101bf5761169b3661354f565b3383526020600981526116b460ff604086205416613dab565b82151580611866575b6116c690613d55565b8115158061185a575b6116d890613d55565b8183146117fb578184526004815260ff600560408620015460101c166007811015610317576005146117a357600660ff91848652600481526117626040872060058101908154916206000062ff000019841617905586600f82015560084291015585885260048352600a60408920016117518154613a29565b905560405194859160101c166136e8565b82015282600080516020613f5883398151915260403393a333917fa005e5fff27b506d49f9a658033bd1e877684476fe95823d3ed7330dcb063e918480a480f35b6084906040519062461bcd60e51b82526004820152602b60248201527f49737375655265706f7274696e673a204f726967696e616c207265706f72742060448201526a1a5cc81c995a9958dd195960aa1b6064820152fd5b6084906040519062461bcd60e51b82526004820152603260248201527f49737375655265706f7274696e673a2043616e6e6f74206d61726b20617320646044820152713ab83634b1b0ba329037b31034ba39b2b63360711b6064820152fd5b506003548211156116cf565b506003548311156116bd565b50346101bf576118813661354f565b9061188a613791565b801561190a57811561189f57600d55600e5580f35b60405162461bcd60e51b815260206004820152603760248201527f49737375655265706f7274696e673a20566572696669636174696f6e2074687260448201527f6573686f6c64206d75737420626520706f7369746976650000000000000000006064820152608490fd5b60405162461bcd60e51b815260206004820152602e60248201527f49737375655265706f7274696e673a204d696e696d756d2073636f7265206d7560448201526d737420626520706f73697469766560901b6064820152608490fd5b50346101bf5760ff604060209261197c3661354f565b9082526007855282822090825284522054166040519015158152f35b50346101bf5760208060031936011261064b5760043580151580611b10575b6119c390939293613d55565b815260068252604081208054916119d98361377a565b926119e760405194856134cc565b8084528484018093835285832083915b838310611aa15750505050604051928484019085855251809152604084019460408260051b8601019392955b828710611a305785850386f35b909192938280600192603f1989820301855287519081518152848060a01b03838301511683820152604082015115156040820152611a7d6060808401519060c0809185015283019061369a565b916080808201519083015260a0809101519101529601920196019592919092611a23565b60058860019260409a99979a51611ab781613444565b8554815284860154858060a01b0381168483015260ff60a091821c1615156040830152611ae6600288016135d1565b606083015260038701546080830152600487015490820152815201920192019190969395966119f7565b506003548111156119b7565b50346101bf57602090816003193601126101bf576004356007928382101593846114e55783600193600354945b85811115611c235750611b5b8661377a565b95611b6960405197886134cc565b808752611b78601f199161377a565b013685880137819660015b86811115611b9957604051806106b28a8261370b565b8084526004865260058260ff8260408820015460101c1690611c0f5786811015611c0f578414611bd3575b50611bce90613a29565b611b83565b8899919951821015611bfb57818a88611bce94611bf4941b8c010152613a29565b9890611bc4565b634e487b7160e01b85526032600452602485fd5b634e487b7160e01b86526021600452602486fd5b80835260048552604083206005015460101c60ff1688611c6f5784811015611c6f578214611c5a575b611c5590613a29565b611b49565b95611c67611c5591613a29565b969050611c4c565b634e487b7160e01b84526021600452602484fd5b50346101bf5760603660031901126101bf576001600160401b036004356024358281116114e557611cb8903690600401613508565b916044359081116114e557611cd1903690600401613508565b6040516305c7664d60e31b8152336004820152602093919084816024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa8015611f2a578690611ef0575b611d3191506137ca565b82151580611ee4575b611d4390613d55565b815115611e8957611d5681511515613829565b82855260048452604085209060ff600583015460101c166007811015611e755760048114159081611e69575b5015611e075791611e0191611de87fb6cbb9f073834f986e9320b944e45c97cf52cca1982fae05334e1a66fde79c4e94868952600588526040892060405191611dca8361347b565b85835289830152426040830152336060830152896080830152613ad3565b600842910155604051918291868352339683019061369a565b0390a380f35b60405162461bcd60e51b815260048101869052603460248201527f49737375655265706f7274696e673a2043616e6e6f74206164642065766964656044820152731b98d9481d1bc818db1bdcd959081c995c1bdc9d60621b6064820152608490fd5b60059150141538611d82565b634e487b7160e01b87526021600452602487fd5b60405162461bcd60e51b815260048101859052602d60248201527f49737375655265706f7274696e673a2045766964656e6365206861736820636160448201526c6e6e6f7420626520656d70747960981b6064820152608490fd5b50600354831115611d3a565b508481813d8311611f23575b611f0681836134cc565b81010312611f1f57611f1a611d31916137bd565b611d27565b8580fd5b503d611efc565b6040513d88823e3d90fd5b50346101bf5760203660031901126101bf5760209060ff906040906001600160a01b03611f606136f5565b168152600984522054166040519015158152f35b50346101bf57611f833661354f565b908252600660205260408220805482101561043c57611fa2925061375e565b508054600182015491611fb7600282016135d1565b611ff9600460038401549301549160ff604051968796875260018060a01b038116602088015260a01c161515604086015260c0606086015260c085019061369a565b91608084015260a08301520390f35b50346101bf5760403660031901126101bf57602435906004358152600c602052604081209081548310156101bf5760206120428484613746565b90546040519160031b1c8152f35b50346101bf57806003193601126101bf57546040516001600160a01b039091168152602090f35b50346101bf5760ff604060209261208d3661354f565b9082526008855282822090825284522054166040519015158152f35b50346101bf576120b83661354f565b91908152600a602052604081209081548310156101bf5760206120428484613746565b50346101bf57806003193601126101bf576120f4613791565b600080546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b50346101bf5760403660031901126101bf5761214f6136f5565b6001600160a01b03168152600b60205260408120805460243592908310156101bf5760206120428484613746565b50346101bf5760203660031901126101bf576121976136f5565b61219f613791565b6001600160a01b031680156121c4576001600160601b0360a01b600254161760025580f35b60405162461bcd60e51b815260206004820152602960248201527f49737375655265706f7274696e673a20496e76616c69642072657075746174696044820152686f6e2073797374656d60b81b6064820152608490fd5b50346101bf57806003193601126101bf576002546040516001600160a01b039091168152602090f35b50346101bf5760208060031936011261064b576001600160a01b036122676136f5565b168252600b815260408220916040518092808554928381520194835280832092905b8282106122a0576106b2856106a6818903826134cc565b835486529485019460019384019390910190612289565b50346101bf5760203660031901126101bf5760606102406040516122da8161345f565b83815283602082015283604082015282808201528260808201528360a08201528360c08201528360e08201528261010082015283610120820152836101408201528361016082015283610180820152836101a0820152826101c0820152836101e082015283610200820152836102208201520152600435801515806126a5575b61236390613d55565b81526004602052604081206040519061237b8261345f565b805482526001810154602083015260028101546001600160a01b031660408301526123a8600382016135d1565b60608301526123b9600482016135d1565b608083015260058101546123d360ff821660a08501613a4e565b6123e660ff8260081c1660c08501613a5a565b600760ff8260101c16101561268f5760101c60ff1660e0830152829061240e600682016135d1565b610100840152600781015461012084015260088101546101408401526009810154610160840152600a810154610180840152600b8101546001600160a01b03166101a0840152612460600c82016135d1565b6101c0840152600d8101546101e084015260ff600e820154161515610200840152600f810154610220840152601081015461249a8161377a565b916124a860405193846134cc565b81835260100183526020808420849184015b83831061266c575050505061024083015260405191829160208352815160208401526020820151604084015260018060a01b0360408301511660608401526102406125e061258461253561251f606087015161026060808a015261028089019061369a565b6080870151888203601f190160a08a015261369a565b61254760a087015160c08901906136ce565b61255960c087015160e08901906136db565b61256c60e08701516101008901906136e8565b610100860151878203601f190161012089015261369a565b6101208501516101408701526101408501516101608701526101608501516101808701526101808501516101a087015260018060a01b036101a0860151166101c08701526101c0850151601f19878303016101e088015261369a565b926101e0810151610200860152610200810151151561022086015261022081015182860152015191601f1984820301610260850152825190818152602081016020808460051b840101950193915b83831061263b5786860387f35b91939550919360208061265a600193601f19868203018752895161369a565b9701930193019092869594929361262e565b60016020819261267e859a999a6135d1565b8152019201920191909594956124ba565b634e487b7160e01b600052602160045260246000fd5b5060035481111561235a565b50346101bf5760603660031901126101bf576126cb6136bf565b6044356001600160401b03811161043c576126ea903690600401613508565b6040516305c7664d60e31b8152336004820152837f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316602083602481845afa928315612dde578293612d9e575b5061274b6024936137ca565b600435151580612d90575b61275f90613d55565b6040516370cf630f60e11b815233600482015292839182905afa849181612d74575b5061279f5760405162461bcd60e51b8152806109b3600482016139e0565b5190600435845260076020526040842082855260205260ff604085205416612d1a576004358452600460205281600160408620015414612cc357600435845260046020526040842060ff600582015460101c166007811015611c0f578015908115612cb8575b5015612c5a57600254604051635eade58560e11b81526004810185905260649391602090829060249082906001600160a01b03165afa879181612c26575b50612c1e575b506004358652600660205260408620906040519061286682613444565b85825233602083015260408201928715158452606083019182524260808401528560a0840152805490600160401b821015612c0a57906128ab9160018201815561375e565b939093612bf657825184556020830151600185018054925160ff60a01b90151560a01b166001600160a01b039092166001600160a81b031990931692909217179055518051906001600160401b0382116111445761290c6002850154613597565b601f8111612bc3575b50602090601f8311600114612b515791806004949260a0948c92612b46575b50508160011b916000199060031b1c19161760028501555b608081015160038501550151910155600435855260076020526040852083865260205260408520600160ff1982541617905561298782613e10565b8415612b1857600982018054918201809211612b04579086929155600a81016129b08154613a29565b90555b4260088201556009810154600d54111580612aea575b80612aca575b612a10575b50506040519215158352602083015233917fff62ed7b0cb21b7e0a88ea8ad0e749a54224768e17bb84ddc068a95646d693e4604060043592a480f35b6202000062ff00001960058301541617600582015560405160008152600260208201523090600080516020613f58833981519152604060043592a36040516020810190651c995c1bdc9d60d21b8252600435602682015260268152612a7481613496565b5190206001808060a01b036002541692015490823b156114e557604484928360405195869485936368efb2a360e01b8552600485015260248401525af1156129d457612abf9061341b565b6114e55783386129d4565b50905060ff600582015460101c166007811015611c0f57908591156129cf565b50600435825260066020526040822054600e5411156129c9565b634e487b7160e01b87526011600452602487fd5b60098201805487908311612b3b57508054918203918211612b04575584906129b3565b9291508290556129b3565b015190503880612934565b90600285018a5260208a20918a5b601f1985168110612bab5750926004949260019260a09583601f19811610612b92575b505050811b01600285015561294c565b015160001960f88460031b161c19169055388080612b82565b91926020600181928685015181550194019201612b5f565b612bf090600286018b5260208b20601f850160051c81019160208610610feb57601f0160051c0190613a66565b38612915565b634e487b7160e01b89526004899052602489fd5b634e487b7160e01b8a52604160045260248afd5b925038612849565b9091506020813d602011612c52575b81612c42602093836134cc565b810103126114dd57519038612843565b3d9150612c35565b60405162461bcd60e51b815260206004820152603060248201527f49737375655265706f7274696e673a205265706f7274206e6f74206f70656e2060448201526f3337b9103b32b934b334b1b0ba34b7b760811b6064820152608490fd5b600191501438612805565b60405162461bcd60e51b815260206004820152602960248201527f49737375655265706f7274696e673a2043616e6e6f7420766f7465206f6e206f6044820152681ddb881c995c1bdc9d60ba1b6064820152608490fd5b60405162461bcd60e51b815260206004820152602c60248201527f49737375655265706f7274696e673a20416c726561647920766f746564206f6e60448201526b081d1a1a5cc81c995c1bdc9d60a21b6064820152608490fd5b612d899192503d8087833e6113a381836134cc565b9038612781565b506003546004351115612756565b92506020833d602011612dd6575b81612db9602093836134cc565b8101031261064b5761274b612dcf6024946137bd565b935061273f565b3d9150612dac565b6040513d84823e3d90fd5b50346101bf57612df83661354f565b919081526005602052604081209081548310156101bf57612e57612e1c8484613565565b50612e26816135d1565b9060ff612e35600183016135d1565b612e65600360028501549401549160405196879660a0885260a088019061369a565b90868203602088015261369a565b60408501939093526001600160a01b038116606085015260a01c16151560808301520390f35b50346101bf57806003193601126101bf576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50346101bf57806003193601126101bf578081829060019283946003908154955b86881115612f175750505060809450604051938452602084015260408301526060820152f35b909192878352600460205260ff600560408520015460101c166007811015611c6f5760028103612f5d5750612f4e612f5491613a29565b97613a29565b96929190612ef1565b9097949060048103612f7c5750612f76612f5491613a29565b94613a29565b90949080159060008215612fc7575b8215612fb7575b5050612fa2575b612f5490613a29565b94612faf612f5491613a29565b959050612f99565b909150611c6f5784143880612f92565b8482149250612f8b565b50346101bf5760603660031901126101bf57600760243510156101bf576001600160401b0360443581811161043c5761300e903690600401613508565b90338352600960205261302760ff604085205416613dab565b6004351515806133d3575b61303b90613d55565b6004358352600460205260408320600581019160ff835460101c16926007841015611c0f57602435841461338f5761307560243585613e3f565b15613338576130879060243590613a7d565b426008830155600460243514613224575b506003602435148061320f575b6131cb575b600560243514806131be575b61313b575b506130c960405180926136e8565b6130d8602082016024356136e8565b3390600080516020613f58833981519152604060043592a36004602435146130fe575080f35b60405190602082527f0b016fad77ff660ae7dfcd2cca6925781c2fc757458d3cc018a008c4d6aecf2d339280611e0160043594602083019061369a565b8360405160208101906b19985b1cd957dc995c1bdc9d60a21b8252600435602c820152602c815261316b81613496565b5190206001808060a01b0360025416930154833b1561043c57604490836040519586948593634161521160e01b8552600485015260248401525af1156130bb576131b79093919361341b565b91386130bb565b50600181015415156130b6565b600b8101336001600160601b0360a01b82541617905533336004357fd49c36cc7da63ae5b954a4580097678b5331b42f1df7e13ce39a6a73e0e5f43d8780a46130aa565b50600b8101546001600160a01b0316156130a5565b83519081116133245761323a600c830154613597565b601f81116132f1575b50806020601f821160011461328757869161327c575b508160011b916000199060031b1c191617600c8201555b42600d82015538613098565b905084015138613259565b9150600c830186526020862086925b601f19831684106132d9576001935082601f198116106132c0575b5050811b01600c820155613270565b86015160001960f88460031b161c1916905538806132b1565b86810151825560209384019360019092019101613296565b61331e90600c8401875260208720601f840160051c81019160208510610feb57601f0160051c0190613a66565b38613243565b634e487b7160e01b85526041600452602485fd5b60405162461bcd60e51b815260206004820152602960248201527f49737375655265706f7274696e673a20496e76616c69642073746174757320746044820152683930b739b4ba34b7b760b91b6064820152608490fd5b606460405162461bcd60e51b815260206004820152602060248201527f49737375655265706f7274696e673a2053746174757320756e6368616e6765646044820152fd5b506003546004351115613032565b50346101bf57806003193601126101bf576020600e54604051908152f35b90503461064b578160031936011261064b57602090600d548152f35b6001600160401b03811161342e57604052565b634e487b7160e01b600052604160045260246000fd5b60c081019081106001600160401b0382111761342e57604052565b61026081019081106001600160401b0382111761342e57604052565b60a081019081106001600160401b0382111761342e57604052565b606081019081106001600160401b0382111761342e57604052565b602081019081106001600160401b0382111761342e57604052565b90601f801991011681019081106001600160401b0382111761342e57604052565b6001600160401b03811161342e57601f01601f191660200190565b81601f8201121561038c5780359061351f826134ed565b9261352d60405194856134cc565b8284526020838301011161038c57816000926020809301838601378301015290565b604090600319011261038c576004359060243590565b80548210156135815760005260206000209060021b0190600090565b634e487b7160e01b600052603260045260246000fd5b90600182811c921680156135c7575b60208310146135b157565b634e487b7160e01b600052602260045260246000fd5b91607f16916135a6565b90604051918260008254926135e584613597565b9081845260019485811690816000146136545750600114613611575b505061360f925003836134cc565b565b9093915060005260209081600020936000915b81831061363c57505061360f93508201013880613601565b85548884018501529485019487945091830191613624565b91505061360f94506020925060ff191682840152151560051b8201013880613601565b60005b83811061368a5750506000910152565b818101518382015260200161367a565b906020916136b381518092818552858086019101613677565b601f01601f1916010190565b60243590811515820361038c57565b90600882101561268f5752565b90600482101561268f5752565b90600782101561268f5752565b600435906001600160a01b038216820361038c57565b6020908160408183019282815285518094520193019160005b828110613732575050505090565b835185529381019392810192600101613724565b80548210156135815760005260206000200190600090565b8054821015613581576000526005602060002091020190600090565b6001600160401b03811161342e5760051b60200190565b6000546001600160a01b031633036137a557565b60405163118cdaa760e01b8152336004820152602490fd5b5190811515820361038c57565b156137d157565b60405162461bcd60e51b815260206004820152602a60248201527f49737375655265706f7274696e673a204d75737420626520726567697374657260448201526932b21031b4ba34bd32b760b11b6064820152608490fd5b1561383057565b60405162461bcd60e51b815260206004820152602e60248201527f49737375655265706f7274696e673a2049504653206465736372697074696f6e60448201526d081a185cda081c995c5d5a5c995960921b6064820152608490fd5b81601f8201121561038c5780516138a2816134ed565b926138b060405194856134cc565b8184526020828401011161038c576138ce9160208085019101613677565b90565b60208183031261038c5780516001600160401b039182821161038c570161018092838282031261038c576040519384018481108482111761342e576040528151845260208201516001600160a01b038116810361038c576020850152604082015183811161038c578161394591840161388c565b6040850152606082015183811161038c578161396291840161388c565b60608501526080820151608085015260a082015160a085015260c0820151600481101561038c5760c085015260e082015160e085015261010080830151908501526101206139b18184016137bd565b908501526101408083015190850152610160928383015190811161038c576139d9920161388c565b9082015290565b60809060208152602860208201527f49737375655265706f7274696e673a204661696c656420746f206765742063696040820152671d1a5e995b88125160c21b60608201520190565b6000198114613a385760010190565b634e487b7160e01b600052601160045260246000fd5b600882101561268f5752565b600482101561268f5752565b818110613a71575050565b60008155600101613a66565b90600781101561268f5762ff000082549160101b169062ff00001916179055565b8054600160401b81101561342e57613abb91600182018155613746565b819291549060031b91821b91600019901b1916179055565b8054600160401b81101561342e57613af2906001928382018155613565565b919091613d3f578251908151906001600160401b039182811161342e5780613b1a8654613597565b94601f95868111613d0f575b50602090868311600114613cac57600092613ca1575b5050600019600383901b1c191690821b1784555b808401926020860151805193841161342e57613b6c8554613597565b828111613c67575b506020918411600114613bf75792808061360f98979460809794600397600094613bec575b50501b9160001990861b1c19161790555b6040840151600282015560608401519101805492909301516001600160a81b03199092166001600160a01b03919091161790151560a01b60ff60a01b16179055565b015192503880613b99565b90601f9392931983169185600052816000209260005b818110613c5157509260039592859261360f9a99966080999610613c39575b505050811b019055613baa565b015160001983881b60f8161c19169055388080613c2c565b8284015185559386019360209384019301613c0d565b613c92908660005260206000208480880160051c82019260208910613c98575b0160051c0190613a66565b38613b74565b92508192613c87565b015190503880613b3c565b90849350601f1983169188600052816000209260005b818110613cf757508411613cde575b505050811b018455613b50565b015160001960f88460031b161c19169055388080613cd1565b82840151855587969094019360209384019301613cc2565b613d39908860005260206000208880860160051c82019260208710613c98570160051c0190613a66565b38613b26565b634e487b7160e01b600052600060045260246000fd5b15613d5c57565b60405162461bcd60e51b815260206004820152602160248201527f49737375655265706f7274696e673a20496e76616c6964207265706f727420496044820152601160fa1b6064820152608490fd5b15613db257565b60405162461bcd60e51b815260206004820152603060248201527f49737375655265706f7274696e673a204e6f7420617574686f72697a6564206760448201526f6f7665726e6d656e7420656e7469747960801b6064820152608490fd5b6103e88110613e1f5750603290565b6101f48110613e2e5750601e90565b606411613e3a57601490565b600a90565b600781101561268f5780613ea357506007811015908161268f5760018114918215613e95575b8215613e84575b8215613e7757505090565b90915061268f5760061490565b80925061268f576005811491613e6c565b506002811491506000613e65565b60018103613f0157506007811015908161268f5760028114918215613ef3575b8215613ee2575b8215613ed557505090565b90915061268f5760031490565b80925061268f576006811491613eca565b506005811491506000613ec3565b60028103613f2a5750600781101561268f5760038114908115613f22575090565b600591501490565b600314613f375750600090565b600781101561268f5760048114908115613f4f575090565b60019150149056fe8b504293715d2c43c9dbf9a406b420e5aba114de01db5851dd41f24471d682d9a2646970667358221220af82c17f642a4824100fd60ab230f6a4b1d092f605a2369f9c249f78516daabe64736f6c63430008140033",
  "devdoc": {
    "author": "CitiProof Team",
    "details": "Manages citizen-submitted reports and verification process",
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "addEvidence(uint256,string,string)": {
        "details": "Add evidence to existing report"
      },
      "assignIssue(uint256,address)": {
        "details": "Assign issue to government entity"
      },
      "markAsDuplicate(uint256,uint256)": {
        "details": "Mark report as duplicate"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "submitIssueReport(string,string,uint8,uint8,string,string,string[],bool)": {
        "details": "Submit a new issue report"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateIssueStatus(uint256,uint8,string)": {
        "details": "Update issue status (government entities only)"
      },
      "verifyReport(uint256,bool,string)": {
        "details": "Vote to verify/support an issue report"
      }
    },
    "title": "IssueReportingSystem",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/IssueReportingSystem.sol:IssueReportingSystem",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 188,
        "contract": "contracts/IssueReportingSystem.sol:IssueReportingSystem",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 4158,
        "contract": "contracts/IssueReportingSystem.sol:IssueReportingSystem",
        "label": "reputationSystem",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ReputationSystem)7058"
      },
      {
        "astId": 4249,
        "contract": "contracts/IssueReportingSystem.sol:IssueReportingSystem",
        "label": "_reportIdCounter",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 4254,
        "contract": "contracts/IssueReportingSystem.sol:IssueReportingSystem",
        "label": "reports",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(IssueReport)4234_storage)"
      },
      {
        "astId": 4260,
        "contract": "contracts/IssueReportingSystem.sol:IssueReportingSystem",
        "label": "reportEvidence",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_array(t_struct(Evidence)4191_storage)dyn_storage)"
      },
      {
        "astId": 4266,
        "contract": "contracts/IssueReportingSystem.sol:IssueReportingSystem",
        "label": "reportVerifications",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_array(t_struct(VerificationVote)4247_storage)dyn_storage)"
      },
      {
        "astId": 4272,
        "contract": "contracts/IssueReportingSystem.sol:IssueReportingSystem",
        "label": "hasVotedOnReport",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 4278,
        "contract": "contracts/IssueReportingSystem.sol:IssueReportingSystem",
        "label": "hasSupportedReport",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 4282,
        "contract": "contracts/IssueReportingSystem.sol:IssueReportingSystem",
        "label": "authorizedGovernmentEntities",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4287,
        "contract": "contracts/IssueReportingSystem.sol:IssueReportingSystem",
        "label": "categoryReports",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 4292,
        "contract": "contracts/IssueReportingSystem.sol:IssueReportingSystem",
        "label": "citizenReports",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 4297,
        "contract": "contracts/IssueReportingSystem.sol:IssueReportingSystem",
        "label": "locationReports",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_bytes32,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 4300,
        "contract": "contracts/IssueReportingSystem.sol:IssueReportingSystem",
        "label": "minimumVerificationScore",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 4303,
        "contract": "contracts/IssueReportingSystem.sol:IssueReportingSystem",
        "label": "verificationThreshold",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 4306,
        "contract": "contracts/IssueReportingSystem.sol:IssueReportingSystem",
        "label": "duplicateThreshold",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Evidence)4191_storage)dyn_storage": {
        "base": "t_struct(Evidence)4191_storage",
        "encoding": "dynamic_array",
        "label": "struct IssueReportingSystem.Evidence[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(VerificationVote)4247_storage)dyn_storage": {
        "base": "t_struct(VerificationVote)4247_storage",
        "encoding": "dynamic_array",
        "label": "struct IssueReportingSystem.VerificationVote[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ReputationSystem)7058": {
        "encoding": "inplace",
        "label": "contract ReputationSystem",
        "numberOfBytes": "20"
      },
      "t_enum(IssueCategory)4180": {
        "encoding": "inplace",
        "label": "enum IssueReportingSystem.IssueCategory",
        "numberOfBytes": "1"
      },
      "t_enum(IssueSeverity)4163": {
        "encoding": "inplace",
        "label": "enum IssueReportingSystem.IssueSeverity",
        "numberOfBytes": "1"
      },
      "t_enum(IssueStatus)4171": {
        "encoding": "inplace",
        "label": "enum IssueReportingSystem.IssueStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_array(t_struct(Evidence)4191_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IssueReportingSystem.Evidence[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Evidence)4191_storage)dyn_storage"
      },
      "t_mapping(t_uint256,t_array(t_struct(VerificationVote)4247_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IssueReportingSystem.VerificationVote[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(VerificationVote)4247_storage)dyn_storage"
      },
      "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_uint256,t_struct(IssueReport)4234_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IssueReportingSystem.IssueReport)",
        "numberOfBytes": "32",
        "value": "t_struct(IssueReport)4234_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Evidence)4191_storage": {
        "encoding": "inplace",
        "label": "struct IssueReportingSystem.Evidence",
        "members": [
          {
            "astId": 4182,
            "contract": "contracts/IssueReportingSystem.sol:IssueReportingSystem",
            "label": "evidenceHash",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 4184,
            "contract": "contracts/IssueReportingSystem.sol:IssueReportingSystem",
            "label": "ipfsDescriptionHash",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 4186,
            "contract": "contracts/IssueReportingSystem.sol:IssueReportingSystem",
            "label": "timestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4188,
            "contract": "contracts/IssueReportingSystem.sol:IssueReportingSystem",
            "label": "submittedBy",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 4190,
            "contract": "contracts/IssueReportingSystem.sol:IssueReportingSystem",
            "label": "isVerified",
            "offset": 20,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(IssueReport)4234_storage": {
        "encoding": "inplace",
        "label": "struct IssueReportingSystem.IssueReport",
        "members": [
          {
            "astId": 4193,
            "contract": "contracts/IssueReportingSystem.sol:IssueReportingSystem",
            "label": "reportId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4195,
            "contract": "contracts/IssueReportingSystem.sol:IssueReportingSystem",
            "label": "citizenId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4197,
            "contract": "contracts/IssueReportingSystem.sol:IssueReportingSystem",
            "label": "reporter",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 4199,
            "contract": "contracts/IssueReportingSystem.sol:IssueReportingSystem",
            "label": "title",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 4201,
            "contract": "contracts/IssueReportingSystem.sol:IssueReportingSystem",
            "label": "ipfsDescriptionHash",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 4204,
            "contract": "contracts/IssueReportingSystem.sol:IssueReportingSystem",
            "label": "category",
            "offset": 0,
            "slot": "5",
            "type": "t_enum(IssueCategory)4180"
          },
          {
            "astId": 4207,
            "contract": "contracts/IssueReportingSystem.sol:IssueReportingSystem",
            "label": "severity",
            "offset": 1,
            "slot": "5",
            "type": "t_enum(IssueSeverity)4163"
          },
          {
            "astId": 4210,
            "contract": "contracts/IssueReportingSystem.sol:IssueReportingSystem",
            "label": "status",
            "offset": 2,
            "slot": "5",
            "type": "t_enum(IssueStatus)4171"
          },
          {
            "astId": 4212,
            "contract": "contracts/IssueReportingSystem.sol:IssueReportingSystem",
            "label": "ipfsLocationDataHash",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          },
          {
            "astId": 4214,
            "contract": "contracts/IssueReportingSystem.sol:IssueReportingSystem",
            "label": "submitTimestamp",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 4216,
            "contract": "contracts/IssueReportingSystem.sol:IssueReportingSystem",
            "label": "lastUpdateTimestamp",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 4218,
            "contract": "contracts/IssueReportingSystem.sol:IssueReportingSystem",
            "label": "verificationScore",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 4220,
            "contract": "contracts/IssueReportingSystem.sol:IssueReportingSystem",
            "label": "supportCount",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 4222,
            "contract": "contracts/IssueReportingSystem.sol:IssueReportingSystem",
            "label": "assignedTo",
            "offset": 0,
            "slot": "11",
            "type": "t_address"
          },
          {
            "astId": 4224,
            "contract": "contracts/IssueReportingSystem.sol:IssueReportingSystem",
            "label": "ipfsResolutionNotesHash",
            "offset": 0,
            "slot": "12",
            "type": "t_string_storage"
          },
          {
            "astId": 4226,
            "contract": "contracts/IssueReportingSystem.sol:IssueReportingSystem",
            "label": "resolutionTimestamp",
            "offset": 0,
            "slot": "13",
            "type": "t_uint256"
          },
          {
            "astId": 4228,
            "contract": "contracts/IssueReportingSystem.sol:IssueReportingSystem",
            "label": "isAnonymous",
            "offset": 0,
            "slot": "14",
            "type": "t_bool"
          },
          {
            "astId": 4230,
            "contract": "contracts/IssueReportingSystem.sol:IssueReportingSystem",
            "label": "duplicateOfReportId",
            "offset": 0,
            "slot": "15",
            "type": "t_uint256"
          },
          {
            "astId": 4233,
            "contract": "contracts/IssueReportingSystem.sol:IssueReportingSystem",
            "label": "tags",
            "offset": 0,
            "slot": "16",
            "type": "t_array(t_string_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "544"
      },
      "t_struct(VerificationVote)4247_storage": {
        "encoding": "inplace",
        "label": "struct IssueReportingSystem.VerificationVote",
        "members": [
          {
            "astId": 4236,
            "contract": "contracts/IssueReportingSystem.sol:IssueReportingSystem",
            "label": "citizenId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4238,
            "contract": "contracts/IssueReportingSystem.sol:IssueReportingSystem",
            "label": "voter",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 4240,
            "contract": "contracts/IssueReportingSystem.sol:IssueReportingSystem",
            "label": "isSupporting",
            "offset": 20,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 4242,
            "contract": "contracts/IssueReportingSystem.sol:IssueReportingSystem",
            "label": "ipfsCommentsHash",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 4244,
            "contract": "contracts/IssueReportingSystem.sol:IssueReportingSystem",
            "label": "timestamp",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4246,
            "contract": "contracts/IssueReportingSystem.sol:IssueReportingSystem",
            "label": "voterReputationAtTime",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}