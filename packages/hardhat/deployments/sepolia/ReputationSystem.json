{
  "address": "0x0Be2398A11E351903d7528533F2b5d544301510c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "initialOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_citizenRegistry",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "authorized",
          "type": "bool"
        }
      ],
      "name": "ContractAuthorized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "issueReportReward",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "verificationReward",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "votingReward",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "projectCompletionReward",
          "type": "uint256"
        }
      ],
      "name": "ReputationConfigUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "citizenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "citizen",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldScore",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newScore",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "ReputationUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_citizenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_reportId",
          "type": "bytes32"
        }
      ],
      "name": "addIssueReportReputation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_citizenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_projectId",
          "type": "bytes32"
        }
      ],
      "name": "addProjectCompletionReputation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_citizenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_verificationId",
          "type": "bytes32"
        }
      ],
      "name": "addVerificationReputation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_citizenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_voteId",
          "type": "bytes32"
        }
      ],
      "name": "addVotingReputation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_citizenIds",
          "type": "uint256[]"
        }
      ],
      "name": "applyDailyDecay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_contract",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_authorized",
          "type": "bool"
        }
      ],
      "name": "authorizeContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "authorizedContracts",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "citizenRegistry",
      "outputs": [
        {
          "internalType": "contract CitizenIdentityRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "config",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "issueReportReward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "verificationReward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "votingReward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "projectCompletionReward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "falseReportPenalty",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxDailyEarnings",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "decayRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minimumDecayThreshold",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_citizenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_newScore",
          "type": "uint256"
        }
      ],
      "name": "emergencyResetReputation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_citizenId",
          "type": "uint256"
        }
      ],
      "name": "getDailyEarningsInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "dailyEarnings",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "remainingEarnings",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastReset",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_citizenId",
          "type": "uint256"
        }
      ],
      "name": "getReputationScore",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_citizenId",
          "type": "uint256"
        }
      ],
      "name": "getReputationStats",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalScore",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalReports",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "verifiedReports",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalVerifications",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "successfulVerifications",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "votingParticipation",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastUpdateTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_limit",
          "type": "uint256"
        }
      ],
      "name": "getTopReputationCitizens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "citizenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "scores",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_citizenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_reportId",
          "type": "bytes32"
        }
      ],
      "name": "penalizeFalseReport",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_issueReportReward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_verificationReward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_votingReward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_projectCompletionReward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_falseReportPenalty",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxDailyEarnings",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_decayRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minimumDecayThreshold",
          "type": "uint256"
        }
      ],
      "name": "updateConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe7602c00b5f716dfa64293d75f7f5eca24d84ec0fc92f9e23db9bb55d6c7b926",
  "receipt": {
    "to": null,
    "from": "0x847118E06a68716b385a86a50250C598D33Ca68C",
    "contractAddress": "0x0Be2398A11E351903d7528533F2b5d544301510c",
    "transactionIndex": 115,
    "gasUsed": "1941412",
    "logsBloom": "0x
    "blockHash": "0x326f97ee926a58d23d2b171659b9e77406f05096d8d8e920d911fb57201d8f8d",
    "transactionHash": "0xe7602c00b5f716dfa64293d75f7f5eca24d84ec0fc92f9e23db9bb55d6c7b926",
    "logs": [
      {
        "transactionIndex": 115,
        "blockNumber": 9142954,
        "transactionHash": "0xe7602c00b5f716dfa64293d75f7f5eca24d84ec0fc92f9e23db9bb55d6c7b926",
        "address": "0x0Be2398A11E351903d7528533F2b5d544301510c",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000847118e06a68716b385a86a50250c598d33ca68c"
        ],
        "data": "0x",
        "logIndex": 9141,
        "blockHash": "0x326f97ee926a58d23d2b171659b9e77406f05096d8d8e920d911fb57201d8f8d"
      }
    ],
    "blockNumber": 9142954,
    "cumulativeGasUsed": "52452094",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x847118E06a68716b385a86a50250C598D33Ca68C",
    "0x9F4Bc4cb48e60871768b4cFB9CF9C53381063652"
  ],
  "numDeployments": 1,
  "solcInputHash": "604c9b416adca51f3a9c4c2681d47f73",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_citizenRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"authorized\",\"type\":\"bool\"}],\"name\":\"ContractAuthorized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"issueReportReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"verificationReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votingReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"projectCompletionReward\",\"type\":\"uint256\"}],\"name\":\"ReputationConfigUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"citizenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"citizen\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldScore\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newScore\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"ReputationUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_citizenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_reportId\",\"type\":\"bytes32\"}],\"name\":\"addIssueReportReputation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_citizenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_projectId\",\"type\":\"bytes32\"}],\"name\":\"addProjectCompletionReputation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_citizenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_verificationId\",\"type\":\"bytes32\"}],\"name\":\"addVerificationReputation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_citizenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_voteId\",\"type\":\"bytes32\"}],\"name\":\"addVotingReputation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_citizenIds\",\"type\":\"uint256[]\"}],\"name\":\"applyDailyDecay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_authorized\",\"type\":\"bool\"}],\"name\":\"authorizeContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedContracts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"citizenRegistry\",\"outputs\":[{\"internalType\":\"contract CitizenIdentityRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"issueReportReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"projectCompletionReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"falseReportPenalty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDailyEarnings\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decayRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumDecayThreshold\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_citizenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newScore\",\"type\":\"uint256\"}],\"name\":\"emergencyResetReputation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_citizenId\",\"type\":\"uint256\"}],\"name\":\"getDailyEarningsInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dailyEarnings\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingEarnings\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastReset\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_citizenId\",\"type\":\"uint256\"}],\"name\":\"getReputationScore\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_citizenId\",\"type\":\"uint256\"}],\"name\":\"getReputationStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalScore\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReports\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verifiedReports\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalVerifications\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"successfulVerifications\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingParticipation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"getTopReputationCitizens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"citizenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"scores\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_citizenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_reportId\",\"type\":\"bytes32\"}],\"name\":\"penalizeFalseReport\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_issueReportReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_verificationReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_votingReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_projectCompletionReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_falseReportPenalty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxDailyEarnings\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_decayRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumDecayThreshold\",\"type\":\"uint256\"}],\"name\":\"updateConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"CitiProof Team\",\"details\":\"Manages citizen reputation scores based on verified activities\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{\"addIssueReportReputation(uint256,bytes32)\":{\"details\":\"Add reputation points for verified issue report\"},\"addProjectCompletionReputation(uint256,bytes32)\":{\"details\":\"Add reputation points for project completion\"},\"addVerificationReputation(uint256,bytes32)\":{\"details\":\"Add reputation points for successful verification\"},\"addVotingReputation(uint256,bytes32)\":{\"details\":\"Add reputation points for voting participation\"},\"applyDailyDecay(uint256[])\":{\"details\":\"Apply daily reputation decay to prevent inflation\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"penalizeFalseReport(uint256,bytes32)\":{\"details\":\"Penalize reputation for false reports\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"ReputationSystem\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ReputationSystem.sol\":\"ReputationSystem\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/CitizenIdentityRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n/**\\n * @title CitizenIdentityRegistry\\n * @dev Manages verified citizen identities and their verification levels\\n * @author CitiProof Team\\n */\\ncontract CitizenIdentityRegistry is Ownable, ReentrancyGuard {\\n    // Counter for citizen IDs (using simple uint256 instead of Counters)\\n    uint256 private _citizenIdCounter;\\n\\n    // Verification levels\\n    enum VerificationLevel {\\n        UNVERIFIED,    // Default state\\n        BASIC,         // Basic wallet connection + EFP\\n        VERIFIED,      // Enhanced verification (50+ EFP followers)\\n        PREMIUM        // Government-verified or high reputation\\n    }\\n\\n    // Citizen profile structure\\n    struct CitizenProfile {\\n        uint256 citizenId;\\n        address walletAddress;\\n        string ensName;              // ENS name if available\\n        string efpTokenId;           // EFP list token ID\\n        uint256 efpFollowers;        // EFP follower count\\n        uint256 efpFollowing;        // EFP following count\\n        VerificationLevel verificationLevel;\\n        uint256 registrationTimestamp;\\n        uint256 lastUpdateTimestamp;\\n        bool isActive;\\n        uint256 reputationScore;     // Link to reputation contract\\n        string ipfsMetadata;         // Additional profile data on IPFS\\n    }\\n\\n    // Storage mappings\\n    mapping(address => uint256) public walletToCitizenId;\\n    mapping(uint256 => CitizenProfile) public citizens;\\n    mapping(string => uint256) public ensNameToCitizenId;\\n    mapping(string => bool) public registeredEnsNames;\\n\\n    // Events\\n    event CitizenRegistered(\\n        uint256 indexed citizenId,\\n        address indexed walletAddress,\\n        string ensName,\\n        VerificationLevel verificationLevel\\n    );\\n\\n    event CitizenVerificationUpdated(\\n        uint256 indexed citizenId,\\n        address indexed walletAddress,\\n        VerificationLevel oldLevel,\\n        VerificationLevel newLevel\\n    );\\n\\n    event CitizenProfileUpdated(\\n        uint256 indexed citizenId,\\n        address indexed walletAddress,\\n        string ensName,\\n        string efpTokenId\\n    );\\n\\n    event CitizenDeactivated(\\n        uint256 indexed citizenId,\\n        address indexed walletAddress,\\n        address indexed deactivatedBy\\n    );\\n\\n    // Modifiers\\n    modifier onlyRegisteredCitizen() {\\n        require(walletToCitizenId[msg.sender] != 0, \\\"CitizenRegistry: Caller is not a registered citizen\\\");\\n        require(citizens[walletToCitizenId[msg.sender]].isActive, \\\"CitizenRegistry: Citizen account is not active\\\");\\n        _;\\n    }\\n\\n    modifier validCitizenId(uint256 _citizenId) {\\n        require(_citizenId > 0 && _citizenId <= _citizenIdCounter, \\\"CitizenRegistry: Invalid citizen ID\\\");\\n        _;\\n    }\\n\\n    modifier onlyActiveCitizen(uint256 _citizenId) {\\n        require(citizens[_citizenId].isActive, \\\"CitizenRegistry: Citizen is not active\\\");\\n        _;\\n    }\\n\\n    constructor(address initialOwner) Ownable(initialOwner) {}\\n\\n    /**\\n     * @dev Register a new citizen with flexible requirements\\n     * @param _ensName ENS name (can be empty string for wallet-only registration)\\n     * @param _efpTokenId EFP list token ID (can be empty string)\\n     * @param _efpFollowers Number of EFP followers (0 allowed for new users)\\n     * @param _efpFollowing Number of EFP following (0 allowed for new users)\\n     * @param _ipfsMetadata IPFS hash for additional profile data\\n     */\\n    function registerCitizen(\\n        string memory _ensName,\\n        string memory _efpTokenId,\\n        uint256 _efpFollowers,\\n        uint256 _efpFollowing,\\n        string memory _ipfsMetadata\\n    ) external nonReentrant {\\n        require(walletToCitizenId[msg.sender] == 0, \\\"CitizenRegistry: Wallet already registered\\\");\\n        \\n        // Check if ENS name is already taken (if provided)\\n        if (bytes(_ensName).length > 0) {\\n            require(!registeredEnsNames[_ensName], \\\"CitizenRegistry: ENS name already registered\\\");\\n        }\\n\\n        // Increment citizen ID counter\\n        _citizenIdCounter++;\\n        uint256 newCitizenId = _citizenIdCounter;\\n\\n        // Determine verification level based on EFP data\\n        VerificationLevel verificationLevel = _determineVerificationLevel(_efpFollowers, _efpFollowing);\\n\\n        // Create citizen profile\\n        citizens[newCitizenId] = CitizenProfile({\\n            citizenId: newCitizenId,\\n            walletAddress: msg.sender,\\n            ensName: _ensName,\\n            efpTokenId: _efpTokenId,\\n            efpFollowers: _efpFollowers,\\n            efpFollowing: _efpFollowing,\\n            verificationLevel: verificationLevel,\\n            registrationTimestamp: block.timestamp,\\n            lastUpdateTimestamp: block.timestamp,\\n            isActive: true,\\n            reputationScore: 0, // Will be updated by reputation contract\\n            ipfsMetadata: _ipfsMetadata\\n        });\\n\\n        // Update mappings\\n        walletToCitizenId[msg.sender] = newCitizenId;\\n        if (bytes(_ensName).length > 0) {\\n            ensNameToCitizenId[_ensName] = newCitizenId;\\n            registeredEnsNames[_ensName] = true;\\n        }\\n\\n        emit CitizenRegistered(newCitizenId, msg.sender, _ensName, verificationLevel);\\n    }\\n\\n    /**\\n     * @dev Simplified registration for wallet-only users (hackathon-friendly)\\n     * Automatically generates ENS subdomain and placeholder EFP data\\n     */\\n    function registerCitizenSimple() external nonReentrant {\\n        require(walletToCitizenId[msg.sender] == 0, \\\"CitizenRegistry: Wallet already registered\\\");\\n\\n        // Generate automatic ENS subdomain using last 6 chars of address\\n        string memory addressSuffix = Strings.toHexString(uint160(msg.sender) & 0xFFFFFF, 3);\\n        string memory autoEnsName = string(abi.encodePacked(\\\"citizen\\\", addressSuffix, \\\".citiproof.eth\\\"));\\n        \\n        // Ensure generated name is unique (highly unlikely to collide)\\n        require(!registeredEnsNames[autoEnsName], \\\"CitizenRegistry: Generated ENS name collision\\\");\\n\\n        // Create with minimal verification data (can be updated later)\\n        _citizenIdCounter++;\\n        uint256 newCitizenId = _citizenIdCounter;\\n\\n        citizens[newCitizenId] = CitizenProfile({\\n            citizenId: newCitizenId,\\n            walletAddress: msg.sender,\\n            ensName: autoEnsName,\\n            efpTokenId: \\\"\\\", // Can be added later\\n            efpFollowers: 0,\\n            efpFollowing: 0,\\n            verificationLevel: VerificationLevel.UNVERIFIED,\\n            registrationTimestamp: block.timestamp,\\n            lastUpdateTimestamp: block.timestamp,\\n            isActive: true,\\n            reputationScore: 0,\\n            ipfsMetadata: \\\"\\\"\\n        });\\n\\n        // Update mappings\\n        walletToCitizenId[msg.sender] = newCitizenId;\\n        ensNameToCitizenId[autoEnsName] = newCitizenId;\\n        registeredEnsNames[autoEnsName] = true;\\n\\n        emit CitizenRegistered(newCitizenId, msg.sender, autoEnsName, VerificationLevel.UNVERIFIED);\\n    }\\n\\n    /**\\n     * @dev Update citizen's EFP verification data\\n     * @param _efpTokenId New EFP token ID\\n     * @param _efpFollowers Updated follower count\\n     * @param _efpFollowing Updated following count\\n     */\\n    function updateEFPVerification(\\n        string memory _efpTokenId,\\n        uint256 _efpFollowers,\\n        uint256 _efpFollowing\\n    ) external onlyRegisteredCitizen {\\n        uint256 citizenId = walletToCitizenId[msg.sender];\\n        CitizenProfile storage citizen = citizens[citizenId];\\n\\n        VerificationLevel oldLevel = citizen.verificationLevel;\\n        VerificationLevel newLevel = _determineVerificationLevel(_efpFollowers, _efpFollowing);\\n\\n        // Update EFP data\\n        citizen.efpTokenId = _efpTokenId;\\n        citizen.efpFollowers = _efpFollowers;\\n        citizen.efpFollowing = _efpFollowing;\\n        citizen.verificationLevel = newLevel;\\n        citizen.lastUpdateTimestamp = block.timestamp;\\n\\n        if (oldLevel != newLevel) {\\n            emit CitizenVerificationUpdated(citizenId, msg.sender, oldLevel, newLevel);\\n        }\\n\\n        emit CitizenProfileUpdated(citizenId, msg.sender, citizen.ensName, _efpTokenId);\\n    }\\n\\n    /**\\n     * @dev Update citizen's ENS name\\n     * @param _ensName New ENS name\\n     */\\n    function updateENSName(string memory _ensName) external onlyRegisteredCitizen {\\n        require(bytes(_ensName).length > 0, \\\"CitizenRegistry: ENS name cannot be empty\\\");\\n        require(!registeredEnsNames[_ensName], \\\"CitizenRegistry: ENS name already registered\\\");\\n\\n        uint256 citizenId = walletToCitizenId[msg.sender];\\n        CitizenProfile storage citizen = citizens[citizenId];\\n\\n        // Remove old ENS name from registry\\n        if (bytes(citizen.ensName).length > 0) {\\n            registeredEnsNames[citizen.ensName] = false;\\n            delete ensNameToCitizenId[citizen.ensName];\\n        }\\n\\n        // Set new ENS name\\n        citizen.ensName = _ensName;\\n        citizen.lastUpdateTimestamp = block.timestamp;\\n        ensNameToCitizenId[_ensName] = citizenId;\\n        registeredEnsNames[_ensName] = true;\\n\\n        emit CitizenProfileUpdated(citizenId, msg.sender, _ensName, citizen.efpTokenId);\\n    }\\n\\n    /**\\n     * @dev Update reputation score (only called by reputation contract)\\n     * @param _citizenId Citizen ID\\n     * @param _reputationScore New reputation score\\n     */\\n    function updateReputationScore(\\n        uint256 _citizenId,\\n        uint256 _reputationScore\\n    ) external validCitizenId(_citizenId) {\\n        // TODO: Add access control for reputation contract\\n        // require(msg.sender == reputationContract, \\\"CitizenRegistry: Only reputation contract can update scores\\\");\\n        \\n        citizens[_citizenId].reputationScore = _reputationScore;\\n        citizens[_citizenId].lastUpdateTimestamp = block.timestamp;\\n\\n        // Check if reputation score qualifies for premium verification\\n        if (_reputationScore >= 1000 && citizens[_citizenId].verificationLevel != VerificationLevel.PREMIUM) {\\n            VerificationLevel oldLevel = citizens[_citizenId].verificationLevel;\\n            citizens[_citizenId].verificationLevel = VerificationLevel.PREMIUM;\\n            emit CitizenVerificationUpdated(\\n                _citizenId, \\n                citizens[_citizenId].walletAddress, \\n                oldLevel, \\n                VerificationLevel.PREMIUM\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Deactivate a citizen account (admin function)\\n     * @param _citizenId Citizen ID to deactivate\\n     */\\n    function deactivateCitizen(uint256 _citizenId) external onlyOwner validCitizenId(_citizenId) {\\n        citizens[_citizenId].isActive = false;\\n        citizens[_citizenId].lastUpdateTimestamp = block.timestamp;\\n\\n        emit CitizenDeactivated(\\n            _citizenId,\\n            citizens[_citizenId].walletAddress,\\n            msg.sender\\n        );\\n    }\\n\\n    /**\\n     * @dev Reactivate a citizen account (admin function)\\n     * @param _citizenId Citizen ID to reactivate\\n     */\\n    function reactivateCitizen(uint256 _citizenId) external onlyOwner validCitizenId(_citizenId) {\\n        citizens[_citizenId].isActive = true;\\n        citizens[_citizenId].lastUpdateTimestamp = block.timestamp;\\n    }\\n\\n    // View functions\\n    function getCitizen(uint256 _citizenId) external view validCitizenId(_citizenId) returns (CitizenProfile memory) {\\n        return citizens[_citizenId];\\n    }\\n\\n    function getCitizenByWallet(address _wallet) external view returns (CitizenProfile memory) {\\n        uint256 citizenId = walletToCitizenId[_wallet];\\n        require(citizenId != 0, \\\"CitizenRegistry: Wallet not registered\\\");\\n        return citizens[citizenId];\\n    }\\n\\n    function getCitizenByENS(string memory _ensName) external view returns (CitizenProfile memory) {\\n        uint256 citizenId = ensNameToCitizenId[_ensName];\\n        require(citizenId != 0, \\\"CitizenRegistry: ENS name not registered\\\");\\n        return citizens[citizenId];\\n    }\\n\\n    function isCitizenRegistered(address _wallet) external view returns (bool) {\\n        return walletToCitizenId[_wallet] != 0 && citizens[walletToCitizenId[_wallet]].isActive;\\n    }\\n\\n    function getTotalCitizens() external view returns (uint256) {\\n        return _citizenIdCounter;\\n    }\\n\\n    function getVerificationLevel(address _wallet) external view returns (VerificationLevel) {\\n        uint256 citizenId = walletToCitizenId[_wallet];\\n        require(citizenId != 0, \\\"CitizenRegistry: Wallet not registered\\\");\\n        return citizens[citizenId].verificationLevel;\\n    }\\n\\n    function isENSNameAvailable(string memory _ensName) external view returns (bool) {\\n        return !registeredEnsNames[_ensName];\\n    }\\n\\n    // Internal functions\\n    function _determineVerificationLevel(uint256 _followers, uint256 _following) internal pure returns (VerificationLevel) {\\n        if (_followers == 0 && _following == 0) {\\n            return VerificationLevel.UNVERIFIED;\\n        } else if (_followers < 50) {\\n            return VerificationLevel.BASIC;\\n        } else {\\n            return VerificationLevel.VERIFIED;\\n        }\\n    }\\n\\n    // Batch operations for efficiency\\n    function getCitizensBatch(uint256[] memory _citizenIds) \\n        external \\n        view \\n        returns (CitizenProfile[] memory) \\n    {\\n        CitizenProfile[] memory profiles = new CitizenProfile[](_citizenIds.length);\\n        for (uint256 i = 0; i < _citizenIds.length; i++) {\\n            if (_citizenIds[i] > 0 && _citizenIds[i] <= _citizenIdCounter) {\\n                profiles[i] = citizens[_citizenIds[i]];\\n            }\\n        }\\n        return profiles;\\n    }\\n\\n    function getActiveCitizensCount() external view returns (uint256) {\\n        uint256 activeCount = 0;\\n        for (uint256 i = 1; i <= _citizenIdCounter; i++) {\\n            if (citizens[i].isActive) {\\n                activeCount++;\\n            }\\n        }\\n        return activeCount;\\n    }\\n}\",\"keccak256\":\"0x558f50048caa6b475ee31972fae16eee3985777f19dbd9882a6d86277223d533\",\"license\":\"MIT\"},\"contracts/ReputationSystem.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"./CitizenIdentityRegistry.sol\\\";\\n\\n/**\\n * @title ReputationSystem\\n * @dev Manages citizen reputation scores based on verified activities\\n * @author CitiProof Team\\n */\\ncontract ReputationSystem is Ownable, ReentrancyGuard {\\n    \\n    // Reference to CitizenIdentityRegistry\\n    CitizenIdentityRegistry public immutable citizenRegistry;\\n\\n    // Reputation scoring configuration\\n    struct ReputationConfig {\\n        uint256 issueReportReward;      // Points for verified issue reports\\n        uint256 verificationReward;     // Points for successful verifications\\n        uint256 votingReward;          // Points for participation in voting\\n        uint256 projectCompletionReward; // Points for project milestone completion\\n        uint256 falseReportPenalty;    // Penalty for false/spam reports\\n        uint256 maxDailyEarnings;      // Max points per day to prevent gaming\\n        uint256 decayRate;             // Daily reputation decay (in basis points)\\n        uint256 minimumDecayThreshold; // Minimum reputation before decay applies\\n    }\\n\\n    ReputationConfig public config;\\n\\n    // Reputation tracking\\n    struct ReputationData {\\n        uint256 totalScore;\\n        uint256 lastUpdateTimestamp;\\n        uint256 dailyEarnings;\\n        uint256 lastEarningsReset;\\n        mapping(bytes32 => bool) actionCompleted; // Prevent double rewards\\n        uint256 totalReports;\\n        uint256 verifiedReports;\\n        uint256 totalVerifications;\\n        uint256 successfulVerifications;\\n        uint256 votingParticipation;\\n    }\\n\\n    // Storage\\n    mapping(uint256 => ReputationData) private reputationData; // citizenId => ReputationData\\n    mapping(address => bool) public authorizedContracts; // Contracts allowed to update reputation\\n\\n    // Events\\n    event ReputationUpdated(\\n        uint256 indexed citizenId,\\n        address indexed citizen,\\n        uint256 oldScore,\\n        uint256 newScore,\\n        string reason\\n    );\\n\\n    event ReputationConfigUpdated(\\n        uint256 issueReportReward,\\n        uint256 verificationReward,\\n        uint256 votingReward,\\n        uint256 projectCompletionReward\\n    );\\n\\n    event ContractAuthorized(address indexed contractAddress, bool authorized);\\n\\n    // Modifiers\\n    modifier onlyAuthorizedContract() {\\n        require(authorizedContracts[msg.sender], \\\"ReputationSystem: Caller not authorized\\\");\\n        _;\\n    }\\n\\n    modifier validCitizenId(uint256 _citizenId) {\\n        require(_citizenId > 0, \\\"ReputationSystem: Invalid citizen ID\\\");\\n        // Additional validation by getting citizen profile\\n        try citizenRegistry.getCitizen(_citizenId) returns (CitizenIdentityRegistry.CitizenProfile memory profile) {\\n            require(profile.isActive, \\\"ReputationSystem: Citizen not active\\\");\\n        } catch {\\n            revert(\\\"ReputationSystem: Citizen does not exist\\\");\\n        }\\n        _;\\n    }\\n\\n    constructor(\\n        address initialOwner,\\n        address _citizenRegistry\\n    ) Ownable(initialOwner) {\\n        require(_citizenRegistry != address(0), \\\"ReputationSystem: Invalid citizen registry address\\\");\\n        citizenRegistry = CitizenIdentityRegistry(_citizenRegistry);\\n\\n        // Initialize default configuration\\n        config = ReputationConfig({\\n            issueReportReward: 50,        // 50 points per verified report\\n            verificationReward: 25,       // 25 points per verification\\n            votingReward: 10,            // 10 points per vote\\n            projectCompletionReward: 100, // 100 points per project milestone\\n            falseReportPenalty: 75,      // -75 points for false reports\\n            maxDailyEarnings: 200,       // Max 200 points per day\\n            decayRate: 10,               // 0.1% daily decay (10 basis points)\\n            minimumDecayThreshold: 100   // No decay below 100 points\\n        });\\n    }\\n\\n    /**\\n     * @dev Add reputation points for verified issue report\\n     */\\n    function addIssueReportReputation(uint256 _citizenId, bytes32 _reportId) \\n        external \\n        onlyAuthorizedContract \\n        validCitizenId(_citizenId) \\n    {\\n        bytes32 actionId = keccak256(abi.encodePacked(\\\"issue_report\\\", _reportId));\\n        require(!reputationData[_citizenId].actionCompleted[actionId], \\n                \\\"ReputationSystem: Reward already claimed for this report\\\");\\n\\n        _addReputation(_citizenId, config.issueReportReward, \\\"Verified issue report\\\");\\n        reputationData[_citizenId].actionCompleted[actionId] = true;\\n        reputationData[_citizenId].totalReports++;\\n        reputationData[_citizenId].verifiedReports++;\\n    }\\n\\n    /**\\n     * @dev Add reputation points for successful verification\\n     */\\n    function addVerificationReputation(uint256 _citizenId, bytes32 _verificationId) \\n        external \\n        onlyAuthorizedContract \\n        validCitizenId(_citizenId) \\n    {\\n        bytes32 actionId = keccak256(abi.encodePacked(\\\"verification\\\", _verificationId));\\n        require(!reputationData[_citizenId].actionCompleted[actionId], \\n                \\\"ReputationSystem: Reward already claimed for this verification\\\");\\n\\n        _addReputation(_citizenId, config.verificationReward, \\\"Successful verification\\\");\\n        reputationData[_citizenId].actionCompleted[actionId] = true;\\n        reputationData[_citizenId].totalVerifications++;\\n        reputationData[_citizenId].successfulVerifications++;\\n    }\\n\\n    /**\\n     * @dev Add reputation points for voting participation\\n     */\\n    function addVotingReputation(uint256 _citizenId, bytes32 _voteId) \\n        external \\n        onlyAuthorizedContract \\n        validCitizenId(_citizenId) \\n    {\\n        bytes32 actionId = keccak256(abi.encodePacked(\\\"vote\\\", _voteId));\\n        require(!reputationData[_citizenId].actionCompleted[actionId], \\n                \\\"ReputationSystem: Reward already claimed for this vote\\\");\\n\\n        _addReputation(_citizenId, config.votingReward, \\\"Voting participation\\\");\\n        reputationData[_citizenId].actionCompleted[actionId] = true;\\n        reputationData[_citizenId].votingParticipation++;\\n    }\\n\\n    /**\\n     * @dev Add reputation points for project completion\\n     */\\n    function addProjectCompletionReputation(uint256 _citizenId, bytes32 _projectId) \\n        external \\n        onlyAuthorizedContract \\n        validCitizenId(_citizenId) \\n    {\\n        bytes32 actionId = keccak256(abi.encodePacked(\\\"project\\\", _projectId));\\n        require(!reputationData[_citizenId].actionCompleted[actionId], \\n                \\\"ReputationSystem: Reward already claimed for this project\\\");\\n\\n        _addReputation(_citizenId, config.projectCompletionReward, \\\"Project milestone completion\\\");\\n        reputationData[_citizenId].actionCompleted[actionId] = true;\\n    }\\n\\n    /**\\n     * @dev Penalize reputation for false reports\\n     */\\n    function penalizeFalseReport(uint256 _citizenId, bytes32 _reportId) \\n        external \\n        onlyAuthorizedContract \\n        validCitizenId(_citizenId) \\n    {\\n        bytes32 actionId = keccak256(abi.encodePacked(\\\"false_report\\\", _reportId));\\n        require(!reputationData[_citizenId].actionCompleted[actionId], \\n                \\\"ReputationSystem: Penalty already applied for this report\\\");\\n\\n        _subtractReputation(_citizenId, config.falseReportPenalty, \\\"False report penalty\\\");\\n        reputationData[_citizenId].actionCompleted[actionId] = true;\\n        reputationData[_citizenId].totalReports++;\\n        // Note: verifiedReports count remains unchanged\\n    }\\n\\n    /**\\n     * @dev Apply daily reputation decay to prevent inflation\\n     */\\n    function applyDailyDecay(uint256[] calldata _citizenIds) external {\\n        for (uint256 i = 0; i < _citizenIds.length; i++) {\\n            _applyDecay(_citizenIds[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function to add reputation with daily limits\\n     */\\n    function _addReputation(uint256 _citizenId, uint256 _points, string memory _reason) internal {\\n        ReputationData storage data = reputationData[_citizenId];\\n        \\n        // Reset daily earnings if it's a new day\\n        if (block.timestamp > data.lastEarningsReset + 1 days) {\\n            data.dailyEarnings = 0;\\n            data.lastEarningsReset = block.timestamp;\\n        }\\n\\n        // Check daily earning limits\\n        uint256 actualPoints = _points;\\n        if (data.dailyEarnings + _points > config.maxDailyEarnings) {\\n            actualPoints = config.maxDailyEarnings > data.dailyEarnings ? \\n                           config.maxDailyEarnings - data.dailyEarnings : 0;\\n        }\\n\\n        if (actualPoints > 0) {\\n            uint256 oldScore = data.totalScore;\\n            data.totalScore += actualPoints;\\n            data.dailyEarnings += actualPoints;\\n            data.lastUpdateTimestamp = block.timestamp;\\n\\n            // Update citizen registry with new score\\n            citizenRegistry.updateReputationScore(_citizenId, data.totalScore);\\n\\n            // Get citizen address from registry\\n            address citizenAddress = address(0);\\n            try citizenRegistry.getCitizen(_citizenId) returns (CitizenIdentityRegistry.CitizenProfile memory profile) {\\n                citizenAddress = profile.walletAddress;\\n            } catch {}\\n            \\n            emit ReputationUpdated(_citizenId, citizenAddress, oldScore, data.totalScore, _reason);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function to subtract reputation\\n     */\\n    function _subtractReputation(uint256 _citizenId, uint256 _points, string memory _reason) internal {\\n        ReputationData storage data = reputationData[_citizenId];\\n        uint256 oldScore = data.totalScore;\\n        \\n        // Ensure reputation doesn't go below 0\\n        if (data.totalScore >= _points) {\\n            data.totalScore -= _points;\\n        } else {\\n            data.totalScore = 0;\\n        }\\n        \\n        data.lastUpdateTimestamp = block.timestamp;\\n\\n        // Update citizen registry with new score\\n        citizenRegistry.updateReputationScore(_citizenId, data.totalScore);\\n\\n        // Get citizen address from registry\\n        address citizenAddress = address(0);\\n        try citizenRegistry.getCitizen(_citizenId) returns (CitizenIdentityRegistry.CitizenProfile memory profile) {\\n            citizenAddress = profile.walletAddress;\\n        } catch {}\\n        emit ReputationUpdated(_citizenId, citizenAddress, oldScore, data.totalScore, _reason);\\n    }\\n\\n    /**\\n     * @dev Apply reputation decay for inactive users\\n     */\\n    function _applyDecay(uint256 _citizenId) internal validCitizenId(_citizenId) {\\n        ReputationData storage data = reputationData[_citizenId];\\n        \\n        // Only apply decay if above minimum threshold and it's been at least a day\\n        if (data.totalScore > config.minimumDecayThreshold && \\n            block.timestamp > data.lastUpdateTimestamp + 1 days) {\\n            \\n            uint256 daysSinceUpdate = (block.timestamp - data.lastUpdateTimestamp) / 1 days;\\n            uint256 decayAmount = (data.totalScore * config.decayRate * daysSinceUpdate) / 10000;\\n            \\n            if (decayAmount > 0) {\\n                _subtractReputation(_citizenId, decayAmount, \\\"Daily reputation decay\\\");\\n            }\\n        }\\n    }\\n\\n    // View functions\\n    function getReputationScore(uint256 _citizenId) external view validCitizenId(_citizenId) returns (uint256) {\\n        return reputationData[_citizenId].totalScore;\\n    }\\n\\n    function getReputationStats(uint256 _citizenId) \\n        external \\n        view \\n        validCitizenId(_citizenId) \\n        returns (\\n            uint256 totalScore,\\n            uint256 totalReports,\\n            uint256 verifiedReports,\\n            uint256 totalVerifications,\\n            uint256 successfulVerifications,\\n            uint256 votingParticipation,\\n            uint256 lastUpdateTimestamp\\n        ) \\n    {\\n        ReputationData storage data = reputationData[_citizenId];\\n        return (\\n            data.totalScore,\\n            data.totalReports,\\n            data.verifiedReports,\\n            data.totalVerifications,\\n            data.successfulVerifications,\\n            data.votingParticipation,\\n            data.lastUpdateTimestamp\\n        );\\n    }\\n\\n    function getDailyEarningsInfo(uint256 _citizenId) \\n        external \\n        view \\n        validCitizenId(_citizenId) \\n        returns (uint256 dailyEarnings, uint256 remainingEarnings, uint256 lastReset) \\n    {\\n        ReputationData storage data = reputationData[_citizenId];\\n        uint256 remaining = config.maxDailyEarnings > data.dailyEarnings ? \\n                           config.maxDailyEarnings - data.dailyEarnings : 0;\\n        \\n        return (data.dailyEarnings, remaining, data.lastEarningsReset);\\n    }\\n\\n    function getTopReputationCitizens(uint256 _limit) \\n        external \\n        view \\n        returns (uint256[] memory citizenIds, uint256[] memory scores) \\n    {\\n        uint256 totalCitizens = citizenRegistry.getTotalCitizens();\\n        if (_limit > totalCitizens) _limit = totalCitizens;\\n        \\n        citizenIds = new uint256[](_limit);\\n        scores = new uint256[](_limit);\\n        uint256 count = 0;\\n        \\n        // Simple implementation - collect first _limit active citizens with scores\\n        for (uint256 i = 1; i <= totalCitizens && count < _limit; i++) {\\n            try citizenRegistry.getCitizen(i) returns (CitizenIdentityRegistry.CitizenProfile memory profile) {\\n                if (profile.isActive) {\\n                    citizenIds[count] = i;\\n                    scores[count] = reputationData[i].totalScore;\\n                    count++;\\n                }\\n            } catch {\\n                // Skip invalid citizens\\n                continue;\\n            }\\n        }\\n        \\n        return (citizenIds, scores);\\n    }\\n\\n    // Admin functions\\n    function updateConfig(\\n        uint256 _issueReportReward,\\n        uint256 _verificationReward,\\n        uint256 _votingReward,\\n        uint256 _projectCompletionReward,\\n        uint256 _falseReportPenalty,\\n        uint256 _maxDailyEarnings,\\n        uint256 _decayRate,\\n        uint256 _minimumDecayThreshold\\n    ) external onlyOwner {\\n        config.issueReportReward = _issueReportReward;\\n        config.verificationReward = _verificationReward;\\n        config.votingReward = _votingReward;\\n        config.projectCompletionReward = _projectCompletionReward;\\n        config.falseReportPenalty = _falseReportPenalty;\\n        config.maxDailyEarnings = _maxDailyEarnings;\\n        config.decayRate = _decayRate;\\n        config.minimumDecayThreshold = _minimumDecayThreshold;\\n\\n        emit ReputationConfigUpdated(\\n            _issueReportReward,\\n            _verificationReward,\\n            _votingReward,\\n            _projectCompletionReward\\n        );\\n    }\\n\\n    function authorizeContract(address _contract, bool _authorized) external onlyOwner {\\n        require(_contract != address(0), \\\"ReputationSystem: Invalid contract address\\\");\\n        authorizedContracts[_contract] = _authorized;\\n        emit ContractAuthorized(_contract, _authorized);\\n    }\\n\\n    function emergencyResetReputation(uint256 _citizenId, uint256 _newScore) external onlyOwner {\\n        ReputationData storage data = reputationData[_citizenId];\\n        uint256 oldScore = data.totalScore;\\n        data.totalScore = _newScore;\\n        data.lastUpdateTimestamp = block.timestamp;\\n\\n        citizenRegistry.updateReputationScore(_citizenId, _newScore);\\n\\n        // Get citizen address from registry\\n        address citizenAddress = address(0);\\n        try citizenRegistry.getCitizen(_citizenId) returns (CitizenIdentityRegistry.CitizenProfile memory profile) {\\n            citizenAddress = profile.walletAddress;\\n        } catch {}\\n        emit ReputationUpdated(_citizenId, citizenAddress, oldScore, _newScore, \\\"Emergency reset\\\");\\n    }\\n}\",\"keccak256\":\"0xc87bcb575a1e90e3ac3b3b48c43182947583e9abb388d712ee93ae8bb354f140\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a034620002315762002062906001600160401b03601f38849003908101601f19168301908282118483101762000236578084916040968794855283398101031262000231576200005e602062000056846200024c565b93016200024c565b916001600160a01b039081169081156200021957600080546001600160a01b03198116841782558651919591939083167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08780a36001805516908115620001bc5750608052825191610100830191821183831017620001a8575060649160e09184526032815260196020820152600a84820152826060820152604b608082015260c860a0820152600a60c0820152015260326002556019600355600a6004556064600555604b60065560c8600755600a600855606460095551611e0090816200026282396080518181816102020152818161031a015281816103f6015281816105b301528181610709015281816109d001528181610b9f01528181610e7101528181610ff7015281816110ea015281816111ff015281816113f301528181611a7d0152611c0a0152f35b634e487b7160e01b81526041600452602490fd5b62461bcd60e51b815260206004820152603260248201527f52657075746174696f6e53797374656d3a20496e76616c696420636974697a656044820152716e207265676973747279206164647265737360701b6064820152608490fd5b8451631e4fbdf760e01b815260006004820152602490fd5b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b0382168203620002315756fe6040608081526004908136101561001557600080fd5b600091823560e01c8063028b67101461139a5780630cc73895146111b157806329e6e78f146110b15780632dffe77214611026578063386ca89d14610fe25780634161521114610e235780635cbeb13f14610d4457806368efb2a314610b515780636e23040014610982578063715018a61461092557806379502c55146108cb5780638da5cb5b146108a3578063b21f9346146106e7578063b2b92b031461056d578063bad6d797146103a9578063bd5bcb0a146102df578063c8697b6b146101c7578063d5b9221b146101855763f2fde38b146100f257600080fd5b346101815760203660031901126101815761010b6115a7565b906101146115f1565b6001600160a01b0391821692831561016b575050600054826bffffffffffffffffffffffff60a01b821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b51631e4fbdf760e01b8152908101849052602490fd5b8280fd5b5050346101c35760203660031901126101c35760209160ff9082906001600160a01b036101b06115a7565b168152600b855220541690519015158152f35b5080fd5b509034610181576020366003190112610181578135926101e8841515611679565b8151630448a54560e51b81528381018590529381856024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa809583966102bb575b5061025557825162461bcd60e51b815280610251818701611937565b0390fd5b82935061026a61012060e096015115156118df565b8152600a602052209081549160058101549160068201546007830154906008840154926001600986015495015495815197885260208801528601526060850152608084015260a083015260c0820152f35b6102d89196503d8085833e6102d08183611733565b8101906117cd565b9438610235565b50903461018157602036600319011261018157813592610300841515611679565b8151630448a54560e51b81528381018590529381856024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa8095839661038d575b5061036957825162461bcd60e51b815280610251818701611937565b82935061037e610120602096015115156118df565b8152600a845220549051908152f35b6103a29196503d8085833e6102d08183611733565b943861034d565b509034610181576103b93661158c565b338552602090600b82526103d260ff858820541661161d565b6103dd831515611679565b8351630448a54560e51b815285810184905286816024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa879181610551575b5061044457845162461bcd60e51b815280610251818901611937565b90610457610120889793015115156118df565b845183810191661c1c9bda9958dd60ca1b835260278201526027815261047c81611717565b51902092808652600a83528185872001848752835260ff85872054166104fb576104dd6005548651906104ae826116fb565b601c82527f50726f6a656374206d696c6573746f6e6520636f6d706c6574696f6e0000000086830152836119f7565b8552600a825283852001918452528120600160ff1982541617905580f35b5060849184519162461bcd60e51b835282015260396024820152600080516020611dab83398151915260448201527f20636c61696d656420666f7220746869732070726f6a656374000000000000006064820152fd5b6105669192503d808a833e6102d08183611733565b9038610428565b50903461018157806003193601126101815781359060243561058d6115f1565b828552600a602052818520805482825542600190920191909155936001600160a01b03927f00000000000000000000000000000000000000000000000000000000000000008416803b156106e357815163fdf488f760e01b81528684820152846024820152888160448183865af180156106d9576106ab575b509160a0939185600080516020611d8b83398151915296948a896024829686519485938492630448a54560e51b84528301525afa8b918161068e575b50610680575b50506060919281519889526020890152870152600f60608701526e115b595c99d95b98de481c995cd95d608a1b60808701521693a380f35b602001511691508338610648565b6106a49192508c3d8091833e6102d08183611733565b9038610642565b9185600080516020611d8b833981519152969492996106cc60a097956116d1565b9992945095509193610606565b83513d8b823e3d90fd5b8780fd5b5034610181576020908160031936011261089f5782516303c9926b60e31b81527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031694823590848385818a5afa928315610893578193610864575b5082821161085c575b61075c82611d2e565b9661076683611d2e565b94829360019586805b61079f575b8b8b61079b8c8c61078e84519585879687528601906115bd565b91848303908501526115bd565b0390f35b8181111580610853575b1561084e578b8b51630448a54560e51b8152828682015287816024818a5afa889181610832575b506107e65750506107e090611980565b8761076f565b61012001516107fa575b506107e090611980565b878261080d6107e0949a61082994611d60565b52888852600a8c528c882054610823828d611d60565b52611980565b9690508b6107f0565b6108479192503d808b833e6102d08183611733565b90386107d0565b610774565b508287106107a9565b829150610753565b9092508481813d831161088c575b61087c8183611733565b810103126101815751913861074a565b503d610872565b508551903d90823e3d90fd5b8380fd5b5050346101c357816003193601126101c357905490516001600160a01b039091168152602090f35b5034610181578260031936011261018157610100925060025491600354915460055460065490600754926008549460095496815198895260208901528701526060860152608085015260a084015260c083015260e0820152f35b833461097f578060031936011261097f5761093e6115f1565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b509034610181576109923661158c565b90338552602091600b83526109ac60ff858820541661161d565b6109b7821515611679565b8351630448a54560e51b815285810183905286816024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa879181610b35575b50610a1e57845162461bcd60e51b815280610251818901611937565b90610a31610120889793015115156118df565b84518481019163766f746560e01b8352602482015260248152610a5381611717565b51902090828652600a84528085872001828752845260ff8587205416610ae55791600994939183610ab3600a9554875190610a8d826116fb565b60148252732b37ba34b733903830b93a34b1b4b830ba34b7b760611b87830152856119f7565b828852848452858820019087528252838620600160ff19825416179055855252822001610ae08154611980565b905580f35b845162461bcd60e51b815290810184905260366024820152600080516020611dab83398151915260448201527520636c61696d656420666f72207468697320766f746560501b6064820152608490fd5b610b4a9192503d808a833e6102d08183611733565b9038610a02565b50903461018157610b613661158c565b90338552602091600b8352610b7b60ff858820541661161d565b610b86821515611679565b8351630448a54560e51b815285810183905286816024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa879181610d28575b50610bed57845162461bcd60e51b815280610251818901611937565b90610c00610120889793015115156118df565b8451848101916b1a5cdcdd5957dc995c1bdc9d60a21b8352602c820152602c8152610c2a81611717565b51902090828652600a84528085872001828752845260ff8587205416610cd157916006949391600a93610c8c600254875190610c65826116fb565b601582527415995c9a599a5959081a5cdcdd59481c995c1bdc9d605a1b87830152856119f7565b828852848452858820019087528252838620600160ff19825416179055808652828252600584872001610cbf8154611980565b9055855252822001610ae08154611980565b845162461bcd60e51b815290810184905260386024820152600080516020611dab83398151915260448201527f20636c61696d656420666f722074686973207265706f727400000000000000006064820152608490fd5b610d3d9192503d808a833e6102d08183611733565b9038610bd1565b509034610181578060031936011261018157610d5e6115a7565b9060243591821515809303610e1f57610d756115f1565b6001600160a01b0316928315610dca57507f3213ab8ec2ed122402f038736b41878b69ae9f61f49a7edd0666bce891d29fc991602091848652600b835280862060ff1981541660ff841617905551908152a280f35b6020608492519162461bcd60e51b8352820152602a60248201527f52657075746174696f6e53797374656d3a20496e76616c696420636f6e7472616044820152696374206164647265737360b01b6064820152fd5b8480fd5b50903461018157610e333661158c565b90338552602091600b8352610e4d60ff858820541661161d565b610e58821515611679565b8351630448a54560e51b815285810183905286816024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa879181610fc6575b50610ebf57845162461bcd60e51b815280610251818901611937565b90610ed2610120889793015115156118df565b8451848101916b19985b1cd957dc995c1bdc9d60a21b8352602c820152602c8152610efc81611717565b51902090828652600a84528085872001828752845260ff8587205416610f5d57916005949391600a93610ab3600654875190610f37826116fb565b601482527346616c7365207265706f72742070656e616c747960601b8783015285611bcd565b845162461bcd60e51b8152908101849052603960248201527f52657075746174696f6e53797374656d3a2050656e616c747920616c7265616460448201527f79206170706c69656420666f722074686973207265706f7274000000000000006064820152608490fd5b610fdb9192503d808a833e6102d08183611733565b9038610ea3565b5050346101c357816003193601126101c357517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b503461018157610100366003190112610181577f8f44d71ba15e77d8af7ec9274f5b957127f8167f4429e3c12aa5939247aec11991816080923591602435906044359182606435946110766115f1565b8660025582600355558360055560843560065560a43560075560c43560085560e435600955815194855260208501528301526060820152a180f35b5090346101815760203660031901126101815781356110d1811515611679565b8151630448a54560e51b815283810182905284816024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa859181611195575b5061113857825162461bcd60e51b815280610251818701611937565b606094935061012061114d91015115156118df565b8252600a602052808220906003600754936002840154809581811160001461118d5761117992506119b2565b925b01549181519384526020840152820152f35b50509261117b565b6111aa9192503d8088833e6102d08183611733565b903861111c565b509034610181576111c13661158c565b90338552602091600b83526111db60ff858820541661161d565b6111e6821515611679565b8351630448a54560e51b815285810183905286816024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa87918161137e575b5061124d57845162461bcd60e51b815280610251818901611937565b90611260610120889793015115156118df565b8451848101916b3b32b934b334b1b0ba34b7b760a11b8352602c820152602c815261128a81611717565b51902090828652600a84528085872001828752845260ff858720541661132757916008949391600a936112f46003548751906112c5826116fb565b601782527f5375636365737366756c20766572696669636174696f6e00000000000000000087830152856119f7565b828852848452858820019087528252838620600160ff19825416179055808652828252600784872001610cbf8154611980565b845162461bcd60e51b8152908101849052603e6024820152600080516020611dab83398151915260448201527f20636c61696d656420666f72207468697320766572696669636174696f6e00006064820152608490fd5b6113939192503d808a833e6102d08183611733565b9038611231565b508290346101c3576020928360031936011261018157813567ffffffffffffffff94858211610e1f5736602383011215610e1f5781840135958611610e1f57602495600592368883861b830101116115885795969590927f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169190885b85811061142a578980f35b8881839b98999a9b1b84010135611442811515611679565b8851630448a54560e51b81528a810182905288818d81895afa89918161156c575b5061147f57895162461bcd60e51b815280610251818e01611937565b610120611493919b9a999b015115156118df565b808a52600a8652878a20805490600954821180611540575b906114c0949392916114c8575b505050611980565b98979861141f565b612710916114ef620151806114e460016114f4950154426119b2565b049160085490611d03565b611d03565b049081611502575b806114b8565b611539918a5191611512836116fb565b60168352754461696c792072657075746174696f6e20646563617960501b8a840152611bcd565b8b806114fc565b50600181015462015180810180911161155a5742116114ab565b634e487b7160e01b8d5260118c528d8dfd5b6115819192503d808c833e6102d08183611733565b908d611463565b8680fd5b60409060031901126115a2576004359060243590565b600080fd5b600435906001600160a01b03821682036115a257565b90815180825260208080930193019160005b8281106115dd575050505090565b8351855293810193928101926001016115cf565b6000546001600160a01b0316330361160557565b60405163118cdaa760e01b8152336004820152602490fd5b1561162457565b60405162461bcd60e51b815260206004820152602760248201527f52657075746174696f6e53797374656d3a2043616c6c6572206e6f74206175746044820152661a1bdc9a5e995960ca1b6064820152608490fd5b1561168057565b60405162461bcd60e51b8152602060048201526024808201527f52657075746174696f6e53797374656d3a20496e76616c696420636974697a656044820152631b88125160e21b6064820152608490fd5b67ffffffffffffffff81116116e557604052565b634e487b7160e01b600052604160045260246000fd5b6040810190811067ffffffffffffffff8211176116e557604052565b6060810190811067ffffffffffffffff8211176116e557604052565b90601f8019910116810190811067ffffffffffffffff8211176116e557604052565b60005b8381106117685750506000910152565b8181015183820152602001611758565b81601f820112156115a257805167ffffffffffffffff81116116e557604051926117ac601f8301601f191660200185611733565b818452602082840101116115a2576117ca9160208085019101611755565b90565b6020818303126115a257805167ffffffffffffffff918282116115a257016101809283828203126115a257604051938401848110848211176116e5576040528151845260208201516001600160a01b03811681036115a257602085015260408201518381116115a25781611842918401611778565b604085015260608201518381116115a2578161185f918401611778565b60608501526080820151608085015260a082015160a085015260c082015160048110156115a25760c085015260e082015160e08501526101008083015190850152610120808301519081151582036115a257850152610140808301519085015261016092838301519081116115a2576118d89201611778565b9082015290565b156118e657565b60405162461bcd60e51b8152602060048201526024808201527f52657075746174696f6e53797374656d3a20436974697a656e206e6f742061636044820152637469766560e01b6064820152608490fd5b60809060208152602860208201527f52657075746174696f6e53797374656d3a20436974697a656e20646f6573206e6040820152671bdd08195e1a5cdd60c21b60608201520190565b600019811461198f5760010190565b634e487b7160e01b600052601160045260246000fd5b9190820180921161198f57565b9190820391821161198f57565b916080939183526020830152606060408301526119eb8151809281606086015260208686019101611755565b601f01601f1916010190565b929192600093818552600a60205260408520600381018054620151808101809111611bb9574211611baa575b508360028201611a35815492836119a5565b600754809111611b86575b5085611a51575b5050505050509050565b611a6a835496611a6181896119a5565b938486556119a5565b90554260018301556001600160a01b03927f0000000000000000000000000000000000000000000000000000000000000000841691823b15611b82576040519063fdf488f760e01b82528660048301526024820152888160448183875af18015611b7757600080516020611d8b833981519152969798998692602492611b68575b5080809560405193848092630448a54560e51b82528d60048301525afa90918282611b4b575b5050611b3d575b5050611b2e9192546040519485941697846119bf565b0390a380388080808080611a47565b602001511691508338611b18565b611b609293503d8091833e6102d08183611733565b903880611b11565b611b71906116d1565b38611aeb565b6040513d8b823e3d90fd5b8880fd5b9095508180821115611ba257611b9b916119b2565b9438611a40565b505086611b9b565b86600283015542905538611a23565b634e487b7160e01b88526011600452602488fd5b6000818152600a6020526040812080549195949193808510611cfa57611bf49082546119b2565b81555b42600182015580546001600160a01b03927f0000000000000000000000000000000000000000000000000000000000000000841691823b15611b82576040519063fdf488f760e01b82528660048301526024820152888160448183875af18015611b7757600080516020611d8b833981519152969798998692602492611ceb575b5080809560405193848092630448a54560e51b82528d60048301525afa90918282611cce575b5050611cc0575b5050611cbb9192546040519485941697846119bf565b0390a3565b602001511691508338611ca5565b611ce39293503d8091833e6102d08183611733565b903880611c9e565b611cf4906116d1565b38611c78565b50858155611bf7565b8181029291811591840414171561198f57565b67ffffffffffffffff81116116e55760051b60200190565b90611d3882611d16565b611d456040519182611733565b8281528092611d56601f1991611d16565b0190602036910137565b8051821015611d745760209160051b010190565b634e487b7160e01b600052603260045260246000fdfe5653f9d595db843b99875613cc55c95fe05012924b8e4fc5671f9a1cb76f2d9052657075746174696f6e53797374656d3a2052657761726420616c7265616479a2646970667358221220205369cc50f4abb4de4e0ac0572e818f0446d7fb37a37b400fcf7ff6a66ac9af64736f6c63430008140033",
  "deployedBytecode": "0x6040608081526004908136101561001557600080fd5b600091823560e01c8063028b67101461139a5780630cc73895146111b157806329e6e78f146110b15780632dffe77214611026578063386ca89d14610fe25780634161521114610e235780635cbeb13f14610d4457806368efb2a314610b515780636e23040014610982578063715018a61461092557806379502c55146108cb5780638da5cb5b146108a3578063b21f9346146106e7578063b2b92b031461056d578063bad6d797146103a9578063bd5bcb0a146102df578063c8697b6b146101c7578063d5b9221b146101855763f2fde38b146100f257600080fd5b346101815760203660031901126101815761010b6115a7565b906101146115f1565b6001600160a01b0391821692831561016b575050600054826bffffffffffffffffffffffff60a01b821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b51631e4fbdf760e01b8152908101849052602490fd5b8280fd5b5050346101c35760203660031901126101c35760209160ff9082906001600160a01b036101b06115a7565b168152600b855220541690519015158152f35b5080fd5b509034610181576020366003190112610181578135926101e8841515611679565b8151630448a54560e51b81528381018590529381856024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa809583966102bb575b5061025557825162461bcd60e51b815280610251818701611937565b0390fd5b82935061026a61012060e096015115156118df565b8152600a602052209081549160058101549160068201546007830154906008840154926001600986015495015495815197885260208801528601526060850152608084015260a083015260c0820152f35b6102d89196503d8085833e6102d08183611733565b8101906117cd565b9438610235565b50903461018157602036600319011261018157813592610300841515611679565b8151630448a54560e51b81528381018590529381856024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa8095839661038d575b5061036957825162461bcd60e51b815280610251818701611937565b82935061037e610120602096015115156118df565b8152600a845220549051908152f35b6103a29196503d8085833e6102d08183611733565b943861034d565b509034610181576103b93661158c565b338552602090600b82526103d260ff858820541661161d565b6103dd831515611679565b8351630448a54560e51b815285810184905286816024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa879181610551575b5061044457845162461bcd60e51b815280610251818901611937565b90610457610120889793015115156118df565b845183810191661c1c9bda9958dd60ca1b835260278201526027815261047c81611717565b51902092808652600a83528185872001848752835260ff85872054166104fb576104dd6005548651906104ae826116fb565b601c82527f50726f6a656374206d696c6573746f6e6520636f6d706c6574696f6e0000000086830152836119f7565b8552600a825283852001918452528120600160ff1982541617905580f35b5060849184519162461bcd60e51b835282015260396024820152600080516020611dab83398151915260448201527f20636c61696d656420666f7220746869732070726f6a656374000000000000006064820152fd5b6105669192503d808a833e6102d08183611733565b9038610428565b50903461018157806003193601126101815781359060243561058d6115f1565b828552600a602052818520805482825542600190920191909155936001600160a01b03927f00000000000000000000000000000000000000000000000000000000000000008416803b156106e357815163fdf488f760e01b81528684820152846024820152888160448183865af180156106d9576106ab575b509160a0939185600080516020611d8b83398151915296948a896024829686519485938492630448a54560e51b84528301525afa8b918161068e575b50610680575b50506060919281519889526020890152870152600f60608701526e115b595c99d95b98de481c995cd95d608a1b60808701521693a380f35b602001511691508338610648565b6106a49192508c3d8091833e6102d08183611733565b9038610642565b9185600080516020611d8b833981519152969492996106cc60a097956116d1565b9992945095509193610606565b83513d8b823e3d90fd5b8780fd5b5034610181576020908160031936011261089f5782516303c9926b60e31b81527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031694823590848385818a5afa928315610893578193610864575b5082821161085c575b61075c82611d2e565b9661076683611d2e565b94829360019586805b61079f575b8b8b61079b8c8c61078e84519585879687528601906115bd565b91848303908501526115bd565b0390f35b8181111580610853575b1561084e578b8b51630448a54560e51b8152828682015287816024818a5afa889181610832575b506107e65750506107e090611980565b8761076f565b61012001516107fa575b506107e090611980565b878261080d6107e0949a61082994611d60565b52888852600a8c528c882054610823828d611d60565b52611980565b9690508b6107f0565b6108479192503d808b833e6102d08183611733565b90386107d0565b610774565b508287106107a9565b829150610753565b9092508481813d831161088c575b61087c8183611733565b810103126101815751913861074a565b503d610872565b508551903d90823e3d90fd5b8380fd5b5050346101c357816003193601126101c357905490516001600160a01b039091168152602090f35b5034610181578260031936011261018157610100925060025491600354915460055460065490600754926008549460095496815198895260208901528701526060860152608085015260a084015260c083015260e0820152f35b833461097f578060031936011261097f5761093e6115f1565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b509034610181576109923661158c565b90338552602091600b83526109ac60ff858820541661161d565b6109b7821515611679565b8351630448a54560e51b815285810183905286816024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa879181610b35575b50610a1e57845162461bcd60e51b815280610251818901611937565b90610a31610120889793015115156118df565b84518481019163766f746560e01b8352602482015260248152610a5381611717565b51902090828652600a84528085872001828752845260ff8587205416610ae55791600994939183610ab3600a9554875190610a8d826116fb565b60148252732b37ba34b733903830b93a34b1b4b830ba34b7b760611b87830152856119f7565b828852848452858820019087528252838620600160ff19825416179055855252822001610ae08154611980565b905580f35b845162461bcd60e51b815290810184905260366024820152600080516020611dab83398151915260448201527520636c61696d656420666f72207468697320766f746560501b6064820152608490fd5b610b4a9192503d808a833e6102d08183611733565b9038610a02565b50903461018157610b613661158c565b90338552602091600b8352610b7b60ff858820541661161d565b610b86821515611679565b8351630448a54560e51b815285810183905286816024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa879181610d28575b50610bed57845162461bcd60e51b815280610251818901611937565b90610c00610120889793015115156118df565b8451848101916b1a5cdcdd5957dc995c1bdc9d60a21b8352602c820152602c8152610c2a81611717565b51902090828652600a84528085872001828752845260ff8587205416610cd157916006949391600a93610c8c600254875190610c65826116fb565b601582527415995c9a599a5959081a5cdcdd59481c995c1bdc9d605a1b87830152856119f7565b828852848452858820019087528252838620600160ff19825416179055808652828252600584872001610cbf8154611980565b9055855252822001610ae08154611980565b845162461bcd60e51b815290810184905260386024820152600080516020611dab83398151915260448201527f20636c61696d656420666f722074686973207265706f727400000000000000006064820152608490fd5b610d3d9192503d808a833e6102d08183611733565b9038610bd1565b509034610181578060031936011261018157610d5e6115a7565b9060243591821515809303610e1f57610d756115f1565b6001600160a01b0316928315610dca57507f3213ab8ec2ed122402f038736b41878b69ae9f61f49a7edd0666bce891d29fc991602091848652600b835280862060ff1981541660ff841617905551908152a280f35b6020608492519162461bcd60e51b8352820152602a60248201527f52657075746174696f6e53797374656d3a20496e76616c696420636f6e7472616044820152696374206164647265737360b01b6064820152fd5b8480fd5b50903461018157610e333661158c565b90338552602091600b8352610e4d60ff858820541661161d565b610e58821515611679565b8351630448a54560e51b815285810183905286816024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa879181610fc6575b50610ebf57845162461bcd60e51b815280610251818901611937565b90610ed2610120889793015115156118df565b8451848101916b19985b1cd957dc995c1bdc9d60a21b8352602c820152602c8152610efc81611717565b51902090828652600a84528085872001828752845260ff8587205416610f5d57916005949391600a93610ab3600654875190610f37826116fb565b601482527346616c7365207265706f72742070656e616c747960601b8783015285611bcd565b845162461bcd60e51b8152908101849052603960248201527f52657075746174696f6e53797374656d3a2050656e616c747920616c7265616460448201527f79206170706c69656420666f722074686973207265706f7274000000000000006064820152608490fd5b610fdb9192503d808a833e6102d08183611733565b9038610ea3565b5050346101c357816003193601126101c357517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b503461018157610100366003190112610181577f8f44d71ba15e77d8af7ec9274f5b957127f8167f4429e3c12aa5939247aec11991816080923591602435906044359182606435946110766115f1565b8660025582600355558360055560843560065560a43560075560c43560085560e435600955815194855260208501528301526060820152a180f35b5090346101815760203660031901126101815781356110d1811515611679565b8151630448a54560e51b815283810182905284816024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa859181611195575b5061113857825162461bcd60e51b815280610251818701611937565b606094935061012061114d91015115156118df565b8252600a602052808220906003600754936002840154809581811160001461118d5761117992506119b2565b925b01549181519384526020840152820152f35b50509261117b565b6111aa9192503d8088833e6102d08183611733565b903861111c565b509034610181576111c13661158c565b90338552602091600b83526111db60ff858820541661161d565b6111e6821515611679565b8351630448a54560e51b815285810183905286816024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa87918161137e575b5061124d57845162461bcd60e51b815280610251818901611937565b90611260610120889793015115156118df565b8451848101916b3b32b934b334b1b0ba34b7b760a11b8352602c820152602c815261128a81611717565b51902090828652600a84528085872001828752845260ff858720541661132757916008949391600a936112f46003548751906112c5826116fb565b601782527f5375636365737366756c20766572696669636174696f6e00000000000000000087830152856119f7565b828852848452858820019087528252838620600160ff19825416179055808652828252600784872001610cbf8154611980565b845162461bcd60e51b8152908101849052603e6024820152600080516020611dab83398151915260448201527f20636c61696d656420666f72207468697320766572696669636174696f6e00006064820152608490fd5b6113939192503d808a833e6102d08183611733565b9038611231565b508290346101c3576020928360031936011261018157813567ffffffffffffffff94858211610e1f5736602383011215610e1f5781840135958611610e1f57602495600592368883861b830101116115885795969590927f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169190885b85811061142a578980f35b8881839b98999a9b1b84010135611442811515611679565b8851630448a54560e51b81528a810182905288818d81895afa89918161156c575b5061147f57895162461bcd60e51b815280610251818e01611937565b610120611493919b9a999b015115156118df565b808a52600a8652878a20805490600954821180611540575b906114c0949392916114c8575b505050611980565b98979861141f565b612710916114ef620151806114e460016114f4950154426119b2565b049160085490611d03565b611d03565b049081611502575b806114b8565b611539918a5191611512836116fb565b60168352754461696c792072657075746174696f6e20646563617960501b8a840152611bcd565b8b806114fc565b50600181015462015180810180911161155a5742116114ab565b634e487b7160e01b8d5260118c528d8dfd5b6115819192503d808c833e6102d08183611733565b908d611463565b8680fd5b60409060031901126115a2576004359060243590565b600080fd5b600435906001600160a01b03821682036115a257565b90815180825260208080930193019160005b8281106115dd575050505090565b8351855293810193928101926001016115cf565b6000546001600160a01b0316330361160557565b60405163118cdaa760e01b8152336004820152602490fd5b1561162457565b60405162461bcd60e51b815260206004820152602760248201527f52657075746174696f6e53797374656d3a2043616c6c6572206e6f74206175746044820152661a1bdc9a5e995960ca1b6064820152608490fd5b1561168057565b60405162461bcd60e51b8152602060048201526024808201527f52657075746174696f6e53797374656d3a20496e76616c696420636974697a656044820152631b88125160e21b6064820152608490fd5b67ffffffffffffffff81116116e557604052565b634e487b7160e01b600052604160045260246000fd5b6040810190811067ffffffffffffffff8211176116e557604052565b6060810190811067ffffffffffffffff8211176116e557604052565b90601f8019910116810190811067ffffffffffffffff8211176116e557604052565b60005b8381106117685750506000910152565b8181015183820152602001611758565b81601f820112156115a257805167ffffffffffffffff81116116e557604051926117ac601f8301601f191660200185611733565b818452602082840101116115a2576117ca9160208085019101611755565b90565b6020818303126115a257805167ffffffffffffffff918282116115a257016101809283828203126115a257604051938401848110848211176116e5576040528151845260208201516001600160a01b03811681036115a257602085015260408201518381116115a25781611842918401611778565b604085015260608201518381116115a2578161185f918401611778565b60608501526080820151608085015260a082015160a085015260c082015160048110156115a25760c085015260e082015160e08501526101008083015190850152610120808301519081151582036115a257850152610140808301519085015261016092838301519081116115a2576118d89201611778565b9082015290565b156118e657565b60405162461bcd60e51b8152602060048201526024808201527f52657075746174696f6e53797374656d3a20436974697a656e206e6f742061636044820152637469766560e01b6064820152608490fd5b60809060208152602860208201527f52657075746174696f6e53797374656d3a20436974697a656e20646f6573206e6040820152671bdd08195e1a5cdd60c21b60608201520190565b600019811461198f5760010190565b634e487b7160e01b600052601160045260246000fd5b9190820180921161198f57565b9190820391821161198f57565b916080939183526020830152606060408301526119eb8151809281606086015260208686019101611755565b601f01601f1916010190565b929192600093818552600a60205260408520600381018054620151808101809111611bb9574211611baa575b508360028201611a35815492836119a5565b600754809111611b86575b5085611a51575b5050505050509050565b611a6a835496611a6181896119a5565b938486556119a5565b90554260018301556001600160a01b03927f0000000000000000000000000000000000000000000000000000000000000000841691823b15611b82576040519063fdf488f760e01b82528660048301526024820152888160448183875af18015611b7757600080516020611d8b833981519152969798998692602492611b68575b5080809560405193848092630448a54560e51b82528d60048301525afa90918282611b4b575b5050611b3d575b5050611b2e9192546040519485941697846119bf565b0390a380388080808080611a47565b602001511691508338611b18565b611b609293503d8091833e6102d08183611733565b903880611b11565b611b71906116d1565b38611aeb565b6040513d8b823e3d90fd5b8880fd5b9095508180821115611ba257611b9b916119b2565b9438611a40565b505086611b9b565b86600283015542905538611a23565b634e487b7160e01b88526011600452602488fd5b6000818152600a6020526040812080549195949193808510611cfa57611bf49082546119b2565b81555b42600182015580546001600160a01b03927f0000000000000000000000000000000000000000000000000000000000000000841691823b15611b82576040519063fdf488f760e01b82528660048301526024820152888160448183875af18015611b7757600080516020611d8b833981519152969798998692602492611ceb575b5080809560405193848092630448a54560e51b82528d60048301525afa90918282611cce575b5050611cc0575b5050611cbb9192546040519485941697846119bf565b0390a3565b602001511691508338611ca5565b611ce39293503d8091833e6102d08183611733565b903880611c9e565b611cf4906116d1565b38611c78565b50858155611bf7565b8181029291811591840414171561198f57565b67ffffffffffffffff81116116e55760051b60200190565b90611d3882611d16565b611d456040519182611733565b8281528092611d56601f1991611d16565b0190602036910137565b8051821015611d745760209160051b010190565b634e487b7160e01b600052603260045260246000fdfe5653f9d595db843b99875613cc55c95fe05012924b8e4fc5671f9a1cb76f2d9052657075746174696f6e53797374656d3a2052657761726420616c7265616479a2646970667358221220205369cc50f4abb4de4e0ac0572e818f0446d7fb37a37b400fcf7ff6a66ac9af64736f6c63430008140033",
  "devdoc": {
    "author": "CitiProof Team",
    "details": "Manages citizen reputation scores based on verified activities",
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "addIssueReportReputation(uint256,bytes32)": {
        "details": "Add reputation points for verified issue report"
      },
      "addProjectCompletionReputation(uint256,bytes32)": {
        "details": "Add reputation points for project completion"
      },
      "addVerificationReputation(uint256,bytes32)": {
        "details": "Add reputation points for successful verification"
      },
      "addVotingReputation(uint256,bytes32)": {
        "details": "Add reputation points for voting participation"
      },
      "applyDailyDecay(uint256[])": {
        "details": "Apply daily reputation decay to prevent inflation"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "penalizeFalseReport(uint256,bytes32)": {
        "details": "Penalize reputation for false reports"
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "ReputationSystem",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/ReputationSystem.sol:ReputationSystem",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 188,
        "contract": "contracts/ReputationSystem.sol:ReputationSystem",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 5903,
        "contract": "contracts/ReputationSystem.sol:ReputationSystem",
        "label": "config",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(ReputationConfig)5900_storage"
      },
      {
        "astId": 5931,
        "contract": "contracts/ReputationSystem.sol:ReputationSystem",
        "label": "reputationData",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_struct(ReputationData)5926_storage)"
      },
      {
        "astId": 5935,
        "contract": "contracts/ReputationSystem.sol:ReputationSystem",
        "label": "authorizedContracts",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(ReputationData)5926_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ReputationSystem.ReputationData)",
        "numberOfBytes": "32",
        "value": "t_struct(ReputationData)5926_storage"
      },
      "t_struct(ReputationConfig)5900_storage": {
        "encoding": "inplace",
        "label": "struct ReputationSystem.ReputationConfig",
        "members": [
          {
            "astId": 5885,
            "contract": "contracts/ReputationSystem.sol:ReputationSystem",
            "label": "issueReportReward",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5887,
            "contract": "contracts/ReputationSystem.sol:ReputationSystem",
            "label": "verificationReward",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5889,
            "contract": "contracts/ReputationSystem.sol:ReputationSystem",
            "label": "votingReward",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5891,
            "contract": "contracts/ReputationSystem.sol:ReputationSystem",
            "label": "projectCompletionReward",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5893,
            "contract": "contracts/ReputationSystem.sol:ReputationSystem",
            "label": "falseReportPenalty",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 5895,
            "contract": "contracts/ReputationSystem.sol:ReputationSystem",
            "label": "maxDailyEarnings",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 5897,
            "contract": "contracts/ReputationSystem.sol:ReputationSystem",
            "label": "decayRate",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 5899,
            "contract": "contracts/ReputationSystem.sol:ReputationSystem",
            "label": "minimumDecayThreshold",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(ReputationData)5926_storage": {
        "encoding": "inplace",
        "label": "struct ReputationSystem.ReputationData",
        "members": [
          {
            "astId": 5905,
            "contract": "contracts/ReputationSystem.sol:ReputationSystem",
            "label": "totalScore",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5907,
            "contract": "contracts/ReputationSystem.sol:ReputationSystem",
            "label": "lastUpdateTimestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5909,
            "contract": "contracts/ReputationSystem.sol:ReputationSystem",
            "label": "dailyEarnings",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5911,
            "contract": "contracts/ReputationSystem.sol:ReputationSystem",
            "label": "lastEarningsReset",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5915,
            "contract": "contracts/ReputationSystem.sol:ReputationSystem",
            "label": "actionCompleted",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_bytes32,t_bool)"
          },
          {
            "astId": 5917,
            "contract": "contracts/ReputationSystem.sol:ReputationSystem",
            "label": "totalReports",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 5919,
            "contract": "contracts/ReputationSystem.sol:ReputationSystem",
            "label": "verifiedReports",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 5921,
            "contract": "contracts/ReputationSystem.sol:ReputationSystem",
            "label": "totalVerifications",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 5923,
            "contract": "contracts/ReputationSystem.sol:ReputationSystem",
            "label": "successfulVerifications",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 5925,
            "contract": "contracts/ReputationSystem.sol:ReputationSystem",
            "label": "votingParticipation",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}